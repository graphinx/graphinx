import { mkdirSync, writeFileSync } from 'node:fs';
import path from 'node:path';
import { printSchema } from 'graphql';
import type { BuiltData } from '../built-data.js';
import { getAllItems, getAllModules } from '../modules.js';
import { loadSchema } from '../schema-loader.js';
import { b } from '../utils.js';
import type { ProcessedConfig } from '../configuration.js';

/**
 * Writes the data file to inject at the given path
 * @param to must be absolute
 * @param config
 */
export async function generateDatafile(to: string, config: ProcessedConfig) {
	const schema = await loadSchema(config);
	console.info(
		`🏷️  Loaded ${b(
			Object.keys(schema.getTypeMap()).length,
		)} types from schema`,
	);

	const items = await getAllItems(schema, config);

	const builtData: BuiltData = {
		modules: await getAllModules(schema, config, items),
		// index: await indexModule(config, items),
		index: undefined,
		schema: printSchema(schema),
		config: censorIntrospectionHeaders(config),
		items,
	};

	const typescriptDecl = `// This file is generated by Graphinx. Do not edit.
import type { BuiltData } from 'graphinx';
export const data: BuiltData = ${JSON.stringify(builtData, null, 2)};`;

	const typescriptDeclDevelomentMode = `// This file is generated by Graphinx. Do not edit.
export const data = ${JSON.stringify(builtData, null, 2)} as const;`;

	const jsdocDecl = `// This file is generated by Graphinx. Do not edit.
/** @type {require('graphinx').BuiltData} */
export const data = ${JSON.stringify(builtData, null, 2)};`;

	console.info(`📝 Writing data file to ${b(to)}`);
	mkdirSync(path.dirname(to), { recursive: true });
	writeFileSync(
		to,
		process.env.GRAPHINX_DEV === '1'
			? typescriptDeclDevelomentMode
			: isTypescriptFile(to)
				? typescriptDecl
				: jsdocDecl,
	);
}

function isTypescriptFile(to: string) {
	return to.endsWith('.ts') || to.endsWith('.tsx');
}

function censorIntrospectionHeaders(config: ProcessedConfig): ProcessedConfig {
	if (!('introspection' in config.schema)) return config;
	if (!config.schema.introspection.headers) return config;
	return {
		...config,
		schema: {
			...config.schema,
			introspection: {
				...config.schema.introspection,
				headers: Object.fromEntries(
					Object.entries(config.schema.introspection.headers).map(
						([key, value]) => [
							key,
							value === '' ? '' : '*********',
						],
					),
				),
			},
		},
	};
}
