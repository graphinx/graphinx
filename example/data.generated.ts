// This file is generated by Graphinx. Do not edit.
import type { BuiltData } from 'graphinx';
export const data: BuiltData = {
  "modules": [
    {
      "name": "global",
      "metadata": {
        "include": [
          "Node",
          "PageInfo",
          "BuildInfo"
        ]
      },
      "displayName": "Types globaux",
      "rawDocs": "---\ninclude: [Node, PageInfo, BuildInfo]\n---\n\n# Types globaux\n\nTypes utilisés au travers de tout l'API.\n",
      "shortDescription": "Types utilisés au travers de tout l'API",
      "renderedDocs": "<html><head></head><body>\n<p>Types utilisés au travers de tout l'API.</p></body></html>",
      "types": [
        "ID",
        "BuildInfo",
        "Color",
        "DateRangeInput",
        "DateTime",
        "Email",
        "Error",
        "ErrorInterface",
        "File",
        "HTML",
        "LocalID",
        "LooseURL",
        "Markdown",
        "MutationSetPictureResult",
        "Node",
        "NotFoundError",
        "PageInfo",
        "PhoneNumber",
        "Pictured",
        "PositiveInt",
        "QRCode",
        "Shareable",
        "ShortString",
        "SortDirection",
        "StringToIntMapping",
        "UID",
        "URL",
        "Visibility",
        "ZodError",
        "ZodFieldError"
      ],
      "queries": [
        "buildInfo",
        "loggedIn",
        "renderMarkdown",
        "uidIsAvailable"
      ],
      "mutations": [
        "trackShare"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "buildInfo",
          "id": "Query.buildInfo",
          "type": "query",
          "returnType": "BuildInfo",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/global/resolvers/query.build-info.ts",
              "path": "src/modules/global/resolvers/query.build-info.ts"
            }
          }
        },
        {
          "name": "loggedIn",
          "id": "Query.loggedIn",
          "type": "query",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/global/resolvers/query.logged-in.ts",
              "path": "src/modules/global/resolvers/query.logged-in.ts"
            }
          }
        },
        {
          "name": "renderMarkdown",
          "id": "Query.renderMarkdown",
          "type": "query",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/global/resolvers/query.render-markdown.ts",
              "path": "src/modules/global/resolvers/query.render-markdown.ts"
            }
          }
        },
        {
          "name": "uidIsAvailable",
          "id": "Query.uidIsAvailable",
          "type": "query",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/global/resolvers/query.uid-is-available.ts",
              "path": "src/modules/global/resolvers/query.uid-is-available.ts"
            }
          }
        },
        {
          "name": "trackShare",
          "id": "Mutation.trackShare",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/global/resolvers/mutation.track-share.ts",
              "path": "src/modules/global/resolvers/mutation.track-share.ts"
            }
          }
        },
        {
          "name": "ID",
          "id": "ID",
          "type": "type",
          "referencedBy": [
            "Announcement",
            "Answer",
            "AnswerDate",
            "AnswerFileUpload",
            "AnswerInput",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerScale",
            "AnswerSearchResult",
            "AnswerSelectMultiple",
            "AnswerSelectOne",
            "AnswerText",
            "AnswerTime",
            "Article",
            "ArticleSearchResultType",
            "BarWeek",
            "Bookmark",
            "Comment",
            "Commentable",
            "ContributionOption",
            "Credential",
            "Document",
            "DocumentSearchResult",
            "EmailChange",
            "EvenSearchResult",
            "Event",
            "EventManager",
            "Form",
            "FormSearchResult",
            "FormSection",
            "GodparentRequest",
            "Group",
            "GroupMember",
            "GroupSearchResult",
            "Link",
            "LogEntry",
            "LydiaAccount",
            "Major",
            "Minor",
            "MutationUpsertFormInput",
            "MutationUpsertFormSectionInput",
            "MutationUpsertQuestionInput",
            "Node",
            "Notification",
            "NotificationSubscription",
            "Page",
            "Picture",
            "Pictured",
            "ProfitsBreakdownByTicket",
            "Question",
            "QuestionFileUpload",
            "QuestionOptionInput",
            "QuestionScalar",
            "QuestionScale",
            "QuestionSelectMultiple",
            "QuestionSelectOne",
            "QuickSignup",
            "Reactable",
            "Reaction",
            "Registration",
            "RegistrationSearchResult",
            "School",
            "SchoolInput",
            "Service",
            "Shareable",
            "ShopItem",
            "ShopItemAnswer",
            "ShopItemOption",
            "ShopPayment",
            "StudentAssociation",
            "Subject",
            "TeachingUnit",
            "Theme",
            "ThemeValue",
            "Ticket",
            "TicketGroup",
            "TicketGroupInput",
            "User",
            "UserCandidate",
            "UserSearchResult"
          ],
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "ID"
            }
          }
        },
        {
          "name": "BuildInfo",
          "id": "BuildInfo",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "Color",
          "id": "Color",
          "type": "type",
          "referencedBy": [
            "Group",
            "GroupProfileInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/color.ts",
              "path": "src/modules/global/types/color.ts"
            }
          }
        },
        {
          "name": "DateRangeInput",
          "id": "DateRangeInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/date-range-input.ts",
              "path": "src/modules/global/types/date-range-input.ts"
            }
          }
        },
        {
          "name": "DateTime",
          "id": "DateTime",
          "type": "type",
          "referencedBy": [
            "Announcement",
            "Answer",
            "AnswerDate",
            "AnswerFileUpload",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerScale",
            "AnswerSelectMultiple",
            "AnswerSelectOne",
            "AnswerText",
            "AnswerTime",
            "AnswersOfUser",
            "Article",
            "BarWeek",
            "ChangelogRelease",
            "Comment",
            "Credential",
            "DateRangeInput",
            "Document",
            "EmailChange",
            "Event",
            "EventsByDay",
            "Form",
            "GodparentRequest",
            "Group",
            "GroupMember",
            "Issue",
            "IssueComment",
            "Link",
            "LogEntry",
            "MutationUpsertFormInput",
            "Notification",
            "NotificationSubscription",
            "Page",
            "QuickSignup",
            "Reaction",
            "Registration",
            "ShopItem",
            "ShopPayment",
            "StudentAssociation",
            "Subject",
            "Theme",
            "Ticket",
            "User",
            "UserCandidate",
            "UserProfileInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/date-time.ts",
              "path": "src/modules/global/types/date-time.ts"
            }
          }
        },
        {
          "name": "Email",
          "id": "Email",
          "type": "type",
          "referencedBy": [
            "Group",
            "GroupProfileInput",
            "StudentAssociation",
            "User",
            "UserProfileInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/email.ts",
              "path": "src/modules/global/types/email.ts"
            }
          }
        },
        {
          "name": "Error",
          "id": "Error",
          "type": "type",
          "referencedBy": [
            "EventBookingsCsvResult",
            "MutationAcceptRegistrationResult",
            "MutationAddFileToPageResult",
            "MutationAddGroupMemberResult",
            "MutationAddLinksResult",
            "MutationAnswerFormSectionResult",
            "MutationAnswerGodparentRequestResult",
            "MutationBanFromEventResult",
            "MutationBookEventResult",
            "MutationCancelBookingResult",
            "MutationCancelPendingContributionResult",
            "MutationChangeEventOrganizerResult",
            "MutationContributeResult",
            "MutationCreateAppleWalletPassResult",
            "MutationCreateEventResult",
            "MutationCreateGoogleWalletPassResult",
            "MutationCreateGroupAccessTokenResult",
            "MutationCreateGroupResult",
            "MutationCreatePasswordResetResult",
            "MutationCreatePostResult",
            "MutationCreateTicketResult",
            "MutationDeleteContributionResult",
            "MutationDeleteEventResult",
            "MutationDeleteGodchildResult",
            "MutationDeleteGodparentResult",
            "MutationDeleteLinkResult",
            "MutationDeletePageResult",
            "MutationDeleteShopItemResult",
            "MutationDeleteTicketGroupResult",
            "MutationDeleteTicketResult",
            "MutationFinishPaypalRegistrationPaymentResult",
            "MutationLoginResult",
            "MutationMailFormAnswersResult",
            "MutationMarkBookingAsPaidResult",
            "MutationMarkContributionAsPaidResult",
            "MutationOpposeRegistrationResult",
            "MutationPaidShopPaymentResult",
            "MutationPayBookingResult",
            "MutationRegisterGoogleCredentialResult",
            "MutationRemoveEventManagerResult",
            "MutationRemoveFileFromPageResult",
            "MutationRequestEmailChangeResult",
            "MutationResetPasswordResult",
            "MutationSaveLydiaPhoneNumberResult",
            "MutationSelfJoinGroupResult",
            "MutationSetEventApplicableOffersResult",
            "MutationSetEventBeneficiaryResult",
            "MutationSetEventCoOrganizersResult",
            "MutationSetEventDatesResult",
            "MutationSetEventVisibilityResult",
            "MutationSetGroupJoinPolicyResult",
            "MutationSetGroupStudentAssociationResult",
            "MutationSetGroupTypeResult",
            "MutationSetParentGroupResult",
            "MutationSetPictureResult",
            "MutationSetTicketGroupResult",
            "MutationStartSignupResult",
            "MutationSubscribeToNotificationsResult",
            "MutationUnbanFromEventResult",
            "MutationUnsubscribeFromNotificationsResult",
            "MutationUpdateEventRecurrenceResult",
            "MutationUpdateEventResult",
            "MutationUpdateGroupProfileResult",
            "MutationUpdateLinkResult",
            "MutationUpdateTicketConstraintsResult",
            "MutationUpdateTicketResult",
            "MutationUpdateUserCandidateResult",
            "MutationUpdateUserCurriculumResult",
            "MutationUpdateUserPermissionsResult",
            "MutationUpdateUserProfileResult",
            "MutationUpdateUserResult",
            "MutationUpsertAnnouncementResult",
            "MutationUpsertArticleResult",
            "MutationUpsertBarWeekResult",
            "MutationUpsertDocumentResult",
            "MutationUpsertEventManagerResult",
            "MutationUpsertGodparentRequestResult",
            "MutationUpsertGroupResult",
            "MutationUpsertPageResult",
            "MutationUpsertRegistrationResult",
            "MutationUpsertServiceResult",
            "MutationUpsertShopItemResult",
            "MutationUpsertShopPaymentResult",
            "MutationUpsertThemeResult",
            "MutationUpsertTicketGroupResult",
            "MutationUsePasswordResetResult",
            "MutationValidateEmailResult",
            "MutationVerifyBookingResult",
            "QueryCodeContributorsResult",
            "QueryCombinedChangelogResult",
            "QueryGroupMembersCsvResult",
            "QueryRegistrationResult",
            "QueryUpcomingChangelogResult",
            "SubscriptionRegistrationResult"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "Error"
            }
          }
        },
        {
          "name": "ErrorInterface",
          "id": "ErrorInterface",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "ErrorInterface"
            }
          }
        },
        {
          "name": "File",
          "id": "File",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/file.ts",
              "path": "src/modules/global/types/file.ts"
            }
          }
        },
        {
          "name": "HTML",
          "id": "HTML",
          "type": "type",
          "referencedBy": [
            "Event",
            "Group",
            "StudentAssociation",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/html.ts",
              "path": "src/modules/global/types/html.ts"
            }
          }
        },
        {
          "name": "LocalID",
          "id": "LocalID",
          "type": "type",
          "referencedBy": [
            "Announcement",
            "Article",
            "BarWeek",
            "Bookmark",
            "Comment",
            "ContributionOption",
            "Document",
            "EmailChange",
            "Event",
            "EventManager",
            "Form",
            "Group",
            "Link",
            "LogEntry",
            "LydiaAccount",
            "Minor",
            "Node",
            "Notification",
            "QuickSignup",
            "Reaction",
            "Registration",
            "Service",
            "ShopItem",
            "Theme",
            "ThemeValue",
            "Ticket",
            "TicketGroup",
            "User",
            "UserCandidate"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/local-id.ts",
              "path": "src/modules/global/types/local-id.ts"
            }
          }
        },
        {
          "name": "LooseURL",
          "id": "LooseURL",
          "type": "type",
          "referencedBy": [
            "LinkInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/loose-url.ts",
              "path": "src/modules/global/types/loose-url.ts"
            }
          }
        },
        {
          "name": "Markdown",
          "id": "Markdown",
          "type": "type",
          "referencedBy": [
            "GroupProfileInput",
            "UserProfileInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/markdown.ts",
              "path": "src/modules/global/types/markdown.ts"
            }
          }
        },
        {
          "name": "MutationSetPictureResult",
          "id": "MutationSetPictureResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetPictureResult",
            "successDataType": "Pictured",
            "successType": "MutationSetPictureSuccess"
          },
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/pictured.ts",
              "path": "src/modules/global/types/pictured.ts"
            }
          }
        },
        {
          "name": "Node",
          "id": "Node",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "Node"
            }
          }
        },
        {
          "name": "NotFoundError",
          "id": "NotFoundError",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "NotFoundError"
            }
          }
        },
        {
          "name": "PageInfo",
          "id": "PageInfo",
          "type": "type",
          "referencedBy": [
            "CommentsConnection",
            "EventBookingsConnection",
            "EventLogsConnection",
            "FormAnswersByUserConnection",
            "FormAnswersConnection",
            "FormQuestionsConnection",
            "FormSectionAnswersConnection",
            "GroupEventsConnection",
            "GroupShopItemsConnection",
            "PagesConnection",
            "QueryAllFormsConnection",
            "QueryAllUsersConnection",
            "QueryAnnouncementsConnection",
            "QueryDocumentsConnection",
            "QueryEventsByDayConnection",
            "QueryEventsConnection",
            "QueryFormsConnection",
            "QueryHomepageConnection",
            "QueryLogsConnection",
            "QueryMinorsConnection",
            "QueryNotificationsConnection",
            "QueryPagesConnection",
            "QueryQuickSignupsConnection",
            "QueryReactionsConnection",
            "QueryUserCandidatesConnection",
            "QuestionAnswersConnection",
            "StudentAssociationGroupsConnection",
            "StudentAssociationServicesConnection",
            "SubjectDocumentsConnection",
            "UserAnsweredFormsConnection",
            "UserArticlesConnection",
            "UserBookingsConnection",
            "UserPartiallyAnsweredFormsConnection"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "PageInfo"
            }
          }
        },
        {
          "name": "PhoneNumber",
          "id": "PhoneNumber",
          "type": "type",
          "referencedBy": [
            "UserProfileInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/phone-number.ts",
              "path": "src/modules/global/types/phone-number.ts"
            }
          }
        },
        {
          "name": "Pictured",
          "id": "Pictured",
          "type": "type",
          "referencedBy": [
            "MutationSetPictureSuccess"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/pictured.ts",
              "path": "src/modules/global/types/pictured.ts"
            }
          }
        },
        {
          "name": "PositiveInt",
          "id": "PositiveInt",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/positive-int.ts",
              "path": "src/modules/global/types/positive-int.ts"
            }
          }
        },
        {
          "name": "QRCode",
          "id": "QRCode",
          "type": "type",
          "referencedBy": [
            "Registration"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/qr-code.ts",
              "path": "src/modules/global/types/qr-code.ts"
            }
          }
        },
        {
          "name": "Shareable",
          "id": "Shareable",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/shareable.ts",
              "path": "src/modules/global/types/shareable.ts"
            }
          }
        },
        {
          "name": "ShortString",
          "id": "ShortString",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/short-string.ts",
              "path": "src/modules/global/types/short-string.ts"
            }
          }
        },
        {
          "name": "SortDirection",
          "id": "SortDirection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/sort-direction.ts",
              "path": "src/modules/global/types/sort-direction.ts"
            }
          }
        },
        {
          "name": "StringToIntMapping",
          "id": "StringToIntMapping",
          "type": "type",
          "referencedBy": [
            "QuestionScale",
            "QuestionSelectMultiple",
            "QuestionSelectOne"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/string-to-int-mapping.ts",
              "path": "src/modules/global/types/string-to-int-mapping.ts"
            }
          }
        },
        {
          "name": "UID",
          "id": "UID",
          "type": "type",
          "referencedBy": [
            "GroupProfileInput",
            "TicketConstraintsInput",
            "UpsertGroupInput"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/uid.ts",
              "path": "src/modules/global/types/uid.ts"
            }
          }
        },
        {
          "name": "URL",
          "id": "URL",
          "type": "type",
          "referencedBy": [
            "Event",
            "Link"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/url.ts",
              "path": "src/modules/global/types/url.ts"
            }
          }
        },
        {
          "name": "Visibility",
          "id": "Visibility",
          "type": "type",
          "referencedBy": [
            "Article",
            "Event",
            "Form",
            "MutationUpsertFormInput",
            "ShopItem",
            "Theme"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/visibility.ts",
              "path": "src/modules/global/types/visibility.ts"
            }
          }
        },
        {
          "name": "ZodError",
          "id": "ZodError",
          "type": "type",
          "referencedBy": [
            "EventBookingsCsvResult",
            "MutationAcceptRegistrationResult",
            "MutationAddFileToPageResult",
            "MutationAddGroupMemberResult",
            "MutationAddLinksResult",
            "MutationAnswerFormSectionResult",
            "MutationAnswerGodparentRequestResult",
            "MutationBanFromEventResult",
            "MutationBookEventResult",
            "MutationCancelBookingResult",
            "MutationCancelPendingContributionResult",
            "MutationChangeEventOrganizerResult",
            "MutationContributeResult",
            "MutationCreateAppleWalletPassResult",
            "MutationCreateEventResult",
            "MutationCreateGoogleWalletPassResult",
            "MutationCreateGroupAccessTokenResult",
            "MutationCreateGroupResult",
            "MutationCreatePasswordResetResult",
            "MutationCreatePostResult",
            "MutationCreateTicketResult",
            "MutationDeleteContributionResult",
            "MutationDeleteEventResult",
            "MutationDeleteGodchildResult",
            "MutationDeleteGodparentResult",
            "MutationDeleteLinkResult",
            "MutationDeletePageResult",
            "MutationDeleteShopItemResult",
            "MutationDeleteTicketGroupResult",
            "MutationDeleteTicketResult",
            "MutationFinishPaypalRegistrationPaymentResult",
            "MutationLoginResult",
            "MutationMailFormAnswersResult",
            "MutationMarkBookingAsPaidResult",
            "MutationMarkContributionAsPaidResult",
            "MutationOpposeRegistrationResult",
            "MutationPaidShopPaymentResult",
            "MutationPayBookingResult",
            "MutationRegisterGoogleCredentialResult",
            "MutationRemoveEventManagerResult",
            "MutationRemoveFileFromPageResult",
            "MutationRequestEmailChangeResult",
            "MutationResetPasswordResult",
            "MutationSaveLydiaPhoneNumberResult",
            "MutationSelfJoinGroupResult",
            "MutationSetEventApplicableOffersResult",
            "MutationSetEventBeneficiaryResult",
            "MutationSetEventCoOrganizersResult",
            "MutationSetEventDatesResult",
            "MutationSetEventVisibilityResult",
            "MutationSetGroupJoinPolicyResult",
            "MutationSetGroupStudentAssociationResult",
            "MutationSetGroupTypeResult",
            "MutationSetParentGroupResult",
            "MutationSetPictureResult",
            "MutationSetTicketGroupResult",
            "MutationStartSignupResult",
            "MutationSubscribeToNotificationsResult",
            "MutationUnbanFromEventResult",
            "MutationUnsubscribeFromNotificationsResult",
            "MutationUpdateEventRecurrenceResult",
            "MutationUpdateEventResult",
            "MutationUpdateGroupProfileResult",
            "MutationUpdateLinkResult",
            "MutationUpdateTicketConstraintsResult",
            "MutationUpdateTicketResult",
            "MutationUpdateUserCandidateResult",
            "MutationUpdateUserCurriculumResult",
            "MutationUpdateUserPermissionsResult",
            "MutationUpdateUserProfileResult",
            "MutationUpdateUserResult",
            "MutationUpsertAnnouncementResult",
            "MutationUpsertArticleResult",
            "MutationUpsertBarWeekResult",
            "MutationUpsertDocumentResult",
            "MutationUpsertEventManagerResult",
            "MutationUpsertGodparentRequestResult",
            "MutationUpsertGroupResult",
            "MutationUpsertPageResult",
            "MutationUpsertRegistrationResult",
            "MutationUpsertServiceResult",
            "MutationUpsertShopItemResult",
            "MutationUpsertShopPaymentResult",
            "MutationUpsertThemeResult",
            "MutationUpsertTicketGroupResult",
            "MutationUsePasswordResetResult",
            "MutationValidateEmailResult",
            "MutationVerifyBookingResult",
            "QueryCodeContributorsResult",
            "QueryCombinedChangelogResult",
            "QueryGroupMembersCsvResult",
            "QueryRegistrationResult",
            "QueryUpcomingChangelogResult",
            "SubscriptionRegistrationResult"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/global/types/zod-error.ts",
              "path": "src/modules/global/types/zod-error.ts"
            }
          }
        },
        {
          "name": "ZodFieldError",
          "id": "ZodFieldError",
          "type": "type",
          "referencedBy": [
            "ZodError"
          ],
          "deprecationReason": null,
          "moduleName": "global",
          "match": {
            "static": {
              "matcher": "ZodFieldError"
            }
          }
        }
      ]
    },
    {
      "name": "users",
      "metadata": {
        "color": "blue"
      },
      "displayName": "Users",
      "rawDocs": "---\ncolor: blue\n---\n\n# Users\n\nLes personnes utilisant l'application.\n\n## Inscription\n\nL'inscription se fait en deux ou trois parties: la première consiste à donner simplement une adresse e-mail et à la valider.\nEnsuite, on rentre le reste des informations.\nEnfin, si la personne déclare appartenir à une école mais que l'e-mail n'est pas dans le domaine de l'école (ce qui prouve automatiquement que la personne est étudiante), il faut qu'un admin confirme manuellement.\n\nCe n'est qu'après cette validation (quand elle est nécessaire) que l'objet `UserCandidate` est transformé en `User`.\n\n## Connexion\n\nLa mutation `login` permet la connexion.\n",
      "shortDescription": "Les personnes utilisant l'application",
      "renderedDocs": "<html><head></head><body>\n<p>Les personnes utilisant l'application.</p>\n<h2>Inscription</h2>\n<p>L'inscription se fait en deux ou trois parties: la première consiste à donner simplement une adresse e-mail et à la valider.\nEnsuite, on rentre le reste des informations.\nEnfin, si la personne déclare appartenir à une école mais que l'e-mail n'est pas dans le domaine de l'école (ce qui prouve automatiquement que la personne est étudiante), il faut qu'un admin confirme manuellement.</p>\n<p>Ce n'est qu'après cette validation (quand elle est nécessaire) que l'objet <code>UserCandidate</code> est transformé en <code>User</code>.</p>\n<h2>Connexion</h2>\n<p>La mutation <code>login</code> permet la connexion.</p></body></html>",
      "types": [
        "AwaitingValidationError",
        "Bookmark",
        "Credential",
        "CredentialType",
        "EmailChange",
        "FamilyTree",
        "GodparentRequest",
        "MutationAcceptRegistrationResult",
        "MutationAnswerGodparentRequestResult",
        "MutationCreateGroupAccessTokenResult",
        "MutationDeleteGodchildResult",
        "MutationDeleteGodparentResult",
        "MutationLoginResult",
        "MutationRequestEmailChangeResult",
        "MutationSaveLydiaPhoneNumberResult",
        "MutationStartSignupResult",
        "MutationUpdateUserCurriculumResult",
        "MutationUpdateUserPermissionsResult",
        "MutationUpdateUserProfileResult",
        "MutationUpdateUserResult",
        "MutationUpsertGodparentRequestResult",
        "MutationValidateEmailResult",
        "QueryAllUsersConnection",
        "QueryCodeContributorsResult",
        "QueryQuickSignupsConnection",
        "QueryUserCandidatesConnection",
        "QuickSignup",
        "SignupCompletionResult",
        "User",
        "UserCandidate",
        "UserProfileInput",
        "UserSearchResult"
      ],
      "queries": [
        "allUsers",
        "assertMe",
        "birthdays",
        "bookmarked",
        "existsInSchoolLdap",
        "godparentRequest",
        "godparentRequests",
        "me",
        "quickSignup",
        "quickSignups",
        "searchUsers",
        "suggestedUid",
        "user",
        "userByEmail",
        "userCandidate",
        "userCandidateByEmail",
        "userCandidates"
      ],
      "mutations": [
        "acceptRegistration",
        "answerGodparentRequest",
        "bookmark",
        "completeSignup",
        "createBot",
        "createPasswordReset",
        "createQuickSignup",
        "deleteGodchild",
        "deleteGodparent",
        "deleteQuickSignup",
        "deleteToken",
        "deleteUserPicture",
        "login",
        "logout",
        "refuseRegistration",
        "registerGoogleCredential",
        "renameSession",
        "requestEmailChange",
        "resetPassword",
        "saveLydiaPhoneNumber",
        "startSignup",
        "syncUserLdap",
        "unbookmark",
        "updateNotificationSettings",
        "updateUser",
        "updateUserCandidate",
        "updateUserCurriculum",
        "updateUserPermissions",
        "updateUserPicture",
        "updateUserProfile",
        "upsertGodparentRequest",
        "usePasswordReset",
        "validateEmail"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "allUsers",
          "id": "Query.allUsers",
          "type": "query",
          "returnType": "QueryAllUsersConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "User",
            "edgeType": "QueryAllUsersConnectionEdge",
            "connectionType": "QueryAllUsersConnection"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.all-users.ts",
              "path": "src/modules/users/resolvers/query.all-users.ts"
            }
          }
        },
        {
          "name": "assertMe",
          "id": "Query.assertMe",
          "type": "query",
          "returnType": "User",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.assert-me.ts",
              "path": "src/modules/users/resolvers/query.assert-me.ts"
            }
          }
        },
        {
          "name": "birthdays",
          "id": "Query.birthdays",
          "type": "query",
          "returnType": "User",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.birthdays.ts",
              "path": "src/modules/users/resolvers/query.birthdays.ts"
            }
          }
        },
        {
          "name": "bookmarked",
          "id": "Query.bookmarked",
          "type": "query",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.bookmarked.ts",
              "path": "src/modules/users/resolvers/query.bookmarked.ts"
            }
          }
        },
        {
          "name": "existsInSchoolLdap",
          "id": "Query.existsInSchoolLdap",
          "type": "query",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.exists-in-school-ldap.ts",
              "path": "src/modules/users/resolvers/query.exists-in-school-ldap.ts"
            }
          }
        },
        {
          "name": "godparentRequest",
          "id": "Query.godparentRequest",
          "type": "query",
          "returnType": "GodparentRequest",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.godparent-request.ts",
              "path": "src/modules/users/resolvers/query.godparent-request.ts"
            }
          }
        },
        {
          "name": "godparentRequests",
          "id": "Query.godparentRequests",
          "type": "query",
          "returnType": "GodparentRequest",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.godparent-requests.ts",
              "path": "src/modules/users/resolvers/query.godparent-requests.ts"
            }
          }
        },
        {
          "name": "me",
          "id": "Query.me",
          "type": "query",
          "returnType": "User",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.me.ts",
              "path": "src/modules/users/resolvers/query.me.ts"
            }
          }
        },
        {
          "name": "quickSignup",
          "id": "Query.quickSignup",
          "type": "query",
          "returnType": "QuickSignup",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.quick-signup.ts",
              "path": "src/modules/users/resolvers/query.quick-signup.ts"
            }
          }
        },
        {
          "name": "quickSignups",
          "id": "Query.quickSignups",
          "type": "query",
          "returnType": "QueryQuickSignupsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "QuickSignup",
            "edgeType": "QueryQuickSignupsConnectionEdge",
            "connectionType": "QueryQuickSignupsConnection"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.quick-signups.ts",
              "path": "src/modules/users/resolvers/query.quick-signups.ts"
            }
          }
        },
        {
          "name": "searchUsers",
          "id": "Query.searchUsers",
          "type": "query",
          "returnType": "UserSearchResult",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.search-users.ts",
              "path": "src/modules/users/resolvers/query.search-users.ts"
            }
          }
        },
        {
          "name": "suggestedUid",
          "id": "Query.suggestedUid",
          "type": "query",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.suggested-uid.ts",
              "path": "src/modules/users/resolvers/query.suggested-uid.ts"
            }
          }
        },
        {
          "name": "user",
          "id": "Query.user",
          "type": "query",
          "returnType": "User",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.user.ts",
              "path": "src/modules/users/resolvers/query.user.ts"
            }
          }
        },
        {
          "name": "userByEmail",
          "id": "Query.userByEmail",
          "type": "query",
          "returnType": "User",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.user-by-email.ts",
              "path": "src/modules/users/resolvers/query.user-by-email.ts"
            }
          }
        },
        {
          "name": "userCandidate",
          "id": "Query.userCandidate",
          "type": "query",
          "returnType": "UserCandidate",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.user-candidate.ts",
              "path": "src/modules/users/resolvers/query.user-candidate.ts"
            }
          }
        },
        {
          "name": "userCandidateByEmail",
          "id": "Query.userCandidateByEmail",
          "type": "query",
          "returnType": "UserCandidate",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.user-candidate-by-email.ts",
              "path": "src/modules/users/resolvers/query.user-candidate-by-email.ts"
            }
          }
        },
        {
          "name": "userCandidates",
          "id": "Query.userCandidates",
          "type": "query",
          "returnType": "QueryUserCandidatesConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "UserCandidate",
            "edgeType": "QueryUserCandidatesConnectionEdge",
            "connectionType": "QueryUserCandidatesConnection"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/query.user-candidates.ts",
              "path": "src/modules/users/resolvers/query.user-candidates.ts"
            }
          }
        },
        {
          "name": "acceptRegistration",
          "id": "Mutation.acceptRegistration",
          "type": "mutation",
          "returnType": "MutationAcceptRegistrationResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAcceptRegistrationResult",
            "successDataType": "User",
            "successType": "MutationAcceptRegistrationSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.accept-registration.ts",
              "path": "src/modules/users/resolvers/mutation.accept-registration.ts"
            }
          }
        },
        {
          "name": "answerGodparentRequest",
          "id": "Mutation.answerGodparentRequest",
          "type": "mutation",
          "returnType": "MutationAnswerGodparentRequestResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAnswerGodparentRequestResult",
            "successDataType": "GodparentRequest",
            "successType": "MutationAnswerGodparentRequestSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.answer-godparent-request.ts",
              "path": "src/modules/users/resolvers/mutation.answer-godparent-request.ts"
            }
          }
        },
        {
          "name": "bookmark",
          "id": "Mutation.bookmark",
          "type": "mutation",
          "returnType": "Bookmark",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.bookmark.ts",
              "path": "src/modules/users/resolvers/mutation.bookmark.ts"
            }
          }
        },
        {
          "name": "completeSignup",
          "id": "Mutation.completeSignup",
          "type": "mutation",
          "returnType": "SignupCompletionResult",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.complete-signup.ts",
              "path": "src/modules/users/resolvers/mutation.complete-signup.ts"
            }
          }
        },
        {
          "name": "createBot",
          "id": "Mutation.createBot",
          "type": "mutation",
          "returnType": "User",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.create-bot.ts",
              "path": "src/modules/users/resolvers/mutation.create-bot.ts"
            }
          }
        },
        {
          "name": "createPasswordReset",
          "id": "Mutation.createPasswordReset",
          "type": "mutation",
          "returnType": "MutationCreatePasswordResetResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreatePasswordResetResult",
            "successDataType": "Boolean",
            "successType": "MutationCreatePasswordResetSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.create-password-reset.ts",
              "path": "src/modules/users/resolvers/mutation.create-password-reset.ts"
            }
          }
        },
        {
          "name": "createQuickSignup",
          "id": "Mutation.createQuickSignup",
          "type": "mutation",
          "returnType": "QuickSignup",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.create-quick-signup.ts",
              "path": "src/modules/users/resolvers/mutation.create-quick-signup.ts"
            }
          }
        },
        {
          "name": "deleteGodchild",
          "id": "Mutation.deleteGodchild",
          "type": "mutation",
          "returnType": "MutationDeleteGodchildResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteGodchildResult",
            "successDataType": "User",
            "successType": "MutationDeleteGodchildSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.delete-godchild.ts",
              "path": "src/modules/users/resolvers/mutation.delete-godchild.ts"
            }
          }
        },
        {
          "name": "deleteGodparent",
          "id": "Mutation.deleteGodparent",
          "type": "mutation",
          "returnType": "MutationDeleteGodparentResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteGodparentResult",
            "successDataType": "User",
            "successType": "MutationDeleteGodparentSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.delete-godparent.ts",
              "path": "src/modules/users/resolvers/mutation.delete-godparent.ts"
            }
          }
        },
        {
          "name": "deleteQuickSignup",
          "id": "Mutation.deleteQuickSignup",
          "type": "mutation",
          "returnType": "QuickSignup",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.delete-quick-signup.ts",
              "path": "src/modules/users/resolvers/mutation.delete-quick-signup.ts"
            }
          }
        },
        {
          "name": "deleteToken",
          "id": "Mutation.deleteToken",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.delete-token.ts",
              "path": "src/modules/users/resolvers/mutation.delete-token.ts"
            }
          }
        },
        {
          "name": "deleteUserPicture",
          "id": "Mutation.deleteUserPicture",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.delete-user-picture.ts",
              "path": "src/modules/users/resolvers/mutation.delete-user-picture.ts"
            }
          }
        },
        {
          "name": "login",
          "id": "Mutation.login",
          "type": "mutation",
          "returnType": "MutationLoginResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "AwaitingValidationError",
              "Error",
              "ZodError"
            ],
            "resultType": "MutationLoginResult",
            "successDataType": "Credential",
            "successType": "MutationLoginSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.login.ts",
              "path": "src/modules/users/resolvers/mutation.login.ts"
            }
          }
        },
        {
          "name": "logout",
          "id": "Mutation.logout",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.logout.ts",
              "path": "src/modules/users/resolvers/mutation.logout.ts"
            }
          }
        },
        {
          "name": "refuseRegistration",
          "id": "Mutation.refuseRegistration",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.refuse-registration.ts",
              "path": "src/modules/users/resolvers/mutation.refuse-registration.ts"
            }
          }
        },
        {
          "name": "registerGoogleCredential",
          "id": "Mutation.registerGoogleCredential",
          "type": "mutation",
          "returnType": "MutationRegisterGoogleCredentialResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRegisterGoogleCredentialResult",
            "successDataType": "Boolean",
            "successType": "MutationRegisterGoogleCredentialSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.register-google-credential.ts",
              "path": "src/modules/users/resolvers/mutation.register-google-credential.ts"
            }
          }
        },
        {
          "name": "renameSession",
          "id": "Mutation.renameSession",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.rename-session.ts",
              "path": "src/modules/users/resolvers/mutation.rename-session.ts"
            }
          }
        },
        {
          "name": "requestEmailChange",
          "id": "Mutation.requestEmailChange",
          "type": "mutation",
          "returnType": "MutationRequestEmailChangeResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRequestEmailChangeResult",
            "successDataType": "EmailChange",
            "successType": "MutationRequestEmailChangeSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.request-email-change.ts",
              "path": "src/modules/users/resolvers/mutation.request-email-change.ts"
            }
          }
        },
        {
          "name": "resetPassword",
          "id": "Mutation.resetPassword",
          "type": "mutation",
          "returnType": "MutationResetPasswordResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationResetPasswordResult",
            "successDataType": "Boolean",
            "successType": "MutationResetPasswordSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.reset-password.ts",
              "path": "src/modules/users/resolvers/mutation.reset-password.ts"
            }
          }
        },
        {
          "name": "saveLydiaPhoneNumber",
          "id": "Mutation.saveLydiaPhoneNumber",
          "type": "mutation",
          "returnType": "MutationSaveLydiaPhoneNumberResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSaveLydiaPhoneNumberResult",
            "successDataType": "User",
            "successType": "MutationSaveLydiaPhoneNumberSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.save-lydia-phone-number.ts",
              "path": "src/modules/users/resolvers/mutation.save-lydia-phone-number.ts"
            }
          }
        },
        {
          "name": "startSignup",
          "id": "Mutation.startSignup",
          "type": "mutation",
          "returnType": "MutationStartSignupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationStartSignupResult",
            "successDataType": "UserCandidate",
            "successType": "MutationStartSignupSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.start-signup.ts",
              "path": "src/modules/users/resolvers/mutation.start-signup.ts"
            }
          }
        },
        {
          "name": "syncUserLdap",
          "id": "Mutation.syncUserLdap",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.sync-user-ldap.ts",
              "path": "src/modules/users/resolvers/mutation.sync-user-ldap.ts"
            }
          }
        },
        {
          "name": "unbookmark",
          "id": "Mutation.unbookmark",
          "type": "mutation",
          "returnType": "Bookmark",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.unbookmark.ts",
              "path": "src/modules/users/resolvers/mutation.unbookmark.ts"
            }
          }
        },
        {
          "name": "updateNotificationSettings",
          "id": "Mutation.updateNotificationSettings",
          "type": "mutation",
          "returnType": "NotificationChannel",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-notification-settings.ts",
              "path": "src/modules/users/resolvers/mutation.update-notification-settings.ts"
            }
          }
        },
        {
          "name": "updateUser",
          "id": "Mutation.updateUser",
          "type": "mutation",
          "returnType": "MutationUpdateUserResult",
          "referencedBy": [],
          "deprecationReason": "Use `updateUserProfile`, `requestEmailChange` and other `updateUser*` mutations instead",
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-user.ts",
              "path": "src/modules/users/resolvers/mutation.update-user.ts"
            }
          }
        },
        {
          "name": "updateUserCandidate",
          "id": "Mutation.updateUserCandidate",
          "type": "mutation",
          "returnType": "MutationUpdateUserCandidateResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserCandidateResult",
            "successDataType": "Boolean",
            "successType": "MutationUpdateUserCandidateSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-user-candidate.ts",
              "path": "src/modules/users/resolvers/mutation.update-user-candidate.ts"
            }
          }
        },
        {
          "name": "updateUserCurriculum",
          "id": "Mutation.updateUserCurriculum",
          "type": "mutation",
          "returnType": "MutationUpdateUserCurriculumResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserCurriculumResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserCurriculumSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-user-curriculum.ts",
              "path": "src/modules/users/resolvers/mutation.update-user-curriculum.ts"
            }
          }
        },
        {
          "name": "updateUserPermissions",
          "id": "Mutation.updateUserPermissions",
          "type": "mutation",
          "returnType": "MutationUpdateUserPermissionsResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserPermissionsResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserPermissionsSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-user-permissions.ts",
              "path": "src/modules/users/resolvers/mutation.update-user-permissions.ts"
            }
          }
        },
        {
          "name": "updateUserPicture",
          "id": "Mutation.updateUserPicture",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-user-picture.ts",
              "path": "src/modules/users/resolvers/mutation.update-user-picture.ts"
            }
          }
        },
        {
          "name": "updateUserProfile",
          "id": "Mutation.updateUserProfile",
          "type": "mutation",
          "returnType": "MutationUpdateUserProfileResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserProfileResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserProfileSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.update-user-profile.ts",
              "path": "src/modules/users/resolvers/mutation.update-user-profile.ts"
            }
          }
        },
        {
          "name": "upsertGodparentRequest",
          "id": "Mutation.upsertGodparentRequest",
          "type": "mutation",
          "returnType": "MutationUpsertGodparentRequestResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertGodparentRequestResult",
            "successDataType": "GodparentRequest",
            "successType": "MutationUpsertGodparentRequestSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.upsert-godparent-request.ts",
              "path": "src/modules/users/resolvers/mutation.upsert-godparent-request.ts"
            }
          }
        },
        {
          "name": "usePasswordReset",
          "id": "Mutation.usePasswordReset",
          "type": "mutation",
          "returnType": "MutationUsePasswordResetResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUsePasswordResetResult",
            "successDataType": "Boolean",
            "successType": "MutationUsePasswordResetSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.use-password-reset.ts",
              "path": "src/modules/users/resolvers/mutation.use-password-reset.ts"
            }
          }
        },
        {
          "name": "validateEmail",
          "id": "Mutation.validateEmail",
          "type": "mutation",
          "returnType": "MutationValidateEmailResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationValidateEmailResult",
            "successDataType": "EmailChange",
            "successType": "MutationValidateEmailSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/users/resolvers/mutation.validate-email.ts",
              "path": "src/modules/users/resolvers/mutation.validate-email.ts"
            }
          }
        },
        {
          "name": "AwaitingValidationError",
          "id": "AwaitingValidationError",
          "type": "type",
          "referencedBy": [
            "MutationLoginResult"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/awaiting-validation-error.ts",
              "path": "src/modules/users/types/awaiting-validation-error.ts"
            }
          }
        },
        {
          "name": "Bookmark",
          "id": "Bookmark",
          "type": "type",
          "referencedBy": [
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/bookmark.ts",
              "path": "src/modules/users/types/bookmark.ts"
            }
          }
        },
        {
          "name": "Credential",
          "id": "Credential",
          "type": "type",
          "referencedBy": [
            "MutationCreateGroupAccessTokenSuccess",
            "MutationLoginSuccess",
            "SignupCompletionResult",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/credential.ts",
              "path": "src/modules/users/types/credential.ts"
            }
          }
        },
        {
          "name": "CredentialType",
          "id": "CredentialType",
          "type": "type",
          "referencedBy": [
            "Credential"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/credential-type.ts",
              "path": "src/modules/users/types/credential-type.ts"
            }
          }
        },
        {
          "name": "EmailChange",
          "id": "EmailChange",
          "type": "type",
          "referencedBy": [
            "MutationRequestEmailChangeSuccess",
            "MutationValidateEmailSuccess",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/email-change.ts",
              "path": "src/modules/users/types/email-change.ts"
            }
          }
        },
        {
          "name": "FamilyTree",
          "id": "FamilyTree",
          "type": "type",
          "referencedBy": [
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/family-tree.ts",
              "path": "src/modules/users/types/family-tree.ts"
            }
          }
        },
        {
          "name": "GodparentRequest",
          "id": "GodparentRequest",
          "type": "type",
          "referencedBy": [
            "MutationAnswerGodparentRequestSuccess",
            "MutationUpsertGodparentRequestSuccess",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/godparent-request.ts",
              "path": "src/modules/users/types/godparent-request.ts"
            }
          }
        },
        {
          "name": "MutationAcceptRegistrationResult",
          "id": "MutationAcceptRegistrationResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAcceptRegistrationResult",
            "successDataType": "User",
            "successType": "MutationAcceptRegistrationSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationAnswerGodparentRequestResult",
          "id": "MutationAnswerGodparentRequestResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAnswerGodparentRequestResult",
            "successDataType": "GodparentRequest",
            "successType": "MutationAnswerGodparentRequestSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/godparent-request.ts",
              "path": "src/modules/users/types/godparent-request.ts"
            }
          }
        },
        {
          "name": "MutationCreateGroupAccessTokenResult",
          "id": "MutationCreateGroupAccessTokenResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateGroupAccessTokenResult",
            "successDataType": "Credential",
            "successType": "MutationCreateGroupAccessTokenSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/credential.ts",
              "path": "src/modules/users/types/credential.ts"
            }
          }
        },
        {
          "name": "MutationDeleteGodchildResult",
          "id": "MutationDeleteGodchildResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteGodchildResult",
            "successDataType": "User",
            "successType": "MutationDeleteGodchildSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationDeleteGodparentResult",
          "id": "MutationDeleteGodparentResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteGodparentResult",
            "successDataType": "User",
            "successType": "MutationDeleteGodparentSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationLoginResult",
          "id": "MutationLoginResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "AwaitingValidationError",
              "Error",
              "ZodError"
            ],
            "resultType": "MutationLoginResult",
            "successDataType": "Credential",
            "successType": "MutationLoginSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/credential.ts",
              "path": "src/modules/users/types/credential.ts"
            }
          }
        },
        {
          "name": "MutationRequestEmailChangeResult",
          "id": "MutationRequestEmailChangeResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRequestEmailChangeResult",
            "successDataType": "EmailChange",
            "successType": "MutationRequestEmailChangeSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/email-change.ts",
              "path": "src/modules/users/types/email-change.ts"
            }
          }
        },
        {
          "name": "MutationSaveLydiaPhoneNumberResult",
          "id": "MutationSaveLydiaPhoneNumberResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSaveLydiaPhoneNumberResult",
            "successDataType": "User",
            "successType": "MutationSaveLydiaPhoneNumberSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationStartSignupResult",
          "id": "MutationStartSignupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationStartSignupResult",
            "successDataType": "UserCandidate",
            "successType": "MutationStartSignupSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user-candidate.ts",
              "path": "src/modules/users/types/user-candidate.ts"
            }
          }
        },
        {
          "name": "MutationUpdateUserCurriculumResult",
          "id": "MutationUpdateUserCurriculumResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserCurriculumResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserCurriculumSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationUpdateUserPermissionsResult",
          "id": "MutationUpdateUserPermissionsResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserPermissionsResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserPermissionsSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationUpdateUserProfileResult",
          "id": "MutationUpdateUserProfileResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserProfileResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserProfileSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationUpdateUserResult",
          "id": "MutationUpdateUserResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateUserResult",
            "successDataType": "User",
            "successType": "MutationUpdateUserSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "MutationUpsertGodparentRequestResult",
          "id": "MutationUpsertGodparentRequestResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertGodparentRequestResult",
            "successDataType": "GodparentRequest",
            "successType": "MutationUpsertGodparentRequestSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/godparent-request.ts",
              "path": "src/modules/users/types/godparent-request.ts"
            }
          }
        },
        {
          "name": "MutationValidateEmailResult",
          "id": "MutationValidateEmailResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationValidateEmailResult",
            "successDataType": "EmailChange",
            "successType": "MutationValidateEmailSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/email-change.ts",
              "path": "src/modules/users/types/email-change.ts"
            }
          }
        },
        {
          "name": "QueryAllUsersConnection",
          "id": "QueryAllUsersConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "User",
            "edgeType": "QueryAllUsersConnectionEdge",
            "connectionType": "QueryAllUsersConnection"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "QueryCodeContributorsResult",
          "id": "QueryCodeContributorsResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryCodeContributorsResult",
            "successDataType": "User",
            "successType": "QueryCodeContributorsSuccess"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "QueryQuickSignupsConnection",
          "id": "QueryQuickSignupsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "QuickSignup",
            "edgeType": "QueryQuickSignupsConnectionEdge",
            "connectionType": "QueryQuickSignupsConnection"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/quick-signup.ts",
              "path": "src/modules/users/types/quick-signup.ts"
            }
          }
        },
        {
          "name": "QueryUserCandidatesConnection",
          "id": "QueryUserCandidatesConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "UserCandidate",
            "edgeType": "QueryUserCandidatesConnectionEdge",
            "connectionType": "QueryUserCandidatesConnection"
          },
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user-candidate.ts",
              "path": "src/modules/users/types/user-candidate.ts"
            }
          }
        },
        {
          "name": "QuickSignup",
          "id": "QuickSignup",
          "type": "type",
          "referencedBy": [
            "QueryQuickSignupsConnection",
            "QueryQuickSignupsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/quick-signup.ts",
              "path": "src/modules/users/types/quick-signup.ts"
            }
          }
        },
        {
          "name": "SignupCompletionResult",
          "id": "SignupCompletionResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/signup-completion-result.ts",
              "path": "src/modules/users/types/signup-completion-result.ts"
            }
          }
        },
        {
          "name": "User",
          "id": "User",
          "type": "type",
          "referencedBy": [
            "Announcement",
            "Answer",
            "AnswerDate",
            "AnswerFileUpload",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerScale",
            "AnswerSelectMultiple",
            "AnswerSelectOne",
            "AnswerText",
            "AnswerTime",
            "AnswersOfUser",
            "Article",
            "Bookmark",
            "Comment",
            "Credential",
            "Document",
            "EmailChange",
            "Event",
            "EventManager",
            "FamilyTree",
            "Form",
            "GodparentRequest",
            "GroupMember",
            "HasLinks",
            "LogEntry",
            "Minor",
            "MutationAcceptRegistrationSuccess",
            "MutationDeleteGodchildSuccess",
            "MutationDeleteGodparentSuccess",
            "MutationSaveLydiaPhoneNumberSuccess",
            "MutationUpdateUserCurriculumSuccess",
            "MutationUpdateUserPermissionsSuccess",
            "MutationUpdateUserProfileSuccess",
            "MutationUpdateUserSuccess",
            "NotificationSubscription",
            "Page",
            "Profile",
            "QueryAllUsersConnection",
            "QueryAllUsersConnectionEdge",
            "QueryCodeContributorsSuccess",
            "Reaction",
            "Registration",
            "ShopPayment",
            "User",
            "UserSearchResult"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user.ts",
              "path": "src/modules/users/types/user.ts"
            }
          }
        },
        {
          "name": "UserCandidate",
          "id": "UserCandidate",
          "type": "type",
          "referencedBy": [
            "MutationStartSignupSuccess",
            "QueryUserCandidatesConnection",
            "QueryUserCandidatesConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user-candidate.ts",
              "path": "src/modules/users/types/user-candidate.ts"
            }
          }
        },
        {
          "name": "UserProfileInput",
          "id": "UserProfileInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user-profile-input.ts",
              "path": "src/modules/users/types/user-profile-input.ts"
            }
          }
        },
        {
          "name": "UserSearchResult",
          "id": "UserSearchResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "users",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/users/types/user-search-result.ts",
              "path": "src/modules/users/types/user-search-result.ts"
            }
          }
        }
      ]
    },
    {
      "name": "groups",
      "metadata": {
        "color": "orange"
      },
      "displayName": "Groupes",
      "rawDocs": "---\ncolor: orange\n---\n\n# Groupes\n\nGroupes de personnnes: peut être un club, une association, un bureau d'[AE](../student-associations), un groupe d'intégration ou un simple groupe (parfois dit \"groupe informel\").\n",
      "shortDescription": "Groupes de personnnes: peut être un club, une association, un bureau d'AE, un groupe d'intégration...",
      "renderedDocs": "<html><head></head><body>\n<p>Groupes de personnnes: peut être un club, une association, un bureau d'<a href=\"../student-associations\">AE</a>, un groupe d'intégration ou un simple groupe (parfois dit \"groupe informel\").</p></body></html>",
      "types": [
        "Group",
        "GroupJoinPolicy",
        "GroupMember",
        "GroupProfileInput",
        "GroupSearchResult",
        "GroupType",
        "MutationAddGroupMemberResult",
        "MutationCreateGroupResult",
        "MutationSelfJoinGroupResult",
        "MutationSetGroupJoinPolicyResult",
        "MutationSetGroupStudentAssociationResult",
        "MutationSetGroupTypeResult",
        "MutationSetParentGroupResult",
        "MutationUpdateGroupProfileResult",
        "MutationUpsertGroupResult",
        "StudentAssociationGroupsConnection",
        "UpsertGroupInput"
      ],
      "queries": [
        "group",
        "groupMembersCsv",
        "groups",
        "searchGroups"
      ],
      "mutations": [
        "addGroupMember",
        "createGroup",
        "createGroupAccessToken",
        "deleteGroup",
        "deleteGroupMember",
        "deleteGroupPicture",
        "selfJoinGroup",
        "setGoupRoomOpenState",
        "setGroupJoinPolicy",
        "setGroupStudentAssociation",
        "setGroupType",
        "setParentGroup",
        "updateGroupPicture",
        "updateGroupProfile",
        "upsertGroup",
        "upsertGroupMember"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "group",
          "id": "Query.group",
          "type": "query",
          "returnType": "Group",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/query.group.ts",
              "path": "src/modules/groups/resolvers/query.group.ts"
            }
          }
        },
        {
          "name": "groupMembersCsv",
          "id": "Query.groupMembersCsv",
          "type": "query",
          "returnType": "QueryGroupMembersCsvResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryGroupMembersCsvResult",
            "successDataType": "String",
            "successType": "QueryGroupMembersCsvSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/query.group-members-csv.ts",
              "path": "src/modules/groups/resolvers/query.group-members-csv.ts"
            }
          }
        },
        {
          "name": "groups",
          "id": "Query.groups",
          "type": "query",
          "returnType": "Group",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/query.groups.ts",
              "path": "src/modules/groups/resolvers/query.groups.ts"
            }
          }
        },
        {
          "name": "searchGroups",
          "id": "Query.searchGroups",
          "type": "query",
          "returnType": "GroupSearchResult",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/query.search-groups.ts",
              "path": "src/modules/groups/resolvers/query.search-groups.ts"
            }
          }
        },
        {
          "name": "addGroupMember",
          "id": "Mutation.addGroupMember",
          "type": "mutation",
          "returnType": "MutationAddGroupMemberResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAddGroupMemberResult",
            "successDataType": "GroupMember",
            "successType": "MutationAddGroupMemberSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.add-group-member.ts",
              "path": "src/modules/groups/resolvers/mutation.add-group-member.ts"
            }
          }
        },
        {
          "name": "createGroup",
          "id": "Mutation.createGroup",
          "type": "mutation",
          "returnType": "MutationCreateGroupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateGroupResult",
            "successDataType": "Group",
            "successType": "MutationCreateGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.create-group.ts",
              "path": "src/modules/groups/resolvers/mutation.create-group.ts"
            }
          }
        },
        {
          "name": "createGroupAccessToken",
          "id": "Mutation.createGroupAccessToken",
          "type": "mutation",
          "returnType": "MutationCreateGroupAccessTokenResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateGroupAccessTokenResult",
            "successDataType": "Credential",
            "successType": "MutationCreateGroupAccessTokenSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.create-group-access-token.ts",
              "path": "src/modules/groups/resolvers/mutation.create-group-access-token.ts"
            }
          }
        },
        {
          "name": "deleteGroup",
          "id": "Mutation.deleteGroup",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.delete-group.ts",
              "path": "src/modules/groups/resolvers/mutation.delete-group.ts"
            }
          }
        },
        {
          "name": "deleteGroupMember",
          "id": "Mutation.deleteGroupMember",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.delete-group-member.ts",
              "path": "src/modules/groups/resolvers/mutation.delete-group-member.ts"
            }
          }
        },
        {
          "name": "deleteGroupPicture",
          "id": "Mutation.deleteGroupPicture",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": "Use setPicture instead",
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.delete-group-picture.ts",
              "path": "src/modules/groups/resolvers/mutation.delete-group-picture.ts"
            }
          }
        },
        {
          "name": "selfJoinGroup",
          "id": "Mutation.selfJoinGroup",
          "type": "mutation",
          "returnType": "MutationSelfJoinGroupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSelfJoinGroupResult",
            "successDataType": "GroupMember",
            "successType": "MutationSelfJoinGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.self-join-group.ts",
              "path": "src/modules/groups/resolvers/mutation.self-join-group.ts"
            }
          }
        },
        {
          "name": "setGoupRoomOpenState",
          "id": "Mutation.setGoupRoomOpenState",
          "type": "mutation",
          "returnType": "Group",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.set-goup-room-open-state.ts",
              "path": "src/modules/groups/resolvers/mutation.set-goup-room-open-state.ts"
            }
          }
        },
        {
          "name": "setGroupJoinPolicy",
          "id": "Mutation.setGroupJoinPolicy",
          "type": "mutation",
          "returnType": "MutationSetGroupJoinPolicyResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetGroupJoinPolicyResult",
            "successDataType": "Group",
            "successType": "MutationSetGroupJoinPolicySuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.set-group-join-policy.ts",
              "path": "src/modules/groups/resolvers/mutation.set-group-join-policy.ts"
            }
          }
        },
        {
          "name": "setGroupStudentAssociation",
          "id": "Mutation.setGroupStudentAssociation",
          "type": "mutation",
          "returnType": "MutationSetGroupStudentAssociationResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetGroupStudentAssociationResult",
            "successDataType": "Group",
            "successType": "MutationSetGroupStudentAssociationSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.set-group-student-association.ts",
              "path": "src/modules/groups/resolvers/mutation.set-group-student-association.ts"
            }
          }
        },
        {
          "name": "setGroupType",
          "id": "Mutation.setGroupType",
          "type": "mutation",
          "returnType": "MutationSetGroupTypeResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetGroupTypeResult",
            "successDataType": "Group",
            "successType": "MutationSetGroupTypeSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.set-group-type.ts",
              "path": "src/modules/groups/resolvers/mutation.set-group-type.ts"
            }
          }
        },
        {
          "name": "setParentGroup",
          "id": "Mutation.setParentGroup",
          "type": "mutation",
          "returnType": "MutationSetParentGroupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetParentGroupResult",
            "successDataType": "Group",
            "successType": "MutationSetParentGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.set-parent-group.ts",
              "path": "src/modules/groups/resolvers/mutation.set-parent-group.ts"
            }
          }
        },
        {
          "name": "updateGroupPicture",
          "id": "Mutation.updateGroupPicture",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": "Use setPicture instead",
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.update-group-picture.ts",
              "path": "src/modules/groups/resolvers/mutation.update-group-picture.ts"
            }
          }
        },
        {
          "name": "updateGroupProfile",
          "id": "Mutation.updateGroupProfile",
          "type": "mutation",
          "returnType": "MutationUpdateGroupProfileResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateGroupProfileResult",
            "successDataType": "Group",
            "successType": "MutationUpdateGroupProfileSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.update-group-profile.ts",
              "path": "src/modules/groups/resolvers/mutation.update-group-profile.ts"
            }
          }
        },
        {
          "name": "upsertGroup",
          "id": "Mutation.upsertGroup",
          "type": "mutation",
          "returnType": "MutationUpsertGroupResult",
          "referencedBy": [],
          "deprecationReason": "Mutation séparée en plusieurs mutations plus spécifiques. Voir la documentation du module groups",
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertGroupResult",
            "successDataType": "Group",
            "successType": "MutationUpsertGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.upsert-group.ts",
              "path": "src/modules/groups/resolvers/mutation.upsert-group.ts"
            }
          }
        },
        {
          "name": "upsertGroupMember",
          "id": "Mutation.upsertGroupMember",
          "type": "mutation",
          "returnType": "GroupMember",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/groups/resolvers/mutation.upsert-group-member.ts",
              "path": "src/modules/groups/resolvers/mutation.upsert-group-member.ts"
            }
          }
        },
        {
          "name": "Group",
          "id": "Group",
          "type": "type",
          "referencedBy": [
            "Article",
            "BarWeek",
            "Event",
            "Form",
            "FormSection",
            "Group",
            "GroupMember",
            "GroupSearchResult",
            "HasLinks",
            "LydiaAccount",
            "MutationCreateGroupSuccess",
            "MutationSetGroupJoinPolicySuccess",
            "MutationSetGroupStudentAssociationSuccess",
            "MutationSetGroupTypeSuccess",
            "MutationSetParentGroupSuccess",
            "MutationUpdateGroupProfileSuccess",
            "MutationUpsertGroupSuccess",
            "Notification",
            "Page",
            "Profile",
            "QuestionSelectOne",
            "Service",
            "ServiceOwner",
            "ShopItem",
            "StudentAssociationGroupsConnection",
            "StudentAssociationGroupsConnectionEdge",
            "Theme",
            "Ticket",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "GroupJoinPolicy",
          "id": "GroupJoinPolicy",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "GroupMember",
          "id": "GroupMember",
          "type": "type",
          "referencedBy": [
            "Group",
            "MutationAddGroupMemberSuccess",
            "MutationSelfJoinGroupSuccess",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group-member.ts",
              "path": "src/modules/groups/types/group-member.ts"
            }
          }
        },
        {
          "name": "GroupProfileInput",
          "id": "GroupProfileInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group-profile-input.ts",
              "path": "src/modules/groups/types/group-profile-input.ts"
            }
          }
        },
        {
          "name": "GroupSearchResult",
          "id": "GroupSearchResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group-search-result.ts",
              "path": "src/modules/groups/types/group-search-result.ts"
            }
          }
        },
        {
          "name": "GroupType",
          "id": "GroupType",
          "type": "type",
          "referencedBy": [
            "Group",
            "UpsertGroupInput"
          ],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group-type.ts",
              "path": "src/modules/groups/types/group-type.ts"
            }
          }
        },
        {
          "name": "MutationAddGroupMemberResult",
          "id": "MutationAddGroupMemberResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAddGroupMemberResult",
            "successDataType": "GroupMember",
            "successType": "MutationAddGroupMemberSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group-member.ts",
              "path": "src/modules/groups/types/group-member.ts"
            }
          }
        },
        {
          "name": "MutationCreateGroupResult",
          "id": "MutationCreateGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateGroupResult",
            "successDataType": "Group",
            "successType": "MutationCreateGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "MutationSelfJoinGroupResult",
          "id": "MutationSelfJoinGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSelfJoinGroupResult",
            "successDataType": "GroupMember",
            "successType": "MutationSelfJoinGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group-member.ts",
              "path": "src/modules/groups/types/group-member.ts"
            }
          }
        },
        {
          "name": "MutationSetGroupJoinPolicyResult",
          "id": "MutationSetGroupJoinPolicyResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetGroupJoinPolicyResult",
            "successDataType": "Group",
            "successType": "MutationSetGroupJoinPolicySuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "MutationSetGroupStudentAssociationResult",
          "id": "MutationSetGroupStudentAssociationResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetGroupStudentAssociationResult",
            "successDataType": "Group",
            "successType": "MutationSetGroupStudentAssociationSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "MutationSetGroupTypeResult",
          "id": "MutationSetGroupTypeResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetGroupTypeResult",
            "successDataType": "Group",
            "successType": "MutationSetGroupTypeSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "MutationSetParentGroupResult",
          "id": "MutationSetParentGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetParentGroupResult",
            "successDataType": "Group",
            "successType": "MutationSetParentGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "MutationUpdateGroupProfileResult",
          "id": "MutationUpdateGroupProfileResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateGroupProfileResult",
            "successDataType": "Group",
            "successType": "MutationUpdateGroupProfileSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "MutationUpsertGroupResult",
          "id": "MutationUpsertGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertGroupResult",
            "successDataType": "Group",
            "successType": "MutationUpsertGroupSuccess"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "StudentAssociationGroupsConnection",
          "id": "StudentAssociationGroupsConnection",
          "type": "type",
          "referencedBy": [
            "StudentAssociation"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Group",
            "edgeType": "StudentAssociationGroupsConnectionEdge",
            "connectionType": "StudentAssociationGroupsConnection"
          },
          "moduleName": "groups",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/groups/types/group.ts",
              "path": "src/modules/groups/types/group.ts"
            }
          }
        },
        {
          "name": "UpsertGroupInput",
          "id": "UpsertGroupInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "groups",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        }
      ]
    },
    {
      "name": "posts",
      "metadata": {
        "color": "green"
      },
      "displayName": "Posts",
      "rawDocs": "---\ncolor: green\n---\n\n# Posts\n\nLes différents posts publiés par les différents [groupes](../groups)\n\nAppelés _Articles_ dans le code pour des soucis de rétrocompatibilité.\nSera renommé en _Post_ partout dans le futur.\n",
      "shortDescription": "Les différents posts publiés par les différents groupes",
      "renderedDocs": "<html><head></head><body>\n<p>Les différents posts publiés par les différents <a href=\"../groups\">groupes</a></p>\n<p>Appelés <em>Articles</em> dans le code pour des soucis de rétrocompatibilité.\nSera renommé en <em>Post</em> partout dans le futur.</p></body></html>",
      "types": [
        "Article",
        "ArticleSearchResultType",
        "MutationCreatePostResult",
        "MutationUpsertArticleResult",
        "QueryHomepageConnection",
        "UserArticlesConnection"
      ],
      "queries": [
        "article",
        "articleID",
        "homepage",
        "searchArticles"
      ],
      "mutations": [
        "createPost",
        "deleteArticle",
        "deleteArticlePicture",
        "updateArticlePicture",
        "upsertArticle"
      ],
      "subscriptions": [
        "article",
        "homepage"
      ],
      "items": [
        {
          "name": "article",
          "id": "Query.article",
          "type": "query",
          "returnType": "Article",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/query.article.ts",
              "path": "src/modules/posts/resolvers/query.article.ts"
            }
          }
        },
        {
          "name": "articleID",
          "id": "Query.articleID",
          "type": "query",
          "returnType": "LocalID",
          "referencedBy": [],
          "deprecationReason": "Utilisez `article` à la place",
          "moduleName": "posts",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "homepage",
          "id": "Query.homepage",
          "type": "query",
          "returnType": "QueryHomepageConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Article",
            "edgeType": "QueryHomepageConnectionEdge",
            "connectionType": "QueryHomepageConnection"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/query.homepage.ts",
              "path": "src/modules/posts/resolvers/query.homepage.ts"
            }
          }
        },
        {
          "name": "searchArticles",
          "id": "Query.searchArticles",
          "type": "query",
          "returnType": "ArticleSearchResultType",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/query.search-articles.ts",
              "path": "src/modules/posts/resolvers/query.search-articles.ts"
            }
          }
        },
        {
          "name": "createPost",
          "id": "Mutation.createPost",
          "type": "mutation",
          "returnType": "MutationCreatePostResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreatePostResult",
            "successDataType": "Article",
            "successType": "MutationCreatePostSuccess"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/mutation.create-post.ts",
              "path": "src/modules/posts/resolvers/mutation.create-post.ts"
            }
          }
        },
        {
          "name": "deleteArticle",
          "id": "Mutation.deleteArticle",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/mutation.delete-article.ts",
              "path": "src/modules/posts/resolvers/mutation.delete-article.ts"
            }
          }
        },
        {
          "name": "deleteArticlePicture",
          "id": "Mutation.deleteArticlePicture",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/mutation.delete-article-picture.ts",
              "path": "src/modules/posts/resolvers/mutation.delete-article-picture.ts"
            }
          }
        },
        {
          "name": "updateArticlePicture",
          "id": "Mutation.updateArticlePicture",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/mutation.update-article-picture.ts",
              "path": "src/modules/posts/resolvers/mutation.update-article-picture.ts"
            }
          }
        },
        {
          "name": "upsertArticle",
          "id": "Mutation.upsertArticle",
          "type": "mutation",
          "returnType": "MutationUpsertArticleResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertArticleResult",
            "successDataType": "Article",
            "successType": "MutationUpsertArticleSuccess"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/posts/resolvers/mutation.upsert-article.ts",
              "path": "src/modules/posts/resolvers/mutation.upsert-article.ts"
            }
          }
        },
        {
          "name": "Article",
          "id": "Article",
          "type": "type",
          "referencedBy": [
            "ArticleSearchResultType",
            "Event",
            "Group",
            "HasLinks",
            "MutationCreatePostSuccess",
            "MutationUpsertArticleSuccess",
            "QueryHomepageConnection",
            "QueryHomepageConnectionEdge",
            "UserArticlesConnection",
            "UserArticlesConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/posts/types/article.ts",
              "path": "src/modules/posts/types/article.ts"
            }
          }
        },
        {
          "name": "ArticleSearchResultType",
          "id": "ArticleSearchResultType",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/posts/types/article-search-result-type.ts",
              "path": "src/modules/posts/types/article-search-result-type.ts"
            }
          }
        },
        {
          "name": "MutationCreatePostResult",
          "id": "MutationCreatePostResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreatePostResult",
            "successDataType": "Article",
            "successType": "MutationCreatePostSuccess"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/posts/types/article.ts",
              "path": "src/modules/posts/types/article.ts"
            }
          }
        },
        {
          "name": "MutationUpsertArticleResult",
          "id": "MutationUpsertArticleResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertArticleResult",
            "successDataType": "Article",
            "successType": "MutationUpsertArticleSuccess"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/posts/types/article.ts",
              "path": "src/modules/posts/types/article.ts"
            }
          }
        },
        {
          "name": "QueryHomepageConnection",
          "id": "QueryHomepageConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Article",
            "edgeType": "QueryHomepageConnectionEdge",
            "connectionType": "QueryHomepageConnection"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/posts/types/article.ts",
              "path": "src/modules/posts/types/article.ts"
            }
          }
        },
        {
          "name": "UserArticlesConnection",
          "id": "UserArticlesConnection",
          "type": "type",
          "referencedBy": [
            "User"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Article",
            "edgeType": "UserArticlesConnectionEdge",
            "connectionType": "UserArticlesConnection"
          },
          "moduleName": "posts",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/posts/types/article.ts",
              "path": "src/modules/posts/types/article.ts"
            }
          }
        }
      ]
    },
    {
      "name": "events",
      "metadata": {
        "color": "cyan"
      },
      "displayName": "Évènements",
      "rawDocs": "---\ncolor: cyan\n---\n\n# Évènements\n\nLes différents évènements organisés par des [groupes](../groups).\n\nUn évènement peut, ou non, avoir des billets (et donc un système de billetterie).\n\nVoir [Billetterie](../ticketing) pour tout ce qui est billest et réservations.\n\n## URLs additionnelles\n\n<article>\n##\n\nRenvoie un billet PDF d'une réservation ayant pour code `:code`.\n\n</article>\n",
      "shortDescription": "Les différents évènements organisés par des groupes",
      "renderedDocs": "<html><head></head><body>\n<p>Les différents évènements organisés par des <a href=\"../groups\">groupes</a>.</p>\n<p>Un évènement peut, ou non, avoir des billets (et donc un système de billetterie).</p>\n<p>Voir <a href=\"../ticketing\">Billetterie</a> pour tout ce qui est billest et réservations.</p>\n<h2>URLs additionnelles</h2>\n<p>Renvoie un billet PDF d'une réservation ayant pour code <code>:code</code>.</p></body></html>",
      "types": [
        "Capacity",
        "EvenSearchResult",
        "Event",
        "EventFrequency",
        "EventManager",
        "EventManagerPowerLevel",
        "EventsByDay",
        "GroupEventsConnection",
        "ManagerOfEventInput",
        "MutationBanFromEventResult",
        "MutationChangeEventOrganizerResult",
        "MutationCreateEventResult",
        "MutationDeleteEventResult",
        "MutationRemoveEventManagerResult",
        "MutationSetEventApplicableOffersResult",
        "MutationSetEventBeneficiaryResult",
        "MutationSetEventCoOrganizersResult",
        "MutationSetEventDatesResult",
        "MutationSetEventVisibilityResult",
        "MutationUnbanFromEventResult",
        "MutationUpdateEventRecurrenceResult",
        "MutationUpdateEventResult",
        "MutationUpsertEventManagerResult",
        "QueryEventsByDayConnection",
        "QueryEventsConnection",
        "TicketGroupInput"
      ],
      "queries": [
        "event",
        "eventManager",
        "events",
        "eventsByDay",
        "eventsInWeek",
        "kioskReload",
        "searchEvents"
      ],
      "mutations": [
        "banFromEvent",
        "changeEventOrganizer",
        "createEvent",
        "deleteEvent",
        "deleteEventManager",
        "deleteEventPicture",
        "kioskReload",
        "removeEventManager",
        "setEventApplicableOffers",
        "setEventBeneficiary",
        "setEventCoOrganizers",
        "setEventDates",
        "setEventVisibility",
        "unbanFromEvent",
        "updateEvent",
        "updateEventPicture",
        "updateEventRecurrence",
        "upsertEventManager",
        "upsertManagersOfEvent"
      ],
      "subscriptions": [
        "event",
        "kioskReload"
      ],
      "items": [
        {
          "name": "event",
          "id": "Query.event",
          "type": "query",
          "returnType": "Event",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/query.event.ts",
              "path": "src/modules/events/resolvers/query.event.ts"
            }
          }
        },
        {
          "name": "eventManager",
          "id": "Query.eventManager",
          "type": "query",
          "returnType": "EventManager",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/query.event-manager.ts",
              "path": "src/modules/events/resolvers/query.event-manager.ts"
            }
          }
        },
        {
          "name": "events",
          "id": "Query.events",
          "type": "query",
          "returnType": "QueryEventsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Event",
            "edgeType": "QueryEventsConnectionEdge",
            "connectionType": "QueryEventsConnection"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/query.events.ts",
              "path": "src/modules/events/resolvers/query.events.ts"
            }
          }
        },
        {
          "name": "eventsByDay",
          "id": "Query.eventsByDay",
          "type": "query",
          "returnType": "QueryEventsByDayConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "EventsByDay",
            "edgeType": "QueryEventsByDayConnectionEdge",
            "connectionType": "QueryEventsByDayConnection"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/query.events-by-day.ts",
              "path": "src/modules/events/resolvers/query.events-by-day.ts"
            }
          }
        },
        {
          "name": "eventsInWeek",
          "id": "Query.eventsInWeek",
          "type": "query",
          "returnType": "Event",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/query.events-in-week.ts",
              "path": "src/modules/events/resolvers/query.events-in-week.ts"
            }
          }
        },
        {
          "name": "searchEvents",
          "id": "Query.searchEvents",
          "type": "query",
          "returnType": "EvenSearchResult",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/query.search-events.ts",
              "path": "src/modules/events/resolvers/query.search-events.ts"
            }
          }
        },
        {
          "name": "banFromEvent",
          "id": "Mutation.banFromEvent",
          "type": "mutation",
          "returnType": "MutationBanFromEventResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationBanFromEventResult",
            "successDataType": "Event",
            "successType": "MutationBanFromEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.ban-from-event.ts",
              "path": "src/modules/events/resolvers/mutation.ban-from-event.ts"
            }
          }
        },
        {
          "name": "changeEventOrganizer",
          "id": "Mutation.changeEventOrganizer",
          "type": "mutation",
          "returnType": "MutationChangeEventOrganizerResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationChangeEventOrganizerResult",
            "successDataType": "Event",
            "successType": "MutationChangeEventOrganizerSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.change-event-organizer.ts",
              "path": "src/modules/events/resolvers/mutation.change-event-organizer.ts"
            }
          }
        },
        {
          "name": "createEvent",
          "id": "Mutation.createEvent",
          "type": "mutation",
          "returnType": "MutationCreateEventResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateEventResult",
            "successDataType": "Event",
            "successType": "MutationCreateEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.create-event.ts",
              "path": "src/modules/events/resolvers/mutation.create-event.ts"
            }
          }
        },
        {
          "name": "deleteEvent",
          "id": "Mutation.deleteEvent",
          "type": "mutation",
          "returnType": "MutationDeleteEventResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteEventResult",
            "successDataType": "Event",
            "successType": "MutationDeleteEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.delete-event.ts",
              "path": "src/modules/events/resolvers/mutation.delete-event.ts"
            }
          }
        },
        {
          "name": "deleteEventManager",
          "id": "Mutation.deleteEventManager",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": "Use 'removeEventManager' instead",
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.delete-event-manager.ts",
              "path": "src/modules/events/resolvers/mutation.delete-event-manager.ts"
            }
          }
        },
        {
          "name": "deleteEventPicture",
          "id": "Mutation.deleteEventPicture",
          "type": "mutation",
          "returnType": "Event",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.delete-event-picture.ts",
              "path": "src/modules/events/resolvers/mutation.delete-event-picture.ts"
            }
          }
        },
        {
          "name": "kioskReload",
          "id": "Mutation.kioskReload",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.kiosk-reload.ts",
              "path": "src/modules/events/resolvers/mutation.kiosk-reload.ts"
            }
          }
        },
        {
          "name": "removeEventManager",
          "id": "Mutation.removeEventManager",
          "type": "mutation",
          "returnType": "MutationRemoveEventManagerResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRemoveEventManagerResult",
            "successDataType": "EventManager",
            "successType": "MutationRemoveEventManagerSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.remove-event-manager.ts",
              "path": "src/modules/events/resolvers/mutation.remove-event-manager.ts"
            }
          }
        },
        {
          "name": "setEventApplicableOffers",
          "id": "Mutation.setEventApplicableOffers",
          "type": "mutation",
          "returnType": "MutationSetEventApplicableOffersResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventApplicableOffersResult",
            "successDataType": "Event",
            "successType": "MutationSetEventApplicableOffersSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.set-event-applicable-offers.ts",
              "path": "src/modules/events/resolvers/mutation.set-event-applicable-offers.ts"
            }
          }
        },
        {
          "name": "setEventBeneficiary",
          "id": "Mutation.setEventBeneficiary",
          "type": "mutation",
          "returnType": "MutationSetEventBeneficiaryResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventBeneficiaryResult",
            "successDataType": "Event",
            "successType": "MutationSetEventBeneficiarySuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.set-event-beneficiary.ts",
              "path": "src/modules/events/resolvers/mutation.set-event-beneficiary.ts"
            }
          }
        },
        {
          "name": "setEventCoOrganizers",
          "id": "Mutation.setEventCoOrganizers",
          "type": "mutation",
          "returnType": "MutationSetEventCoOrganizersResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventCoOrganizersResult",
            "successDataType": "Event",
            "successType": "MutationSetEventCoOrganizersSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.set-event-co-organizers.ts",
              "path": "src/modules/events/resolvers/mutation.set-event-co-organizers.ts"
            }
          }
        },
        {
          "name": "setEventDates",
          "id": "Mutation.setEventDates",
          "type": "mutation",
          "returnType": "MutationSetEventDatesResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventDatesResult",
            "successDataType": "Event",
            "successType": "MutationSetEventDatesSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.set-event-dates.ts",
              "path": "src/modules/events/resolvers/mutation.set-event-dates.ts"
            }
          }
        },
        {
          "name": "setEventVisibility",
          "id": "Mutation.setEventVisibility",
          "type": "mutation",
          "returnType": "MutationSetEventVisibilityResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventVisibilityResult",
            "successDataType": "Event",
            "successType": "MutationSetEventVisibilitySuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.set-event-visibility.ts",
              "path": "src/modules/events/resolvers/mutation.set-event-visibility.ts"
            }
          }
        },
        {
          "name": "unbanFromEvent",
          "id": "Mutation.unbanFromEvent",
          "type": "mutation",
          "returnType": "MutationUnbanFromEventResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUnbanFromEventResult",
            "successDataType": "Event",
            "successType": "MutationUnbanFromEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.unban-from-event.ts",
              "path": "src/modules/events/resolvers/mutation.unban-from-event.ts"
            }
          }
        },
        {
          "name": "updateEvent",
          "id": "Mutation.updateEvent",
          "type": "mutation",
          "returnType": "MutationUpdateEventResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateEventResult",
            "successDataType": "Event",
            "successType": "MutationUpdateEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.update-event.ts",
              "path": "src/modules/events/resolvers/mutation.update-event.ts"
            }
          }
        },
        {
          "name": "updateEventPicture",
          "id": "Mutation.updateEventPicture",
          "type": "mutation",
          "returnType": "Event",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.update-event-picture.ts",
              "path": "src/modules/events/resolvers/mutation.update-event-picture.ts"
            }
          }
        },
        {
          "name": "updateEventRecurrence",
          "id": "Mutation.updateEventRecurrence",
          "type": "mutation",
          "returnType": "MutationUpdateEventRecurrenceResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateEventRecurrenceResult",
            "successDataType": "Event",
            "successType": "MutationUpdateEventRecurrenceSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.update-event-recurrence.ts",
              "path": "src/modules/events/resolvers/mutation.update-event-recurrence.ts"
            }
          }
        },
        {
          "name": "upsertEventManager",
          "id": "Mutation.upsertEventManager",
          "type": "mutation",
          "returnType": "MutationUpsertEventManagerResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertEventManagerResult",
            "successDataType": "EventManager",
            "successType": "MutationUpsertEventManagerSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.upsert-event-manager.ts",
              "path": "src/modules/events/resolvers/mutation.upsert-event-manager.ts"
            }
          }
        },
        {
          "name": "upsertManagersOfEvent",
          "id": "Mutation.upsertManagersOfEvent",
          "type": "mutation",
          "returnType": "EventManager",
          "referencedBy": [],
          "deprecationReason": "Use 'upsertEventManager' and 'removeEventManager' instead",
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/mutation.upsert-managers-of-event.ts",
              "path": "src/modules/events/resolvers/mutation.upsert-managers-of-event.ts"
            }
          }
        },
        {
          "name": "kioskReload",
          "id": "Subscription.kioskReload",
          "type": "subscription",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/events/resolvers/subscription.kiosk-reload.ts",
              "path": "src/modules/events/resolvers/subscription.kiosk-reload.ts"
            }
          }
        },
        {
          "name": "Capacity",
          "id": "Capacity",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/capacity.ts",
              "path": "src/modules/events/types/capacity.ts"
            }
          }
        },
        {
          "name": "EvenSearchResult",
          "id": "EvenSearchResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/even-search-result.ts",
              "path": "src/modules/events/types/even-search-result.ts"
            }
          }
        },
        {
          "name": "Event",
          "id": "Event",
          "type": "type",
          "referencedBy": [
            "Article",
            "EvenSearchResult",
            "EventManager",
            "EventsByDay",
            "Form",
            "Group",
            "GroupEventsConnection",
            "GroupEventsConnectionEdge",
            "HasLinks",
            "LydiaAccount",
            "MutationBanFromEventSuccess",
            "MutationChangeEventOrganizerSuccess",
            "MutationCreateEventSuccess",
            "MutationDeleteEventSuccess",
            "MutationSetEventApplicableOffersSuccess",
            "MutationSetEventBeneficiarySuccess",
            "MutationSetEventCoOrganizersSuccess",
            "MutationSetEventDatesSuccess",
            "MutationSetEventVisibilitySuccess",
            "MutationUnbanFromEventSuccess",
            "MutationUpdateEventRecurrenceSuccess",
            "MutationUpdateEventSuccess",
            "QueryEventsConnection",
            "QueryEventsConnectionEdge",
            "Ticket",
            "TicketGroup"
          ],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "EventFrequency",
          "id": "EventFrequency",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event-frequency.ts",
              "path": "src/modules/events/types/event-frequency.ts"
            }
          }
        },
        {
          "name": "EventManager",
          "id": "EventManager",
          "type": "type",
          "referencedBy": [
            "Event",
            "MutationRemoveEventManagerSuccess",
            "MutationUpsertEventManagerSuccess",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event-manager.ts",
              "path": "src/modules/events/types/event-manager.ts"
            }
          }
        },
        {
          "name": "EventManagerPowerLevel",
          "id": "EventManagerPowerLevel",
          "type": "type",
          "referencedBy": [
            "EventManager"
          ],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event-manager-power-level.ts",
              "path": "src/modules/events/types/event-manager-power-level.ts"
            }
          }
        },
        {
          "name": "EventsByDay",
          "id": "EventsByDay",
          "type": "type",
          "referencedBy": [
            "QueryEventsByDayConnection",
            "QueryEventsByDayConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/events-by-day.ts",
              "path": "src/modules/events/types/events-by-day.ts"
            }
          }
        },
        {
          "name": "GroupEventsConnection",
          "id": "GroupEventsConnection",
          "type": "type",
          "referencedBy": [
            "Group"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Event",
            "edgeType": "GroupEventsConnectionEdge",
            "connectionType": "GroupEventsConnection"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "ManagerOfEventInput",
          "id": "ManagerOfEventInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/manager-of-event-input.ts",
              "path": "src/modules/events/types/manager-of-event-input.ts"
            }
          }
        },
        {
          "name": "MutationBanFromEventResult",
          "id": "MutationBanFromEventResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationBanFromEventResult",
            "successDataType": "Event",
            "successType": "MutationBanFromEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationChangeEventOrganizerResult",
          "id": "MutationChangeEventOrganizerResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationChangeEventOrganizerResult",
            "successDataType": "Event",
            "successType": "MutationChangeEventOrganizerSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationCreateEventResult",
          "id": "MutationCreateEventResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateEventResult",
            "successDataType": "Event",
            "successType": "MutationCreateEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationDeleteEventResult",
          "id": "MutationDeleteEventResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteEventResult",
            "successDataType": "Event",
            "successType": "MutationDeleteEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationRemoveEventManagerResult",
          "id": "MutationRemoveEventManagerResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRemoveEventManagerResult",
            "successDataType": "EventManager",
            "successType": "MutationRemoveEventManagerSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event-manager.ts",
              "path": "src/modules/events/types/event-manager.ts"
            }
          }
        },
        {
          "name": "MutationSetEventApplicableOffersResult",
          "id": "MutationSetEventApplicableOffersResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventApplicableOffersResult",
            "successDataType": "Event",
            "successType": "MutationSetEventApplicableOffersSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationSetEventBeneficiaryResult",
          "id": "MutationSetEventBeneficiaryResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventBeneficiaryResult",
            "successDataType": "Event",
            "successType": "MutationSetEventBeneficiarySuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationSetEventCoOrganizersResult",
          "id": "MutationSetEventCoOrganizersResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventCoOrganizersResult",
            "successDataType": "Event",
            "successType": "MutationSetEventCoOrganizersSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationSetEventDatesResult",
          "id": "MutationSetEventDatesResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventDatesResult",
            "successDataType": "Event",
            "successType": "MutationSetEventDatesSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationSetEventVisibilityResult",
          "id": "MutationSetEventVisibilityResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetEventVisibilityResult",
            "successDataType": "Event",
            "successType": "MutationSetEventVisibilitySuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationUnbanFromEventResult",
          "id": "MutationUnbanFromEventResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUnbanFromEventResult",
            "successDataType": "Event",
            "successType": "MutationUnbanFromEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationUpdateEventRecurrenceResult",
          "id": "MutationUpdateEventRecurrenceResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateEventRecurrenceResult",
            "successDataType": "Event",
            "successType": "MutationUpdateEventRecurrenceSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationUpdateEventResult",
          "id": "MutationUpdateEventResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateEventResult",
            "successDataType": "Event",
            "successType": "MutationUpdateEventSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "MutationUpsertEventManagerResult",
          "id": "MutationUpsertEventManagerResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertEventManagerResult",
            "successDataType": "EventManager",
            "successType": "MutationUpsertEventManagerSuccess"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event-manager.ts",
              "path": "src/modules/events/types/event-manager.ts"
            }
          }
        },
        {
          "name": "QueryEventsByDayConnection",
          "id": "QueryEventsByDayConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "EventsByDay",
            "edgeType": "QueryEventsByDayConnectionEdge",
            "connectionType": "QueryEventsByDayConnection"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/events-by-day.ts",
              "path": "src/modules/events/types/events-by-day.ts"
            }
          }
        },
        {
          "name": "QueryEventsConnection",
          "id": "QueryEventsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Event",
            "edgeType": "QueryEventsConnectionEdge",
            "connectionType": "QueryEventsConnection"
          },
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/event.ts",
              "path": "src/modules/events/types/event.ts"
            }
          }
        },
        {
          "name": "TicketGroupInput",
          "id": "TicketGroupInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "events",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/events/types/ticket-group-input.ts",
              "path": "src/modules/events/types/ticket-group-input.ts"
            }
          }
        }
      ]
    },
    {
      "name": "ticketing",
      "metadata": {
        "color": "pink"
      },
      "displayName": "Billetterie",
      "rawDocs": "---\ncolor: pink\n---\n\n# Billetterie\n\nBillets et réservations de places sur des [évènements](/events).\n",
      "shortDescription": "Billets et réservations de places sur des évènements",
      "renderedDocs": "<html><head></head><body>\n<p>Billets et réservations de places sur des <a href=\"/events\">évènements</a>.</p></body></html>",
      "types": [
        "BookingState",
        "BooleanConstraint",
        "CsvDialect",
        "EventBookingsConnection",
        "EventBookingsCsvResult",
        "EventBookingsCsvSuccess",
        "MutationBookEventResult",
        "MutationCancelBookingResult",
        "MutationCreateTicketResult",
        "MutationDeleteTicketGroupResult",
        "MutationDeleteTicketResult",
        "MutationMarkBookingAsPaidResult",
        "MutationPayBookingResult",
        "MutationSetTicketGroupResult",
        "MutationUpdateTicketConstraintsResult",
        "MutationUpdateTicketResult",
        "MutationUpsertRegistrationResult",
        "MutationUpsertTicketGroupResult",
        "MutationVerifyBookingResult",
        "QueryRegistrationResult",
        "Registration",
        "RegistrationSearchResult",
        "RegistrationVerificationResult",
        "RegistrationVerificationState",
        "RegistrationsCounts",
        "SubscriptionRegistrationResult",
        "Ticket",
        "TicketConstraintsInput",
        "TicketCountingPolicy",
        "TicketGroup",
        "UserBookingsConnection"
      ],
      "queries": [
        "booking",
        "registration",
        "ticket",
        "ticketGroup"
      ],
      "mutations": [
        "bookEvent",
        "cancelBooking",
        "checkIfBookingIsPaid",
        "createAppleWalletPass",
        "createGoogleWalletPass",
        "createTicket",
        "deleteTicket",
        "deleteTicketGroup",
        "markBookingAsPaid",
        "opposeRegistration",
        "payBooking",
        "setTicketGroup",
        "updateTicket",
        "updateTicketConstraints",
        "upsertRegistration",
        "upsertTicketGroup",
        "verifyBooking"
      ],
      "subscriptions": [
        "booking",
        "registration"
      ],
      "items": [
        {
          "name": "booking",
          "id": "Query.booking",
          "type": "query",
          "returnType": "Registration",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/query.booking.ts",
              "path": "src/modules/ticketing/resolvers/query.booking.ts"
            }
          }
        },
        {
          "name": "registration",
          "id": "Query.registration",
          "type": "query",
          "returnType": "QueryRegistrationResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryRegistrationResult",
            "successDataType": "Registration",
            "successType": "QueryRegistrationSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/query.registration.ts",
              "path": "src/modules/ticketing/resolvers/query.registration.ts"
            }
          }
        },
        {
          "name": "ticket",
          "id": "Query.ticket",
          "type": "query",
          "returnType": "Ticket",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/query.ticket.ts",
              "path": "src/modules/ticketing/resolvers/query.ticket.ts"
            }
          }
        },
        {
          "name": "ticketGroup",
          "id": "Query.ticketGroup",
          "type": "query",
          "returnType": "TicketGroup",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/query.ticket-group.ts",
              "path": "src/modules/ticketing/resolvers/query.ticket-group.ts"
            }
          }
        },
        {
          "name": "bookEvent",
          "id": "Mutation.bookEvent",
          "type": "mutation",
          "returnType": "MutationBookEventResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationBookEventResult",
            "successDataType": "Registration",
            "successType": "MutationBookEventSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.book-event.ts",
              "path": "src/modules/ticketing/resolvers/mutation.book-event.ts"
            }
          }
        },
        {
          "name": "cancelBooking",
          "id": "Mutation.cancelBooking",
          "type": "mutation",
          "returnType": "MutationCancelBookingResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCancelBookingResult",
            "successDataType": "Registration",
            "successType": "MutationCancelBookingSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.cancel-booking.ts",
              "path": "src/modules/ticketing/resolvers/mutation.cancel-booking.ts"
            }
          }
        },
        {
          "name": "checkIfBookingIsPaid",
          "id": "Mutation.checkIfBookingIsPaid",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.check-if-booking-is-paid.ts",
              "path": "src/modules/ticketing/resolvers/mutation.check-if-booking-is-paid.ts"
            }
          }
        },
        {
          "name": "createAppleWalletPass",
          "id": "Mutation.createAppleWalletPass",
          "type": "mutation",
          "returnType": "MutationCreateAppleWalletPassResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateAppleWalletPassResult",
            "successDataType": "String",
            "successType": "MutationCreateAppleWalletPassSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.create-apple-wallet-pass.ts",
              "path": "src/modules/ticketing/resolvers/mutation.create-apple-wallet-pass.ts"
            }
          }
        },
        {
          "name": "createGoogleWalletPass",
          "id": "Mutation.createGoogleWalletPass",
          "type": "mutation",
          "returnType": "MutationCreateGoogleWalletPassResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateGoogleWalletPassResult",
            "successDataType": "String",
            "successType": "MutationCreateGoogleWalletPassSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.create-google-wallet-pass.ts",
              "path": "src/modules/ticketing/resolvers/mutation.create-google-wallet-pass.ts"
            }
          }
        },
        {
          "name": "createTicket",
          "id": "Mutation.createTicket",
          "type": "mutation",
          "returnType": "MutationCreateTicketResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateTicketResult",
            "successDataType": "Ticket",
            "successType": "MutationCreateTicketSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.create-ticket.ts",
              "path": "src/modules/ticketing/resolvers/mutation.create-ticket.ts"
            }
          }
        },
        {
          "name": "deleteTicket",
          "id": "Mutation.deleteTicket",
          "type": "mutation",
          "returnType": "MutationDeleteTicketResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteTicketResult",
            "successDataType": "Ticket",
            "successType": "MutationDeleteTicketSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.delete-ticket.ts",
              "path": "src/modules/ticketing/resolvers/mutation.delete-ticket.ts"
            }
          }
        },
        {
          "name": "deleteTicketGroup",
          "id": "Mutation.deleteTicketGroup",
          "type": "mutation",
          "returnType": "MutationDeleteTicketGroupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteTicketGroupResult",
            "successDataType": "TicketGroup",
            "successType": "MutationDeleteTicketGroupSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.delete-ticket-group.ts",
              "path": "src/modules/ticketing/resolvers/mutation.delete-ticket-group.ts"
            }
          }
        },
        {
          "name": "markBookingAsPaid",
          "id": "Mutation.markBookingAsPaid",
          "type": "mutation",
          "returnType": "MutationMarkBookingAsPaidResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationMarkBookingAsPaidResult",
            "successDataType": "Registration",
            "successType": "MutationMarkBookingAsPaidSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.mark-booking-as-paid.ts",
              "path": "src/modules/ticketing/resolvers/mutation.mark-booking-as-paid.ts"
            }
          }
        },
        {
          "name": "opposeRegistration",
          "id": "Mutation.opposeRegistration",
          "type": "mutation",
          "returnType": "MutationOpposeRegistrationResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationOpposeRegistrationResult",
            "successDataType": "Boolean",
            "successType": "MutationOpposeRegistrationSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.oppose-registration.ts",
              "path": "src/modules/ticketing/resolvers/mutation.oppose-registration.ts"
            }
          }
        },
        {
          "name": "payBooking",
          "id": "Mutation.payBooking",
          "type": "mutation",
          "returnType": "MutationPayBookingResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationPayBookingResult",
            "successDataType": "Registration",
            "successType": "MutationPayBookingSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.pay-booking.ts",
              "path": "src/modules/ticketing/resolvers/mutation.pay-booking.ts"
            }
          }
        },
        {
          "name": "setTicketGroup",
          "id": "Mutation.setTicketGroup",
          "type": "mutation",
          "returnType": "MutationSetTicketGroupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetTicketGroupResult",
            "successDataType": "Ticket",
            "successType": "MutationSetTicketGroupSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.set-ticket-group.ts",
              "path": "src/modules/ticketing/resolvers/mutation.set-ticket-group.ts"
            }
          }
        },
        {
          "name": "updateTicket",
          "id": "Mutation.updateTicket",
          "type": "mutation",
          "returnType": "MutationUpdateTicketResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateTicketResult",
            "successDataType": "Ticket",
            "successType": "MutationUpdateTicketSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.update-ticket.ts",
              "path": "src/modules/ticketing/resolvers/mutation.update-ticket.ts"
            }
          }
        },
        {
          "name": "updateTicketConstraints",
          "id": "Mutation.updateTicketConstraints",
          "type": "mutation",
          "returnType": "MutationUpdateTicketConstraintsResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateTicketConstraintsResult",
            "successDataType": "Ticket",
            "successType": "MutationUpdateTicketConstraintsSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.update-ticket-constraints.ts",
              "path": "src/modules/ticketing/resolvers/mutation.update-ticket-constraints.ts"
            }
          }
        },
        {
          "name": "upsertRegistration",
          "id": "Mutation.upsertRegistration",
          "type": "mutation",
          "returnType": "MutationUpsertRegistrationResult",
          "referencedBy": [],
          "deprecationReason": "Use bookEvent instead",
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertRegistrationResult",
            "successDataType": "Registration",
            "successType": "MutationUpsertRegistrationSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.upsert-registration.ts",
              "path": "src/modules/ticketing/resolvers/mutation.upsert-registration.ts"
            }
          }
        },
        {
          "name": "upsertTicketGroup",
          "id": "Mutation.upsertTicketGroup",
          "type": "mutation",
          "returnType": "MutationUpsertTicketGroupResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertTicketGroupResult",
            "successDataType": "TicketGroup",
            "successType": "MutationUpsertTicketGroupSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.upsert-ticket-group.ts",
              "path": "src/modules/ticketing/resolvers/mutation.upsert-ticket-group.ts"
            }
          }
        },
        {
          "name": "verifyBooking",
          "id": "Mutation.verifyBooking",
          "type": "mutation",
          "returnType": "MutationVerifyBookingResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationVerifyBookingResult",
            "successDataType": "RegistrationVerificationResult",
            "successType": "MutationVerifyBookingSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/ticketing/resolvers/mutation.verify-booking.ts",
              "path": "src/modules/ticketing/resolvers/mutation.verify-booking.ts"
            }
          }
        },
        {
          "name": "BookingState",
          "id": "BookingState",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "BooleanConstraint",
          "id": "BooleanConstraint",
          "type": "type",
          "referencedBy": [
            "TicketConstraintsInput"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/boolean-constraint.ts",
              "path": "src/modules/ticketing/types/boolean-constraint.ts"
            }
          }
        },
        {
          "name": "CsvDialect",
          "id": "CsvDialect",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "EventBookingsConnection",
          "id": "EventBookingsConnection",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Registration",
            "edgeType": "EventBookingsConnectionEdge",
            "connectionType": "EventBookingsConnection"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "EventBookingsCsvResult",
          "id": "EventBookingsCsvResult",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "EventBookingsCsvResult",
            "successDataType": "String",
            "successType": "EventBookingsCsvSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "static": {
              "matcher": "EventBookingsCsv{Result,Success}"
            }
          }
        },
        {
          "name": "EventBookingsCsvSuccess",
          "id": "EventBookingsCsvSuccess",
          "type": "type",
          "referencedBy": [
            "EventBookingsCsvResult"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "static": {
              "matcher": "EventBookingsCsv{Result,Success}"
            }
          }
        },
        {
          "name": "MutationBookEventResult",
          "id": "MutationBookEventResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationBookEventResult",
            "successDataType": "Registration",
            "successType": "MutationBookEventSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "MutationCancelBookingResult",
          "id": "MutationCancelBookingResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCancelBookingResult",
            "successDataType": "Registration",
            "successType": "MutationCancelBookingSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "MutationCreateTicketResult",
          "id": "MutationCreateTicketResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCreateTicketResult",
            "successDataType": "Ticket",
            "successType": "MutationCreateTicketSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket.ts",
              "path": "src/modules/ticketing/types/ticket.ts"
            }
          }
        },
        {
          "name": "MutationDeleteTicketGroupResult",
          "id": "MutationDeleteTicketGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteTicketGroupResult",
            "successDataType": "TicketGroup",
            "successType": "MutationDeleteTicketGroupSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket-group.ts",
              "path": "src/modules/ticketing/types/ticket-group.ts"
            }
          }
        },
        {
          "name": "MutationDeleteTicketResult",
          "id": "MutationDeleteTicketResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteTicketResult",
            "successDataType": "Ticket",
            "successType": "MutationDeleteTicketSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket.ts",
              "path": "src/modules/ticketing/types/ticket.ts"
            }
          }
        },
        {
          "name": "MutationMarkBookingAsPaidResult",
          "id": "MutationMarkBookingAsPaidResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationMarkBookingAsPaidResult",
            "successDataType": "Registration",
            "successType": "MutationMarkBookingAsPaidSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "MutationPayBookingResult",
          "id": "MutationPayBookingResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationPayBookingResult",
            "successDataType": "Registration",
            "successType": "MutationPayBookingSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "MutationSetTicketGroupResult",
          "id": "MutationSetTicketGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetTicketGroupResult",
            "successDataType": "Ticket",
            "successType": "MutationSetTicketGroupSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket.ts",
              "path": "src/modules/ticketing/types/ticket.ts"
            }
          }
        },
        {
          "name": "MutationUpdateTicketConstraintsResult",
          "id": "MutationUpdateTicketConstraintsResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateTicketConstraintsResult",
            "successDataType": "Ticket",
            "successType": "MutationUpdateTicketConstraintsSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket.ts",
              "path": "src/modules/ticketing/types/ticket.ts"
            }
          }
        },
        {
          "name": "MutationUpdateTicketResult",
          "id": "MutationUpdateTicketResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateTicketResult",
            "successDataType": "Ticket",
            "successType": "MutationUpdateTicketSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket.ts",
              "path": "src/modules/ticketing/types/ticket.ts"
            }
          }
        },
        {
          "name": "MutationUpsertRegistrationResult",
          "id": "MutationUpsertRegistrationResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertRegistrationResult",
            "successDataType": "Registration",
            "successType": "MutationUpsertRegistrationSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "MutationUpsertTicketGroupResult",
          "id": "MutationUpsertTicketGroupResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertTicketGroupResult",
            "successDataType": "TicketGroup",
            "successType": "MutationUpsertTicketGroupSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket-group.ts",
              "path": "src/modules/ticketing/types/ticket-group.ts"
            }
          }
        },
        {
          "name": "MutationVerifyBookingResult",
          "id": "MutationVerifyBookingResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationVerifyBookingResult",
            "successDataType": "RegistrationVerificationResult",
            "successType": "MutationVerifyBookingSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration-verification-result.ts",
              "path": "src/modules/ticketing/types/registration-verification-result.ts"
            }
          }
        },
        {
          "name": "QueryRegistrationResult",
          "id": "QueryRegistrationResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryRegistrationResult",
            "successDataType": "Registration",
            "successType": "QueryRegistrationSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "Registration",
          "id": "Registration",
          "type": "type",
          "referencedBy": [
            "Answer",
            "AnswerDate",
            "AnswerFileUpload",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerScale",
            "AnswerSelectMultiple",
            "AnswerSelectOne",
            "AnswerText",
            "AnswerTime",
            "Event",
            "EventBookingsConnection",
            "EventBookingsConnectionEdge",
            "MutationBookEventSuccess",
            "MutationCancelBookingSuccess",
            "MutationMarkBookingAsPaidSuccess",
            "MutationPayBookingSuccess",
            "MutationUpsertRegistrationSuccess",
            "QueryRegistrationSuccess",
            "RegistrationSearchResult",
            "RegistrationVerificationResult",
            "SubscriptionRegistrationSuccess",
            "Ticket",
            "User",
            "UserBookingsConnection",
            "UserBookingsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "RegistrationSearchResult",
          "id": "RegistrationSearchResult",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration-search-result.ts",
              "path": "src/modules/ticketing/types/registration-search-result.ts"
            }
          }
        },
        {
          "name": "RegistrationVerificationResult",
          "id": "RegistrationVerificationResult",
          "type": "type",
          "referencedBy": [
            "MutationVerifyBookingSuccess"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration-verification-result.ts",
              "path": "src/modules/ticketing/types/registration-verification-result.ts"
            }
          }
        },
        {
          "name": "RegistrationVerificationState",
          "id": "RegistrationVerificationState",
          "type": "type",
          "referencedBy": [
            "RegistrationVerificationResult"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration-verification-state.ts",
              "path": "src/modules/ticketing/types/registration-verification-state.ts"
            }
          }
        },
        {
          "name": "RegistrationsCounts",
          "id": "RegistrationsCounts",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registrations-counts.ts",
              "path": "src/modules/ticketing/types/registrations-counts.ts"
            }
          }
        },
        {
          "name": "SubscriptionRegistrationResult",
          "id": "SubscriptionRegistrationResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "SubscriptionRegistrationResult",
            "successDataType": "Registration",
            "successType": "SubscriptionRegistrationSuccess"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        },
        {
          "name": "Ticket",
          "id": "Ticket",
          "type": "type",
          "referencedBy": [
            "Event",
            "HasLinks",
            "MutationCreateTicketSuccess",
            "MutationDeleteTicketSuccess",
            "MutationSetTicketGroupSuccess",
            "MutationUpdateTicketConstraintsSuccess",
            "MutationUpdateTicketSuccess",
            "Registration",
            "TicketGroup"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket.ts",
              "path": "src/modules/ticketing/types/ticket.ts"
            }
          }
        },
        {
          "name": "TicketConstraintsInput",
          "id": "TicketConstraintsInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket-constraints-input.ts",
              "path": "src/modules/ticketing/types/ticket-constraints-input.ts"
            }
          }
        },
        {
          "name": "TicketCountingPolicy",
          "id": "TicketCountingPolicy",
          "type": "type",
          "referencedBy": [
            "Ticket"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket-counting-policy.ts",
              "path": "src/modules/ticketing/types/ticket-counting-policy.ts"
            }
          }
        },
        {
          "name": "TicketGroup",
          "id": "TicketGroup",
          "type": "type",
          "referencedBy": [
            "Event",
            "MutationDeleteTicketGroupSuccess",
            "MutationUpsertTicketGroupSuccess",
            "Ticket"
          ],
          "deprecationReason": null,
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/ticket-group.ts",
              "path": "src/modules/ticketing/types/ticket-group.ts"
            }
          }
        },
        {
          "name": "UserBookingsConnection",
          "id": "UserBookingsConnection",
          "type": "type",
          "referencedBy": [
            "User"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Registration",
            "edgeType": "UserBookingsConnectionEdge",
            "connectionType": "UserBookingsConnection"
          },
          "moduleName": "ticketing",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/ticketing/types/registration.ts",
              "path": "src/modules/ticketing/types/registration.ts"
            }
          }
        }
      ]
    },
    {
      "name": "shop",
      "metadata": {
        "color": "red"
      },
      "displayName": "Boutique",
      "rawDocs": "---\ncolor: red\n---\n\n# Boutique\n\nSystème de boutique permettant aux groupes de mettre en vente des produits.\n",
      "shortDescription": "Système de boutique permettant aux groupes de mettre en vente des produits",
      "renderedDocs": "<html><head></head><body>\n<p>Système de boutique permettant aux groupes de mettre en vente des produits.</p></body></html>",
      "types": [
        "GroupShopItemsConnection",
        "MutationPaidShopPaymentResult",
        "MutationUpsertShopItemResult",
        "MutationUpsertShopPaymentResult",
        "Picture",
        "ShopItem",
        "ShopItemAnswer",
        "ShopItemOption",
        "ShopItemOptionInput",
        "ShopPayment"
      ],
      "queries": [
        "shopItem",
        "shopPayments"
      ],
      "mutations": [
        "deleteItemPicture",
        "deleteShopItem",
        "deleteShopOption",
        "paidShopPayment",
        "updateItemPicture",
        "upsertShopItem",
        "upsertShopOptions",
        "upsertShopPayment"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "shopItem",
          "id": "Query.shopItem",
          "type": "query",
          "returnType": "ShopItem",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/query.shop-item.ts",
              "path": "src/modules/shop/resolvers/query.shop-item.ts"
            }
          }
        },
        {
          "name": "shopPayments",
          "id": "Query.shopPayments",
          "type": "query",
          "returnType": "ShopPayment",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/query.shop-payments.ts",
              "path": "src/modules/shop/resolvers/query.shop-payments.ts"
            }
          }
        },
        {
          "name": "deleteItemPicture",
          "id": "Mutation.deleteItemPicture",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.delete-item-picture.ts",
              "path": "src/modules/shop/resolvers/mutation.delete-item-picture.ts"
            }
          }
        },
        {
          "name": "deleteShopItem",
          "id": "Mutation.deleteShopItem",
          "type": "mutation",
          "returnType": "MutationDeleteShopItemResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteShopItemResult",
            "successDataType": "Boolean",
            "successType": "MutationDeleteShopItemSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.delete-shop-item.ts",
              "path": "src/modules/shop/resolvers/mutation.delete-shop-item.ts"
            }
          }
        },
        {
          "name": "deleteShopOption",
          "id": "Mutation.deleteShopOption",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.delete-shop-option.ts",
              "path": "src/modules/shop/resolvers/mutation.delete-shop-option.ts"
            }
          }
        },
        {
          "name": "paidShopPayment",
          "id": "Mutation.paidShopPayment",
          "type": "mutation",
          "returnType": "MutationPaidShopPaymentResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationPaidShopPaymentResult",
            "successDataType": "ShopPayment",
            "successType": "MutationPaidShopPaymentSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.paid-shop-payment.ts",
              "path": "src/modules/shop/resolvers/mutation.paid-shop-payment.ts"
            }
          }
        },
        {
          "name": "updateItemPicture",
          "id": "Mutation.updateItemPicture",
          "type": "mutation",
          "returnType": "Picture",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.update-item-picture.ts",
              "path": "src/modules/shop/resolvers/mutation.update-item-picture.ts"
            }
          }
        },
        {
          "name": "upsertShopItem",
          "id": "Mutation.upsertShopItem",
          "type": "mutation",
          "returnType": "MutationUpsertShopItemResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertShopItemResult",
            "successDataType": "ShopItem",
            "successType": "MutationUpsertShopItemSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.upsert-shop-item.ts",
              "path": "src/modules/shop/resolvers/mutation.upsert-shop-item.ts"
            }
          }
        },
        {
          "name": "upsertShopOptions",
          "id": "Mutation.upsertShopOptions",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.upsert-shop-options.ts",
              "path": "src/modules/shop/resolvers/mutation.upsert-shop-options.ts"
            }
          }
        },
        {
          "name": "upsertShopPayment",
          "id": "Mutation.upsertShopPayment",
          "type": "mutation",
          "returnType": "MutationUpsertShopPaymentResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertShopPaymentResult",
            "successDataType": "ShopPayment",
            "successType": "MutationUpsertShopPaymentSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/shop/resolvers/mutation.upsert-shop-payment.ts",
              "path": "src/modules/shop/resolvers/mutation.upsert-shop-payment.ts"
            }
          }
        },
        {
          "name": "GroupShopItemsConnection",
          "id": "GroupShopItemsConnection",
          "type": "type",
          "referencedBy": [
            "Group"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "ShopItem",
            "edgeType": "GroupShopItemsConnectionEdge",
            "connectionType": "GroupShopItemsConnection"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-item.ts",
              "path": "src/modules/shop/types/shop-item.ts"
            }
          }
        },
        {
          "name": "MutationPaidShopPaymentResult",
          "id": "MutationPaidShopPaymentResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationPaidShopPaymentResult",
            "successDataType": "ShopPayment",
            "successType": "MutationPaidShopPaymentSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-payment.ts",
              "path": "src/modules/shop/types/shop-payment.ts"
            }
          }
        },
        {
          "name": "MutationUpsertShopItemResult",
          "id": "MutationUpsertShopItemResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertShopItemResult",
            "successDataType": "ShopItem",
            "successType": "MutationUpsertShopItemSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-item.ts",
              "path": "src/modules/shop/types/shop-item.ts"
            }
          }
        },
        {
          "name": "MutationUpsertShopPaymentResult",
          "id": "MutationUpsertShopPaymentResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertShopPaymentResult",
            "successDataType": "ShopPayment",
            "successType": "MutationUpsertShopPaymentSuccess"
          },
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-payment.ts",
              "path": "src/modules/shop/types/shop-payment.ts"
            }
          }
        },
        {
          "name": "Picture",
          "id": "Picture",
          "type": "type",
          "referencedBy": [
            "ShopItem"
          ],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/picture.ts",
              "path": "src/modules/shop/types/picture.ts"
            }
          }
        },
        {
          "name": "ShopItem",
          "id": "ShopItem",
          "type": "type",
          "referencedBy": [
            "Group",
            "GroupShopItemsConnection",
            "GroupShopItemsConnectionEdge",
            "MutationUpsertShopItemSuccess",
            "ShopItemOption",
            "ShopPayment"
          ],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-item.ts",
              "path": "src/modules/shop/types/shop-item.ts"
            }
          }
        },
        {
          "name": "ShopItemAnswer",
          "id": "ShopItemAnswer",
          "type": "type",
          "referencedBy": [
            "ShopPayment"
          ],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-item-answer.ts",
              "path": "src/modules/shop/types/shop-item-answer.ts"
            }
          }
        },
        {
          "name": "ShopItemOption",
          "id": "ShopItemOption",
          "type": "type",
          "referencedBy": [
            "ShopItem"
          ],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-item-option.ts",
              "path": "src/modules/shop/types/shop-item-option.ts"
            }
          }
        },
        {
          "name": "ShopItemOptionInput",
          "id": "ShopItemOptionInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-item-option-input.ts",
              "path": "src/modules/shop/types/shop-item-option-input.ts"
            }
          }
        },
        {
          "name": "ShopPayment",
          "id": "ShopPayment",
          "type": "type",
          "referencedBy": [
            "Group",
            "MutationPaidShopPaymentSuccess",
            "MutationUpsertShopPaymentSuccess",
            "ShopItem",
            "ShopItemAnswer"
          ],
          "deprecationReason": null,
          "moduleName": "shop",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/shop/types/shop-payment.ts",
              "path": "src/modules/shop/types/shop-payment.ts"
            }
          }
        }
      ]
    },
    {
      "name": "forms",
      "metadata": {
        "color": "magenta"
      },
      "displayName": "Formulaires",
      "rawDocs": "---\ncolor: magenta\n---\n\n# Formulaires\n\nChurros propose un système de formulaires, à l'instar de Google Forms. Sert principalement à poser des questions supplémentaires lors d'une réservation d'un évènement, où à effectuer des sondages.\n",
      "shortDescription": "Churros propose un système de formulaires, à l'instar de Google Forms",
      "renderedDocs": "<html><head></head><body>\n<p>Churros propose un système de formulaires, à l'instar de Google Forms. Sert principalement à poser des questions supplémentaires lors d'une réservation d'un évènement, où à effectuer des sondages.</p></body></html>",
      "types": [
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerInput",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSearchResult",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "AnswersExportFormats",
        "AnswersOfUser",
        "Form",
        "FormAnswersByUserConnection",
        "FormAnswersConnection",
        "FormQuestionsConnection",
        "FormSearchResult",
        "FormSection",
        "FormSectionAnswersConnection",
        "MutationAnswerFormSectionResult",
        "MutationUpsertFormInput",
        "MutationUpsertFormSectionInput",
        "MutationUpsertQuestionInput",
        "QueryAllFormsConnection",
        "QueryFormsConnection",
        "Question",
        "QuestionAnswersConnection",
        "QuestionFileUpload",
        "QuestionKind",
        "QuestionOptionInput",
        "QuestionScalar",
        "QuestionScale",
        "QuestionScaleInput",
        "QuestionSelectMultiple",
        "QuestionSelectOne",
        "UserAnsweredFormsConnection",
        "UserPartiallyAnsweredFormsConnection"
      ],
      "queries": [
        "allForms",
        "form",
        "forms",
        "searchForms"
      ],
      "mutations": [
        "answerFileQuestion",
        "answerFormSection",
        "createLinkedGoogleSheet",
        "mailFormAnswers",
        "setFormAnswersCheckbox",
        "upsertForm",
        "upsertFormSection",
        "upsertQuestion"
      ],
      "subscriptions": [
        "form"
      ],
      "items": [
        {
          "name": "allForms",
          "id": "Query.allForms",
          "type": "query",
          "returnType": "QueryAllFormsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Form",
            "edgeType": "QueryAllFormsConnectionEdge",
            "connectionType": "QueryAllFormsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/query.all-forms.ts",
              "path": "src/modules/forms/resolvers/query.all-forms.ts"
            }
          }
        },
        {
          "name": "form",
          "id": "Query.form",
          "type": "query",
          "returnType": "Form",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/query.form.ts",
              "path": "src/modules/forms/resolvers/query.form.ts"
            }
          }
        },
        {
          "name": "forms",
          "id": "Query.forms",
          "type": "query",
          "returnType": "QueryFormsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Form",
            "edgeType": "QueryFormsConnectionEdge",
            "connectionType": "QueryFormsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/query.forms.ts",
              "path": "src/modules/forms/resolvers/query.forms.ts"
            }
          }
        },
        {
          "name": "searchForms",
          "id": "Query.searchForms",
          "type": "query",
          "returnType": "FormSearchResult",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/query.search-forms.ts",
              "path": "src/modules/forms/resolvers/query.search-forms.ts"
            }
          }
        },
        {
          "name": "answerFileQuestion",
          "id": "Mutation.answerFileQuestion",
          "type": "mutation",
          "returnType": "AnswerFileUpload",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.answer-file-question.ts",
              "path": "src/modules/forms/resolvers/mutation.answer-file-question.ts"
            }
          }
        },
        {
          "name": "answerFormSection",
          "id": "Mutation.answerFormSection",
          "type": "mutation",
          "returnType": "MutationAnswerFormSectionResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAnswerFormSectionResult",
            "successDataType": "Answer",
            "successType": "MutationAnswerFormSectionSuccess"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.answer-form-section.ts",
              "path": "src/modules/forms/resolvers/mutation.answer-form-section.ts"
            }
          }
        },
        {
          "name": "createLinkedGoogleSheet",
          "id": "Mutation.createLinkedGoogleSheet",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.create-linked-google-sheet.ts",
              "path": "src/modules/forms/resolvers/mutation.create-linked-google-sheet.ts"
            }
          }
        },
        {
          "name": "mailFormAnswers",
          "id": "Mutation.mailFormAnswers",
          "type": "mutation",
          "returnType": "MutationMailFormAnswersResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationMailFormAnswersResult",
            "successDataType": "String",
            "successType": "MutationMailFormAnswersSuccess"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.mail-form-answers.ts",
              "path": "src/modules/forms/resolvers/mutation.mail-form-answers.ts"
            }
          }
        },
        {
          "name": "setFormAnswersCheckbox",
          "id": "Mutation.setFormAnswersCheckbox",
          "type": "mutation",
          "returnType": "Form",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.set-form-answers-checkbox.ts",
              "path": "src/modules/forms/resolvers/mutation.set-form-answers-checkbox.ts"
            }
          }
        },
        {
          "name": "upsertForm",
          "id": "Mutation.upsertForm",
          "type": "mutation",
          "returnType": "Form",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.upsert-form.ts",
              "path": "src/modules/forms/resolvers/mutation.upsert-form.ts"
            }
          }
        },
        {
          "name": "upsertFormSection",
          "id": "Mutation.upsertFormSection",
          "type": "mutation",
          "returnType": "FormSection",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.upsert-form-section.ts",
              "path": "src/modules/forms/resolvers/mutation.upsert-form-section.ts"
            }
          }
        },
        {
          "name": "upsertQuestion",
          "id": "Mutation.upsertQuestion",
          "type": "mutation",
          "returnType": "Question",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.upsert-question.ts",
              "path": "src/modules/forms/resolvers/mutation.upsert-question.ts"
            }
          }
        },
        {
          "name": "Answer",
          "id": "Answer",
          "type": "type",
          "referencedBy": [
            "AnswerSearchResult",
            "AnswerTime",
            "AnswersOfUser",
            "Form",
            "FormAnswersConnection",
            "FormAnswersConnectionEdge",
            "FormSectionAnswersConnection",
            "FormSectionAnswersConnectionEdge",
            "MutationAnswerFormSectionSuccess",
            "Question",
            "QuestionAnswersConnection",
            "QuestionAnswersConnectionEdge",
            "QuestionFileUpload",
            "QuestionScalar",
            "QuestionScale",
            "QuestionSelectMultiple",
            "QuestionSelectOne"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer.ts",
              "path": "src/modules/forms/types/answer.ts"
            }
          }
        },
        {
          "name": "AnswerDate",
          "id": "AnswerDate",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-date.ts",
              "path": "src/modules/forms/types/answer-date.ts"
            }
          }
        },
        {
          "name": "AnswerFileUpload",
          "id": "AnswerFileUpload",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-file-upload.ts",
              "path": "src/modules/forms/types/answer-file-upload.ts"
            }
          }
        },
        {
          "name": "AnswerInput",
          "id": "AnswerInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-input.ts",
              "path": "src/modules/forms/types/answer-input.ts"
            }
          }
        },
        {
          "name": "AnswerLongText",
          "id": "AnswerLongText",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-long-text.ts",
              "path": "src/modules/forms/types/answer-long-text.ts"
            }
          }
        },
        {
          "name": "AnswerNumber",
          "id": "AnswerNumber",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-number.ts",
              "path": "src/modules/forms/types/answer-number.ts"
            }
          }
        },
        {
          "name": "AnswerScale",
          "id": "AnswerScale",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-scale.ts",
              "path": "src/modules/forms/types/answer-scale.ts"
            }
          }
        },
        {
          "name": "AnswerSearchResult",
          "id": "AnswerSearchResult",
          "type": "type",
          "referencedBy": [
            "Form"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-search-result.ts",
              "path": "src/modules/forms/types/answer-search-result.ts"
            }
          }
        },
        {
          "name": "AnswerSelectMultiple",
          "id": "AnswerSelectMultiple",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-select-multiple.ts",
              "path": "src/modules/forms/types/answer-select-multiple.ts"
            }
          }
        },
        {
          "name": "AnswerSelectOne",
          "id": "AnswerSelectOne",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-select-one.ts",
              "path": "src/modules/forms/types/answer-select-one.ts"
            }
          }
        },
        {
          "name": "AnswerText",
          "id": "AnswerText",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-text.ts",
              "path": "src/modules/forms/types/answer-text.ts"
            }
          }
        },
        {
          "name": "AnswerTime",
          "id": "AnswerTime",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer-time.ts",
              "path": "src/modules/forms/types/answer-time.ts"
            }
          }
        },
        {
          "name": "AnswersExportFormats",
          "id": "AnswersExportFormats",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answers-export-formats.ts",
              "path": "src/modules/forms/types/answers-export-formats.ts"
            }
          }
        },
        {
          "name": "AnswersOfUser",
          "id": "AnswersOfUser",
          "type": "type",
          "referencedBy": [
            "FormAnswersByUserConnection",
            "FormAnswersByUserConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answers-of-user.ts",
              "path": "src/modules/forms/types/answers-of-user.ts"
            }
          }
        },
        {
          "name": "Form",
          "id": "Form",
          "type": "type",
          "referencedBy": [
            "Answer",
            "AnswerDate",
            "AnswerFileUpload",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerScale",
            "AnswerSelectMultiple",
            "AnswerSelectOne",
            "AnswerText",
            "AnswerTime",
            "Event",
            "FormSearchResult",
            "FormSection",
            "Group",
            "QueryAllFormsConnection",
            "QueryAllFormsConnectionEdge",
            "QueryFormsConnection",
            "QueryFormsConnectionEdge",
            "UserAnsweredFormsConnection",
            "UserAnsweredFormsConnectionEdge",
            "UserPartiallyAnsweredFormsConnection",
            "UserPartiallyAnsweredFormsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form.ts",
              "path": "src/modules/forms/types/form.ts"
            }
          }
        },
        {
          "name": "FormAnswersByUserConnection",
          "id": "FormAnswersByUserConnection",
          "type": "type",
          "referencedBy": [
            "Form"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "AnswersOfUser",
            "edgeType": "FormAnswersByUserConnectionEdge",
            "connectionType": "FormAnswersByUserConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answers-of-user.ts",
              "path": "src/modules/forms/types/answers-of-user.ts"
            }
          }
        },
        {
          "name": "FormAnswersConnection",
          "id": "FormAnswersConnection",
          "type": "type",
          "referencedBy": [
            "Form"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Answer",
            "edgeType": "FormAnswersConnectionEdge",
            "connectionType": "FormAnswersConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer.ts",
              "path": "src/modules/forms/types/answer.ts"
            }
          }
        },
        {
          "name": "FormQuestionsConnection",
          "id": "FormQuestionsConnection",
          "type": "type",
          "referencedBy": [
            "Form"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Question",
            "edgeType": "FormQuestionsConnectionEdge",
            "connectionType": "FormQuestionsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question.ts",
              "path": "src/modules/forms/types/question.ts"
            }
          }
        },
        {
          "name": "FormSearchResult",
          "id": "FormSearchResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form-search-result.ts",
              "path": "src/modules/forms/types/form-search-result.ts"
            }
          }
        },
        {
          "name": "FormSection",
          "id": "FormSection",
          "type": "type",
          "referencedBy": [
            "Answer",
            "AnswerDate",
            "AnswerFileUpload",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerScale",
            "AnswerSelectMultiple",
            "AnswerSelectOne",
            "AnswerText",
            "AnswerTime",
            "Form",
            "FormSection",
            "Question",
            "QuestionFileUpload",
            "QuestionScalar",
            "QuestionScale",
            "QuestionSelectMultiple",
            "QuestionSelectOne"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form-section.ts",
              "path": "src/modules/forms/types/form-section.ts"
            }
          }
        },
        {
          "name": "FormSectionAnswersConnection",
          "id": "FormSectionAnswersConnection",
          "type": "type",
          "referencedBy": [
            "FormSection"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Answer",
            "edgeType": "FormSectionAnswersConnectionEdge",
            "connectionType": "FormSectionAnswersConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer.ts",
              "path": "src/modules/forms/types/answer.ts"
            }
          }
        },
        {
          "name": "MutationAnswerFormSectionResult",
          "id": "MutationAnswerFormSectionResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAnswerFormSectionResult",
            "successDataType": "Answer",
            "successType": "MutationAnswerFormSectionSuccess"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer.ts",
              "path": "src/modules/forms/types/answer.ts"
            }
          }
        },
        {
          "name": "MutationUpsertFormInput",
          "id": "MutationUpsertFormInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "inputTypeOf": {
            "field": "upsertForm"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.upsert-form.ts",
              "path": "src/modules/forms/resolvers/mutation.upsert-form.ts"
            }
          }
        },
        {
          "name": "MutationUpsertFormSectionInput",
          "id": "MutationUpsertFormSectionInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "inputTypeOf": {
            "field": "upsertFormSection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.upsert-form-section.ts",
              "path": "src/modules/forms/resolvers/mutation.upsert-form-section.ts"
            }
          }
        },
        {
          "name": "MutationUpsertQuestionInput",
          "id": "MutationUpsertQuestionInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "inputTypeOf": {
            "field": "upsertQuestion"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/forms/resolvers/mutation.upsert-question.ts",
              "path": "src/modules/forms/resolvers/mutation.upsert-question.ts"
            }
          }
        },
        {
          "name": "QueryAllFormsConnection",
          "id": "QueryAllFormsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Form",
            "edgeType": "QueryAllFormsConnectionEdge",
            "connectionType": "QueryAllFormsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form.ts",
              "path": "src/modules/forms/types/form.ts"
            }
          }
        },
        {
          "name": "QueryFormsConnection",
          "id": "QueryFormsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Form",
            "edgeType": "QueryFormsConnectionEdge",
            "connectionType": "QueryFormsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form.ts",
              "path": "src/modules/forms/types/form.ts"
            }
          }
        },
        {
          "name": "Question",
          "id": "Question",
          "type": "type",
          "referencedBy": [
            "Answer",
            "FormQuestionsConnection",
            "FormQuestionsConnectionEdge",
            "FormSection"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question.ts",
              "path": "src/modules/forms/types/question.ts"
            }
          }
        },
        {
          "name": "QuestionAnswersConnection",
          "id": "QuestionAnswersConnection",
          "type": "type",
          "referencedBy": [
            "Question",
            "QuestionFileUpload",
            "QuestionScalar",
            "QuestionScale",
            "QuestionSelectMultiple",
            "QuestionSelectOne"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Answer",
            "edgeType": "QuestionAnswersConnectionEdge",
            "connectionType": "QuestionAnswersConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/answer.ts",
              "path": "src/modules/forms/types/answer.ts"
            }
          }
        },
        {
          "name": "QuestionFileUpload",
          "id": "QuestionFileUpload",
          "type": "type",
          "referencedBy": [
            "AnswerFileUpload"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-file-upload.ts",
              "path": "src/modules/forms/types/question-file-upload.ts"
            }
          }
        },
        {
          "name": "QuestionKind",
          "id": "QuestionKind",
          "type": "type",
          "referencedBy": [
            "MutationUpsertQuestionInput",
            "Question",
            "QuestionFileUpload",
            "QuestionScalar",
            "QuestionScale",
            "QuestionSelectMultiple",
            "QuestionSelectOne"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-kind.ts",
              "path": "src/modules/forms/types/question-kind.ts"
            }
          }
        },
        {
          "name": "QuestionOptionInput",
          "id": "QuestionOptionInput",
          "type": "type",
          "referencedBy": [
            "MutationUpsertQuestionInput"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-option-input.ts",
              "path": "src/modules/forms/types/question-option-input.ts"
            }
          }
        },
        {
          "name": "QuestionScalar",
          "id": "QuestionScalar",
          "type": "type",
          "referencedBy": [
            "AnswerDate",
            "AnswerLongText",
            "AnswerNumber",
            "AnswerText",
            "AnswerTime"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-scalar.ts",
              "path": "src/modules/forms/types/question-scalar.ts"
            }
          }
        },
        {
          "name": "QuestionScale",
          "id": "QuestionScale",
          "type": "type",
          "referencedBy": [
            "AnswerScale"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-scale.ts",
              "path": "src/modules/forms/types/question-scale.ts"
            }
          }
        },
        {
          "name": "QuestionScaleInput",
          "id": "QuestionScaleInput",
          "type": "type",
          "referencedBy": [
            "MutationUpsertQuestionInput"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-scale-input.ts",
              "path": "src/modules/forms/types/question-scale-input.ts"
            }
          }
        },
        {
          "name": "QuestionSelectMultiple",
          "id": "QuestionSelectMultiple",
          "type": "type",
          "referencedBy": [
            "AnswerSelectMultiple"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-select-multiple.ts",
              "path": "src/modules/forms/types/question-select-multiple.ts"
            }
          }
        },
        {
          "name": "QuestionSelectOne",
          "id": "QuestionSelectOne",
          "type": "type",
          "referencedBy": [
            "AnswerSelectOne"
          ],
          "deprecationReason": null,
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/question-select-one.ts",
              "path": "src/modules/forms/types/question-select-one.ts"
            }
          }
        },
        {
          "name": "UserAnsweredFormsConnection",
          "id": "UserAnsweredFormsConnection",
          "type": "type",
          "referencedBy": [
            "User"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Form",
            "edgeType": "UserAnsweredFormsConnectionEdge",
            "connectionType": "UserAnsweredFormsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form.ts",
              "path": "src/modules/forms/types/form.ts"
            }
          }
        },
        {
          "name": "UserPartiallyAnsweredFormsConnection",
          "id": "UserPartiallyAnsweredFormsConnection",
          "type": "type",
          "referencedBy": [
            "User"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Form",
            "edgeType": "UserPartiallyAnsweredFormsConnectionEdge",
            "connectionType": "UserPartiallyAnsweredFormsConnection"
          },
          "moduleName": "forms",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/forms/types/form.ts",
              "path": "src/modules/forms/types/form.ts"
            }
          }
        }
      ]
    },
    {
      "name": "documents",
      "metadata": {
        "color": "blue"
      },
      "displayName": "Documents (La Frappe)",
      "rawDocs": "---\ncolor: blue\n---\n\n# Documents (La Frappe)\n\nDocuments publiés dans des [matières](../curriculum).\n\nNommé \"La Frappe\" au sein des écoles de Toulouse INP.\n",
      "shortDescription": "Documents publiés dans des matières",
      "renderedDocs": "<html><head></head><body>\n<p>Documents publiés dans des <a href=\"../curriculum\">matières</a>.</p>\n<p>Nommé \"La Frappe\" au sein des écoles de Toulouse INP.</p></body></html>",
      "types": [
        "Document",
        "DocumentSearchResult",
        "DocumentType",
        "MutationUpsertDocumentResult",
        "QueryDocumentsConnection",
        "SubjectDocumentsConnection"
      ],
      "queries": [
        "document",
        "documents",
        "searchDocuments"
      ],
      "mutations": [
        "deleteDocument",
        "deleteDocumentFile",
        "mergeDocuments",
        "setDocumentFileIsSolution",
        "uploadDocumentFile",
        "upsertDocument"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "document",
          "id": "Query.document",
          "type": "query",
          "returnType": "Document",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/query.document.ts",
              "path": "src/modules/documents/resolvers/query.document.ts"
            }
          }
        },
        {
          "name": "documents",
          "id": "Query.documents",
          "type": "query",
          "returnType": "QueryDocumentsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Document",
            "edgeType": "QueryDocumentsConnectionEdge",
            "connectionType": "QueryDocumentsConnection"
          },
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/query.documents.ts",
              "path": "src/modules/documents/resolvers/query.documents.ts"
            }
          }
        },
        {
          "name": "searchDocuments",
          "id": "Query.searchDocuments",
          "type": "query",
          "returnType": "DocumentSearchResult",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/query.search-documents.ts",
              "path": "src/modules/documents/resolvers/query.search-documents.ts"
            }
          }
        },
        {
          "name": "deleteDocument",
          "id": "Mutation.deleteDocument",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/mutation.delete-document.ts",
              "path": "src/modules/documents/resolvers/mutation.delete-document.ts"
            }
          }
        },
        {
          "name": "deleteDocumentFile",
          "id": "Mutation.deleteDocumentFile",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/mutation.delete-document-file.ts",
              "path": "src/modules/documents/resolvers/mutation.delete-document-file.ts"
            }
          }
        },
        {
          "name": "mergeDocuments",
          "id": "Mutation.mergeDocuments",
          "type": "mutation",
          "returnType": "Document",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/mutation.merge-documents.ts",
              "path": "src/modules/documents/resolvers/mutation.merge-documents.ts"
            }
          }
        },
        {
          "name": "setDocumentFileIsSolution",
          "id": "Mutation.setDocumentFileIsSolution",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/mutation.set-document-file-is-solution.ts",
              "path": "src/modules/documents/resolvers/mutation.set-document-file-is-solution.ts"
            }
          }
        },
        {
          "name": "uploadDocumentFile",
          "id": "Mutation.uploadDocumentFile",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/mutation.upload-document-file.ts",
              "path": "src/modules/documents/resolvers/mutation.upload-document-file.ts"
            }
          }
        },
        {
          "name": "upsertDocument",
          "id": "Mutation.upsertDocument",
          "type": "mutation",
          "returnType": "MutationUpsertDocumentResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertDocumentResult",
            "successDataType": "Document",
            "successType": "MutationUpsertDocumentSuccess"
          },
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/documents/resolvers/mutation.upsert-document.ts",
              "path": "src/modules/documents/resolvers/mutation.upsert-document.ts"
            }
          }
        },
        {
          "name": "Document",
          "id": "Document",
          "type": "type",
          "referencedBy": [
            "Comment",
            "DocumentSearchResult",
            "MutationUpsertDocumentSuccess",
            "QueryDocumentsConnection",
            "QueryDocumentsConnectionEdge",
            "Reaction",
            "SubjectDocumentsConnection",
            "SubjectDocumentsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/documents/types/document.ts",
              "path": "src/modules/documents/types/document.ts"
            }
          }
        },
        {
          "name": "DocumentSearchResult",
          "id": "DocumentSearchResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/documents/types/document-search-result.ts",
              "path": "src/modules/documents/types/document-search-result.ts"
            }
          }
        },
        {
          "name": "DocumentType",
          "id": "DocumentType",
          "type": "type",
          "referencedBy": [
            "Document"
          ],
          "deprecationReason": null,
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/documents/types/document-type.ts",
              "path": "src/modules/documents/types/document-type.ts"
            }
          }
        },
        {
          "name": "MutationUpsertDocumentResult",
          "id": "MutationUpsertDocumentResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertDocumentResult",
            "successDataType": "Document",
            "successType": "MutationUpsertDocumentSuccess"
          },
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/documents/types/document.ts",
              "path": "src/modules/documents/types/document.ts"
            }
          }
        },
        {
          "name": "QueryDocumentsConnection",
          "id": "QueryDocumentsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Document",
            "edgeType": "QueryDocumentsConnectionEdge",
            "connectionType": "QueryDocumentsConnection"
          },
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/documents/types/document.ts",
              "path": "src/modules/documents/types/document.ts"
            }
          }
        },
        {
          "name": "SubjectDocumentsConnection",
          "id": "SubjectDocumentsConnection",
          "type": "type",
          "referencedBy": [
            "Subject"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Document",
            "edgeType": "SubjectDocumentsConnectionEdge",
            "connectionType": "SubjectDocumentsConnection"
          },
          "moduleName": "documents",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/documents/types/document.ts",
              "path": "src/modules/documents/types/document.ts"
            }
          }
        }
      ]
    },
    {
      "name": "themes",
      "metadata": {},
      "displayName": "Thèmes",
      "rawDocs": "# Thèmes\n\nModule permettant de gérer les thèmes de l'application, qui peuvent être créés par des groupes (pour par exemple avoir des thèmes évènementiels).\n",
      "shortDescription": "Module permettant de gérer les thèmes de l'application, qui peuvent être créés par des groupes...",
      "renderedDocs": "<html><head></head><body>\n<p>Module permettant de gérer les thèmes de l'application, qui peuvent être créés par des groupes (pour par exemple avoir des thèmes évènementiels).</p></body></html>",
      "types": [
        "MutationUpsertThemeResult",
        "Theme",
        "ThemeValue",
        "ThemeVariable",
        "ThemeVariant"
      ],
      "queries": [
        "autodeployedTheme",
        "themes"
      ],
      "mutations": [
        "blockTheme",
        "setThemeValue",
        "setThemeVisibility",
        "upsertTheme"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "autodeployedTheme",
          "id": "Query.autodeployedTheme",
          "type": "query",
          "returnType": "Theme",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/themes/resolvers/query.autodeployed-theme.ts",
              "path": "src/modules/themes/resolvers/query.autodeployed-theme.ts"
            }
          }
        },
        {
          "name": "themes",
          "id": "Query.themes",
          "type": "query",
          "returnType": "Theme",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/themes/resolvers/query.themes.ts",
              "path": "src/modules/themes/resolvers/query.themes.ts"
            }
          }
        },
        {
          "name": "blockTheme",
          "id": "Mutation.blockTheme",
          "type": "mutation",
          "returnType": "Theme",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/themes/resolvers/mutation.block-theme.ts",
              "path": "src/modules/themes/resolvers/mutation.block-theme.ts"
            }
          }
        },
        {
          "name": "setThemeValue",
          "id": "Mutation.setThemeValue",
          "type": "mutation",
          "returnType": "Theme",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/themes/resolvers/mutation.set-theme-value.ts",
              "path": "src/modules/themes/resolvers/mutation.set-theme-value.ts"
            }
          }
        },
        {
          "name": "setThemeVisibility",
          "id": "Mutation.setThemeVisibility",
          "type": "mutation",
          "returnType": "Theme",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/themes/resolvers/mutation.set-theme-visibility.ts",
              "path": "src/modules/themes/resolvers/mutation.set-theme-visibility.ts"
            }
          }
        },
        {
          "name": "upsertTheme",
          "id": "Mutation.upsertTheme",
          "type": "mutation",
          "returnType": "MutationUpsertThemeResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertThemeResult",
            "successDataType": "Theme",
            "successType": "MutationUpsertThemeSuccess"
          },
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/themes/resolvers/mutation.upsert-theme.ts",
              "path": "src/modules/themes/resolvers/mutation.upsert-theme.ts"
            }
          }
        },
        {
          "name": "MutationUpsertThemeResult",
          "id": "MutationUpsertThemeResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertThemeResult",
            "successDataType": "Theme",
            "successType": "MutationUpsertThemeSuccess"
          },
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/themes/types/theme.ts",
              "path": "src/modules/themes/types/theme.ts"
            }
          }
        },
        {
          "name": "Theme",
          "id": "Theme",
          "type": "type",
          "referencedBy": [
            "MutationUpsertThemeSuccess",
            "ThemeValue"
          ],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/themes/types/theme.ts",
              "path": "src/modules/themes/types/theme.ts"
            }
          }
        },
        {
          "name": "ThemeValue",
          "id": "ThemeValue",
          "type": "type",
          "referencedBy": [
            "Theme"
          ],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/themes/types/theme-value.ts",
              "path": "src/modules/themes/types/theme-value.ts"
            }
          }
        },
        {
          "name": "ThemeVariable",
          "id": "ThemeVariable",
          "type": "type",
          "referencedBy": [
            "ThemeValue"
          ],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/themes/types/theme-variable.ts",
              "path": "src/modules/themes/types/theme-variable.ts"
            }
          }
        },
        {
          "name": "ThemeVariant",
          "id": "ThemeVariant",
          "type": "type",
          "referencedBy": [
            "ThemeValue"
          ],
          "deprecationReason": null,
          "moduleName": "themes",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/themes/types/theme-variant.ts",
              "path": "src/modules/themes/types/theme-variant.ts"
            }
          }
        }
      ]
    },
    {
      "name": "pictures",
      "metadata": {},
      "displayName": "Images",
      "rawDocs": "# Images\n\nTODO: Écrire la documentation du module\n",
      "shortDescription": "TODO: Écrire la documentation du module",
      "renderedDocs": "<html><head></head><body>\n<p>TODO: Écrire la documentation du module</p></body></html>",
      "types": [],
      "queries": [],
      "mutations": [
        "setPicture"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "setPicture",
          "id": "Mutation.setPicture",
          "type": "mutation",
          "returnType": "MutationSetPictureResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSetPictureResult",
            "successDataType": "Pictured",
            "successType": "MutationSetPictureSuccess"
          },
          "moduleName": "pictures",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pictures/resolvers/mutation.set-picture.ts",
              "path": "src/modules/pictures/resolvers/mutation.set-picture.ts"
            }
          }
        }
      ]
    },
    {
      "name": "profiles",
      "metadata": {},
      "displayName": "Profils",
      "rawDocs": "# Profils\n\nOpérations relatives à toute ressource ayant une page de profil (AEs, groupes, personnes, écoles, filières), c'est-à-dire en principe toute ressource ayant un UID (donc un \"@\").\n",
      "shortDescription": "Opérations relatives à toute ressource ayant une page de profil (AEs, groupes, personnes, écoles, filières),...",
      "renderedDocs": "<html><head></head><body>\n<p>Opérations relatives à toute ressource ayant une page de profil (AEs, groupes, personnes, écoles, filières), c'est-à-dire en principe toute ressource ayant un <a href=\"/global#type/UID\">UID</a> (donc un \"@\").</p></body></html>",
      "types": [
        "Profile"
      ],
      "queries": [
        "profile"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "profile",
          "id": "Query.profile",
          "type": "query",
          "returnType": "Profile",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "profiles",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/profiles/resolvers/query.profile.ts",
              "path": "src/modules/profiles/resolvers/query.profile.ts"
            }
          }
        },
        {
          "name": "Profile",
          "id": "Profile",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "profiles",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/profiles/types/profile.ts",
              "path": "src/modules/profiles/types/profile.ts"
            }
          }
        }
      ]
    },
    {
      "name": "notifications",
      "metadata": {
        "color": "yellow"
      },
      "displayName": "Notifications",
      "rawDocs": "---\ncolor: yellow\n---\n\n# Notifications\n\nNotifications envoyées aux utilisateurs.\n",
      "shortDescription": "Notifications envoyées aux utilisateurs",
      "renderedDocs": "<html><head></head><body>\n<p>Notifications envoyées aux utilisateurs.</p></body></html>",
      "types": [
        "MutationSubscribeToNotificationsResult",
        "MutationUnsubscribeFromNotificationsResult",
        "Notification",
        "NotificationChannel",
        "NotificationSubscription",
        "NotificationSubscriptionKeysInput",
        "QueryNotificationsConnection"
      ],
      "queries": [
        "notification",
        "notificationSubscription",
        "notificationSubscriptions",
        "notifications",
        "notificationsSendCountForArticle"
      ],
      "mutations": [
        "sendNotification",
        "subscribeToNotifications",
        "testNotification",
        "unsubscribeFromNotifications"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "notification",
          "id": "Query.notification",
          "type": "query",
          "returnType": "Notification",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/query.notification.ts",
              "path": "src/modules/notifications/resolvers/query.notification.ts"
            }
          }
        },
        {
          "name": "notificationSubscription",
          "id": "Query.notificationSubscription",
          "type": "query",
          "returnType": "NotificationSubscription",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/query.notification-subscription.ts",
              "path": "src/modules/notifications/resolvers/query.notification-subscription.ts"
            }
          }
        },
        {
          "name": "notificationSubscriptions",
          "id": "Query.notificationSubscriptions",
          "type": "query",
          "returnType": "NotificationSubscription",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/query.notification-subscriptions.ts",
              "path": "src/modules/notifications/resolvers/query.notification-subscriptions.ts"
            }
          }
        },
        {
          "name": "notifications",
          "id": "Query.notifications",
          "type": "query",
          "returnType": "QueryNotificationsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Notification",
            "edgeType": "QueryNotificationsConnectionEdge",
            "connectionType": "QueryNotificationsConnection"
          },
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/query.notifications.ts",
              "path": "src/modules/notifications/resolvers/query.notifications.ts"
            }
          }
        },
        {
          "name": "notificationsSendCountForArticle",
          "id": "Query.notificationsSendCountForArticle",
          "type": "query",
          "returnType": "Int",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/query.notifications-send-count-for-article.ts",
              "path": "src/modules/notifications/resolvers/query.notifications-send-count-for-article.ts"
            }
          }
        },
        {
          "name": "sendNotification",
          "id": "Mutation.sendNotification",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/mutation.send-notification.ts",
              "path": "src/modules/notifications/resolvers/mutation.send-notification.ts"
            }
          }
        },
        {
          "name": "subscribeToNotifications",
          "id": "Mutation.subscribeToNotifications",
          "type": "mutation",
          "returnType": "MutationSubscribeToNotificationsResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSubscribeToNotificationsResult",
            "successDataType": "NotificationSubscription",
            "successType": "MutationSubscribeToNotificationsSuccess"
          },
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/mutation.subscribe-to-notifications.ts",
              "path": "src/modules/notifications/resolvers/mutation.subscribe-to-notifications.ts"
            }
          }
        },
        {
          "name": "testNotification",
          "id": "Mutation.testNotification",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/mutation.test-notification.ts",
              "path": "src/modules/notifications/resolvers/mutation.test-notification.ts"
            }
          }
        },
        {
          "name": "unsubscribeFromNotifications",
          "id": "Mutation.unsubscribeFromNotifications",
          "type": "mutation",
          "returnType": "MutationUnsubscribeFromNotificationsResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUnsubscribeFromNotificationsResult",
            "successDataType": "NotificationSubscription",
            "successType": "MutationUnsubscribeFromNotificationsSuccess"
          },
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/notifications/resolvers/mutation.unsubscribe-from-notifications.ts",
              "path": "src/modules/notifications/resolvers/mutation.unsubscribe-from-notifications.ts"
            }
          }
        },
        {
          "name": "MutationSubscribeToNotificationsResult",
          "id": "MutationSubscribeToNotificationsResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationSubscribeToNotificationsResult",
            "successDataType": "NotificationSubscription",
            "successType": "MutationSubscribeToNotificationsSuccess"
          },
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification-subscription.ts",
              "path": "src/modules/notifications/types/notification-subscription.ts"
            }
          }
        },
        {
          "name": "MutationUnsubscribeFromNotificationsResult",
          "id": "MutationUnsubscribeFromNotificationsResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUnsubscribeFromNotificationsResult",
            "successDataType": "NotificationSubscription",
            "successType": "MutationUnsubscribeFromNotificationsSuccess"
          },
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification-subscription.ts",
              "path": "src/modules/notifications/types/notification-subscription.ts"
            }
          }
        },
        {
          "name": "Notification",
          "id": "Notification",
          "type": "type",
          "referencedBy": [
            "QueryNotificationsConnection",
            "QueryNotificationsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification.ts",
              "path": "src/modules/notifications/types/notification.ts"
            }
          }
        },
        {
          "name": "NotificationChannel",
          "id": "NotificationChannel",
          "type": "type",
          "referencedBy": [
            "Notification",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification-channel.ts",
              "path": "src/modules/notifications/types/notification-channel.ts"
            }
          }
        },
        {
          "name": "NotificationSubscription",
          "id": "NotificationSubscription",
          "type": "type",
          "referencedBy": [
            "MutationSubscribeToNotificationsSuccess",
            "MutationUnsubscribeFromNotificationsSuccess",
            "Notification"
          ],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification-subscription.ts",
              "path": "src/modules/notifications/types/notification-subscription.ts"
            }
          }
        },
        {
          "name": "NotificationSubscriptionKeysInput",
          "id": "NotificationSubscriptionKeysInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification-subscription-keys-input.ts",
              "path": "src/modules/notifications/types/notification-subscription-keys-input.ts"
            }
          }
        },
        {
          "name": "QueryNotificationsConnection",
          "id": "QueryNotificationsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Notification",
            "edgeType": "QueryNotificationsConnectionEdge",
            "connectionType": "QueryNotificationsConnection"
          },
          "moduleName": "notifications",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/notifications/types/notification.ts",
              "path": "src/modules/notifications/types/notification.ts"
            }
          }
        }
      ]
    },
    {
      "name": "services",
      "metadata": {
        "color": "green"
      },
      "displayName": "Services",
      "rawDocs": "---\ncolor: green\n---\n\n# Services\n\nServices externes proposés par une [AE](../student-associations), une [école](../schools) ou un [groupe](../groups).\n",
      "shortDescription": "Services externes proposés par une AE, une école ou un groupe",
      "renderedDocs": "<html><head></head><body>\n<p>Services externes proposés par une <a href=\"../student-associations\">AE</a>, une <a href=\"../schools\">école</a> ou un <a href=\"../groups\">groupe</a>.</p></body></html>",
      "types": [
        "LogoSourceType",
        "MutationUpsertServiceResult",
        "Service",
        "ServiceOwner",
        "StudentAssociationServicesConnection"
      ],
      "queries": [
        "service",
        "services",
        "userServices"
      ],
      "mutations": [
        "upsertService"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "service",
          "id": "Query.service",
          "type": "query",
          "returnType": "Service",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/services/resolvers/query.service.ts",
              "path": "src/modules/services/resolvers/query.service.ts"
            }
          }
        },
        {
          "name": "services",
          "id": "Query.services",
          "type": "query",
          "returnType": "Service",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/services/resolvers/query.services.ts",
              "path": "src/modules/services/resolvers/query.services.ts"
            }
          }
        },
        {
          "name": "userServices",
          "id": "Query.userServices",
          "type": "query",
          "returnType": "Service",
          "referencedBy": [],
          "deprecationReason": "Use `services(mine: true)` instead",
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/services/resolvers/query.user-services.ts",
              "path": "src/modules/services/resolvers/query.user-services.ts"
            }
          }
        },
        {
          "name": "upsertService",
          "id": "Mutation.upsertService",
          "type": "mutation",
          "returnType": "MutationUpsertServiceResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertServiceResult",
            "successDataType": "Service",
            "successType": "MutationUpsertServiceSuccess"
          },
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/services/resolvers/mutation.upsert-service.ts",
              "path": "src/modules/services/resolvers/mutation.upsert-service.ts"
            }
          }
        },
        {
          "name": "LogoSourceType",
          "id": "LogoSourceType",
          "type": "type",
          "referencedBy": [
            "Service"
          ],
          "deprecationReason": null,
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/services/types/logo-source-type.ts",
              "path": "src/modules/services/types/logo-source-type.ts"
            }
          }
        },
        {
          "name": "MutationUpsertServiceResult",
          "id": "MutationUpsertServiceResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertServiceResult",
            "successDataType": "Service",
            "successType": "MutationUpsertServiceSuccess"
          },
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/services/types/service.ts",
              "path": "src/modules/services/types/service.ts"
            }
          }
        },
        {
          "name": "Service",
          "id": "Service",
          "type": "type",
          "referencedBy": [
            "Group",
            "MutationUpsertServiceSuccess",
            "School",
            "StudentAssociationServicesConnection",
            "StudentAssociationServicesConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/services/types/service.ts",
              "path": "src/modules/services/types/service.ts"
            }
          }
        },
        {
          "name": "ServiceOwner",
          "id": "ServiceOwner",
          "type": "type",
          "referencedBy": [
            "Service"
          ],
          "deprecationReason": null,
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/services/types/service-owner.ts",
              "path": "src/modules/services/types/service-owner.ts"
            }
          }
        },
        {
          "name": "StudentAssociationServicesConnection",
          "id": "StudentAssociationServicesConnection",
          "type": "type",
          "referencedBy": [
            "StudentAssociation"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Service",
            "edgeType": "StudentAssociationServicesConnectionEdge",
            "connectionType": "StudentAssociationServicesConnection"
          },
          "moduleName": "services",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/services/types/service.ts",
              "path": "src/modules/services/types/service.ts"
            }
          }
        }
      ]
    },
    {
      "name": "bar-weeks",
      "metadata": {
        "color": "pink"
      },
      "displayName": "Semaines de bar",
      "rawDocs": "---\ncolor: pink\n---\n\n# Semaines de bar\n\nSpécifique à l'AEn7, représente une semaine où un club organise des activités et staff pour le bar du Foyer.\nLes personnes ayant la permissions d'en créer sont les administrateur·ice·s, responsables des clubs (permission `canEditGroups`) et membres du bureau du Foyer (configurés avec la variable d'environnement `FOY_GROUPS`, liste séparée par des virgules d'uids de groupes)\n",
      "shortDescription": "Spécifique à l'AEn7, représente une semaine où un club organise des activités et staff pour...",
      "renderedDocs": "<html><head></head><body>\n<p>Spécifique à l'AEn7, représente une semaine où un club organise des activités et staff pour le bar du Foyer.\nLes personnes ayant la permissions d'en créer sont les administrateur·ice·s, responsables des clubs (permission <code>canEditGroups</code>) et membres du bureau du Foyer (configurés avec la variable d'environnement <code>FOY_GROUPS</code>, liste séparée par des virgules d'uids de groupes)</p></body></html>",
      "types": [
        "BarWeek",
        "MutationUpsertBarWeekResult"
      ],
      "queries": [
        "barWeek",
        "barWeekNow",
        "barWeeks"
      ],
      "mutations": [
        "deleteBarWeek",
        "upsertBarWeek"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "barWeek",
          "id": "Query.barWeek",
          "type": "query",
          "returnType": "BarWeek",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/bar-weeks/resolvers/query.bar-week.ts",
              "path": "src/modules/bar-weeks/resolvers/query.bar-week.ts"
            }
          }
        },
        {
          "name": "barWeekNow",
          "id": "Query.barWeekNow",
          "type": "query",
          "returnType": "BarWeek",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/bar-weeks/resolvers/query.bar-week-now.ts",
              "path": "src/modules/bar-weeks/resolvers/query.bar-week-now.ts"
            }
          }
        },
        {
          "name": "barWeeks",
          "id": "Query.barWeeks",
          "type": "query",
          "returnType": "BarWeek",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/bar-weeks/resolvers/query.bar-weeks.ts",
              "path": "src/modules/bar-weeks/resolvers/query.bar-weeks.ts"
            }
          }
        },
        {
          "name": "deleteBarWeek",
          "id": "Mutation.deleteBarWeek",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/bar-weeks/resolvers/mutation.delete-bar-week.ts",
              "path": "src/modules/bar-weeks/resolvers/mutation.delete-bar-week.ts"
            }
          }
        },
        {
          "name": "upsertBarWeek",
          "id": "Mutation.upsertBarWeek",
          "type": "mutation",
          "returnType": "MutationUpsertBarWeekResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertBarWeekResult",
            "successDataType": "BarWeek",
            "successType": "MutationUpsertBarWeekSuccess"
          },
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/bar-weeks/resolvers/mutation.upsert-bar-week.ts",
              "path": "src/modules/bar-weeks/resolvers/mutation.upsert-bar-week.ts"
            }
          }
        },
        {
          "name": "BarWeek",
          "id": "BarWeek",
          "type": "type",
          "referencedBy": [
            "MutationUpsertBarWeekSuccess"
          ],
          "deprecationReason": null,
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/bar-weeks/types/bar-week.ts",
              "path": "src/modules/bar-weeks/types/bar-week.ts"
            }
          }
        },
        {
          "name": "MutationUpsertBarWeekResult",
          "id": "MutationUpsertBarWeekResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertBarWeekResult",
            "successDataType": "BarWeek",
            "successType": "MutationUpsertBarWeekSuccess"
          },
          "moduleName": "bar-weeks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/bar-weeks/types/bar-week.ts",
              "path": "src/modules/bar-weeks/types/bar-week.ts"
            }
          }
        }
      ]
    },
    {
      "name": "student-associations",
      "metadata": {
        "color": "yellow"
      },
      "displayName": "Associations étudiantes",
      "rawDocs": "---\ncolor: yellow\n---\n\n# Associations étudiantes\n\nAssociations Étudiantes de chaque [école](/schools). Il n'y a qu'une seule _AE_ par école.\n",
      "shortDescription": "Associations Étudiantes de chaque école",
      "renderedDocs": "<html><head></head><body>\n<p>Associations Étudiantes de chaque <a href=\"/schools\">école</a>. Il n'y a qu'une seule <em>AE</em> par école.</p></body></html>",
      "types": [
        "ContributionOption",
        "MutationDeleteContributionResult",
        "MutationMarkContributionAsPaidResult",
        "StudentAssociation"
      ],
      "queries": [
        "contributionOptions",
        "studentAssociation",
        "studentAssociations"
      ],
      "mutations": [
        "cancelPendingContribution",
        "contribute",
        "deleteContribution",
        "markContributionAsPaid",
        "updateStudentAssociationPicture"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "contributionOptions",
          "id": "Query.contributionOptions",
          "type": "query",
          "returnType": "ContributionOption",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/query.contribution-options.ts",
              "path": "src/modules/student-associations/resolvers/query.contribution-options.ts"
            }
          }
        },
        {
          "name": "studentAssociation",
          "id": "Query.studentAssociation",
          "type": "query",
          "returnType": "StudentAssociation",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/query.student-association.ts",
              "path": "src/modules/student-associations/resolvers/query.student-association.ts"
            }
          }
        },
        {
          "name": "studentAssociations",
          "id": "Query.studentAssociations",
          "type": "query",
          "returnType": "StudentAssociation",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/query.student-associations.ts",
              "path": "src/modules/student-associations/resolvers/query.student-associations.ts"
            }
          }
        },
        {
          "name": "cancelPendingContribution",
          "id": "Mutation.cancelPendingContribution",
          "type": "mutation",
          "returnType": "MutationCancelPendingContributionResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationCancelPendingContributionResult",
            "successDataType": "Boolean",
            "successType": "MutationCancelPendingContributionSuccess"
          },
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/mutation.cancel-pending-contribution.ts",
              "path": "src/modules/student-associations/resolvers/mutation.cancel-pending-contribution.ts"
            }
          }
        },
        {
          "name": "contribute",
          "id": "Mutation.contribute",
          "type": "mutation",
          "returnType": "MutationContributeResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationContributeResult",
            "successDataType": "Boolean",
            "successType": "MutationContributeSuccess"
          },
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/mutation.contribute.ts",
              "path": "src/modules/student-associations/resolvers/mutation.contribute.ts"
            }
          }
        },
        {
          "name": "deleteContribution",
          "id": "Mutation.deleteContribution",
          "type": "mutation",
          "returnType": "MutationDeleteContributionResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteContributionResult",
            "successDataType": "ContributionOption",
            "successType": "MutationDeleteContributionSuccess"
          },
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/mutation.delete-contribution.ts",
              "path": "src/modules/student-associations/resolvers/mutation.delete-contribution.ts"
            }
          }
        },
        {
          "name": "markContributionAsPaid",
          "id": "Mutation.markContributionAsPaid",
          "type": "mutation",
          "returnType": "MutationMarkContributionAsPaidResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationMarkContributionAsPaidResult",
            "successDataType": "ContributionOption",
            "successType": "MutationMarkContributionAsPaidSuccess"
          },
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/mutation.mark-contribution-as-paid.ts",
              "path": "src/modules/student-associations/resolvers/mutation.mark-contribution-as-paid.ts"
            }
          }
        },
        {
          "name": "updateStudentAssociationPicture",
          "id": "Mutation.updateStudentAssociationPicture",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/student-associations/resolvers/mutation.update-student-association-picture.ts",
              "path": "src/modules/student-associations/resolvers/mutation.update-student-association-picture.ts"
            }
          }
        },
        {
          "name": "ContributionOption",
          "id": "ContributionOption",
          "type": "type",
          "referencedBy": [
            "MutationDeleteContributionSuccess",
            "MutationMarkContributionAsPaidSuccess",
            "StudentAssociation",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/student-associations/types/contribution-option.ts",
              "path": "src/modules/student-associations/types/contribution-option.ts"
            }
          }
        },
        {
          "name": "MutationDeleteContributionResult",
          "id": "MutationDeleteContributionResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteContributionResult",
            "successDataType": "ContributionOption",
            "successType": "MutationDeleteContributionSuccess"
          },
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/student-associations/types/contribution-option.ts",
              "path": "src/modules/student-associations/types/contribution-option.ts"
            }
          }
        },
        {
          "name": "MutationMarkContributionAsPaidResult",
          "id": "MutationMarkContributionAsPaidResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationMarkContributionAsPaidResult",
            "successDataType": "ContributionOption",
            "successType": "MutationMarkContributionAsPaidSuccess"
          },
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/student-associations/types/contribution-option.ts",
              "path": "src/modules/student-associations/types/contribution-option.ts"
            }
          }
        },
        {
          "name": "StudentAssociation",
          "id": "StudentAssociation",
          "type": "type",
          "referencedBy": [
            "ContributionOption",
            "Group",
            "LydiaAccount",
            "Page",
            "Profile",
            "School",
            "Service",
            "ServiceOwner",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "student-associations",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/student-associations/types/student-association.ts",
              "path": "src/modules/student-associations/types/student-association.ts"
            }
          }
        }
      ]
    },
    {
      "name": "pages",
      "metadata": {
        "color": "cyan"
      },
      "displayName": "Pages",
      "rawDocs": "---\ncolor: cyan\n---\n\n# Pages\n\nPages web liées à un groupe ou une AE. Pratique pour par exemple parler des partenariats d'une AE (genre réductions de prix), héberger les status d'une asso, etc.\n",
      "shortDescription": "Pages web liées à un groupe ou une AE",
      "renderedDocs": "<html><head></head><body>\n<p>Pages web liées à un groupe ou une AE. Pratique pour par exemple parler des partenariats d'une AE (genre réductions de prix), héberger les status d'une asso, etc.</p></body></html>",
      "types": [
        "MutationAddFileToPageResult",
        "MutationDeletePageResult",
        "MutationRemoveFileFromPageResult",
        "MutationUpsertPageResult",
        "Page",
        "PagesConnection",
        "QueryPagesConnection"
      ],
      "queries": [
        "page",
        "pages"
      ],
      "mutations": [
        "addFileToPage",
        "deletePage",
        "removeFileFromPage",
        "upsertPage"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "page",
          "id": "Query.page",
          "type": "query",
          "returnType": "Page",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pages/resolvers/query.page.ts",
              "path": "src/modules/pages/resolvers/query.page.ts"
            }
          }
        },
        {
          "name": "pages",
          "id": "Query.pages",
          "type": "query",
          "returnType": "QueryPagesConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Page",
            "edgeType": "QueryPagesConnectionEdge",
            "connectionType": "QueryPagesConnection"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pages/resolvers/query.pages.ts",
              "path": "src/modules/pages/resolvers/query.pages.ts"
            }
          }
        },
        {
          "name": "addFileToPage",
          "id": "Mutation.addFileToPage",
          "type": "mutation",
          "returnType": "MutationAddFileToPageResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAddFileToPageResult",
            "successDataType": "Page",
            "successType": "MutationAddFileToPageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pages/resolvers/mutation.add-file-to-page.ts",
              "path": "src/modules/pages/resolvers/mutation.add-file-to-page.ts"
            }
          }
        },
        {
          "name": "deletePage",
          "id": "Mutation.deletePage",
          "type": "mutation",
          "returnType": "MutationDeletePageResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeletePageResult",
            "successDataType": "Page",
            "successType": "MutationDeletePageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pages/resolvers/mutation.delete-page.ts",
              "path": "src/modules/pages/resolvers/mutation.delete-page.ts"
            }
          }
        },
        {
          "name": "removeFileFromPage",
          "id": "Mutation.removeFileFromPage",
          "type": "mutation",
          "returnType": "MutationRemoveFileFromPageResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRemoveFileFromPageResult",
            "successDataType": "Page",
            "successType": "MutationRemoveFileFromPageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pages/resolvers/mutation.remove-file-from-page.ts",
              "path": "src/modules/pages/resolvers/mutation.remove-file-from-page.ts"
            }
          }
        },
        {
          "name": "upsertPage",
          "id": "Mutation.upsertPage",
          "type": "mutation",
          "returnType": "MutationUpsertPageResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertPageResult",
            "successDataType": "Page",
            "successType": "MutationUpsertPageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/pages/resolvers/mutation.upsert-page.ts",
              "path": "src/modules/pages/resolvers/mutation.upsert-page.ts"
            }
          }
        },
        {
          "name": "MutationAddFileToPageResult",
          "id": "MutationAddFileToPageResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAddFileToPageResult",
            "successDataType": "Page",
            "successType": "MutationAddFileToPageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/page.ts",
              "path": "src/modules/pages/types/page.ts"
            }
          }
        },
        {
          "name": "MutationDeletePageResult",
          "id": "MutationDeletePageResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeletePageResult",
            "successDataType": "Page",
            "successType": "MutationDeletePageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/page.ts",
              "path": "src/modules/pages/types/page.ts"
            }
          }
        },
        {
          "name": "MutationRemoveFileFromPageResult",
          "id": "MutationRemoveFileFromPageResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationRemoveFileFromPageResult",
            "successDataType": "Page",
            "successType": "MutationRemoveFileFromPageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/page.ts",
              "path": "src/modules/pages/types/page.ts"
            }
          }
        },
        {
          "name": "MutationUpsertPageResult",
          "id": "MutationUpsertPageResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertPageResult",
            "successDataType": "Page",
            "successType": "MutationUpsertPageSuccess"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/page.ts",
              "path": "src/modules/pages/types/page.ts"
            }
          }
        },
        {
          "name": "Page",
          "id": "Page",
          "type": "type",
          "referencedBy": [
            "Group",
            "MutationAddFileToPageSuccess",
            "MutationDeletePageSuccess",
            "MutationRemoveFileFromPageSuccess",
            "MutationUpsertPageSuccess",
            "PagesConnection",
            "PagesEdge",
            "QueryPagesConnection",
            "QueryPagesConnectionEdge",
            "StudentAssociation"
          ],
          "deprecationReason": null,
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/page.ts",
              "path": "src/modules/pages/types/page.ts"
            }
          }
        },
        {
          "name": "PagesConnection",
          "id": "PagesConnection",
          "type": "type",
          "referencedBy": [
            "Group",
            "StudentAssociation"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Page",
            "edgeType": "PagesEdge",
            "connectionType": "PagesConnection"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/pages-connection.ts",
              "path": "src/modules/pages/types/pages-connection.ts"
            }
          }
        },
        {
          "name": "QueryPagesConnection",
          "id": "QueryPagesConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Page",
            "edgeType": "QueryPagesConnectionEdge",
            "connectionType": "QueryPagesConnection"
          },
          "moduleName": "pages",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/pages/types/page.ts",
              "path": "src/modules/pages/types/page.ts"
            }
          }
        }
      ]
    },
    {
      "name": "schools",
      "metadata": {
        "color": "red"
      },
      "displayName": "Écoles",
      "rawDocs": "---\ncolor: red\n---\n\n# Écoles\n\nÉcoles présentes sur l'application.\n",
      "shortDescription": "Écoles présentes sur l'application",
      "renderedDocs": "<html><head></head><body>\n<p>Écoles présentes sur l'application.</p></body></html>",
      "types": [
        "School",
        "SchoolGroup",
        "SchoolInput"
      ],
      "queries": [
        "school",
        "schoolGroups",
        "schools"
      ],
      "mutations": [
        "deleteSchoolPicture",
        "updateSchool",
        "updateSchoolPicture"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "school",
          "id": "Query.school",
          "type": "query",
          "returnType": "School",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/schools/resolvers/query.school.ts",
              "path": "src/modules/schools/resolvers/query.school.ts"
            }
          }
        },
        {
          "name": "schoolGroups",
          "id": "Query.schoolGroups",
          "type": "query",
          "returnType": "SchoolGroup",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/schools/resolvers/query.school-groups.ts",
              "path": "src/modules/schools/resolvers/query.school-groups.ts"
            }
          }
        },
        {
          "name": "schools",
          "id": "Query.schools",
          "type": "query",
          "returnType": "School",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/schools/resolvers/query.schools.ts",
              "path": "src/modules/schools/resolvers/query.schools.ts"
            }
          }
        },
        {
          "name": "deleteSchoolPicture",
          "id": "Mutation.deleteSchoolPicture",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/schools/resolvers/mutation.delete-school-picture.ts",
              "path": "src/modules/schools/resolvers/mutation.delete-school-picture.ts"
            }
          }
        },
        {
          "name": "updateSchool",
          "id": "Mutation.updateSchool",
          "type": "mutation",
          "returnType": "School",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/schools/resolvers/mutation.update-school.ts",
              "path": "src/modules/schools/resolvers/mutation.update-school.ts"
            }
          }
        },
        {
          "name": "updateSchoolPicture",
          "id": "Mutation.updateSchoolPicture",
          "type": "mutation",
          "returnType": "String",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/schools/resolvers/mutation.update-school-picture.ts",
              "path": "src/modules/schools/resolvers/mutation.update-school-picture.ts"
            }
          }
        },
        {
          "name": "School",
          "id": "School",
          "type": "type",
          "referencedBy": [
            "ContributionOption",
            "Major",
            "Profile",
            "QuickSignup",
            "Service",
            "ServiceOwner",
            "StudentAssociation",
            "Ticket"
          ],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/schools/types/school.ts",
              "path": "src/modules/schools/types/school.ts"
            }
          }
        },
        {
          "name": "SchoolGroup",
          "id": "SchoolGroup",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/schools/types/school-group.ts",
              "path": "src/modules/schools/types/school-group.ts"
            }
          }
        },
        {
          "name": "SchoolInput",
          "id": "SchoolInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "schools",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/schools/types/school-input.ts",
              "path": "src/modules/schools/types/school-input.ts"
            }
          }
        }
      ]
    },
    {
      "name": "curriculum",
      "metadata": {
        "color": "orange"
      },
      "displayName": "Curriculum",
      "rawDocs": "---\ncolor: orange\n---\n\n# Curriculum\n\nDifférentes matières enseignées dans les écoles, et leur organisation au sein de celle-ci.\n\nLa hiérarchie est la suivante:\n\n- [École](../schools)\n  - Filière (ou majeure): objet `Major`\n    - Parcours (ou mineure): objet `Minor`\n      - \"UE\" (Unité d'enseignement): objet `TeachingUnit`\n        - Matière: objet `Subject`\n\nCependant, afin de rendre les différents cas particuliers des écoles représentables, cette représentation se doit d'être la plus flexible possible.\n\nEn conséquence, une matière peut être reliée à:\n\n- une UE\n- une mineure\n- une majeure\n\nEt de même, une UE peut être reliée à:\n\n- une mineure\n- une majeure\n\nLa hiérarchie complète est donc plutôt la suivante:\n\n```\nSchool\n    Major\n        Subject\n        TeachingUnit\n        Minor\n            Subject\n            TeachingUnit\n                Subject\n```\n",
      "shortDescription": "Différentes matières enseignées dans les écoles, et leur organisation au sein de celle-ci",
      "renderedDocs": "<html><head></head><body>\n<p>Différentes matières enseignées dans les écoles, et leur organisation au sein de celle-ci.</p>\n<p>La hiérarchie est la suivante:</p>\n<ul>\n<li><a href=\"../schools\">École</a>\n<ul>\n<li>Filière (ou majeure): objet <code>Major</code>\n<ul>\n<li>Parcours (ou mineure): objet <code>Minor</code>\n<ul>\n<li>\"UE\" (Unité d'enseignement): objet <code>TeachingUnit</code>\n<ul>\n<li>Matière: objet <code>Subject</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Cependant, afin de rendre les différents cas particuliers des écoles représentables, cette représentation se doit d'être la plus flexible possible.</p>\n<p>En conséquence, une matière peut être reliée à:</p>\n<ul>\n<li>une UE</li>\n<li>une mineure</li>\n<li>une majeure</li>\n</ul>\n<p>Et de même, une UE peut être reliée à:</p>\n<ul>\n<li>une mineure</li>\n<li>une majeure</li>\n</ul>\n<p>La hiérarchie complète est donc plutôt la suivante:</p>\n<pre><code>School\n    Major\n        Subject\n        TeachingUnit\n        Minor\n            Subject\n            TeachingUnit\n                Subject\n</code></pre></body></html>",
      "types": [
        "Major",
        "Minor",
        "QueryMinorsConnection",
        "Subject",
        "TeachingUnit"
      ],
      "queries": [
        "major",
        "majors",
        "minor",
        "minors",
        "subject",
        "subjects"
      ],
      "mutations": [
        "updateSubjectsExamDates"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "major",
          "id": "Query.major",
          "type": "query",
          "returnType": "Major",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/query.major.ts",
              "path": "src/modules/curriculum/resolvers/query.major.ts"
            }
          }
        },
        {
          "name": "majors",
          "id": "Query.majors",
          "type": "query",
          "returnType": "Major",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/query.majors.ts",
              "path": "src/modules/curriculum/resolvers/query.majors.ts"
            }
          }
        },
        {
          "name": "minor",
          "id": "Query.minor",
          "type": "query",
          "returnType": "Minor",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/query.minor.ts",
              "path": "src/modules/curriculum/resolvers/query.minor.ts"
            }
          }
        },
        {
          "name": "minors",
          "id": "Query.minors",
          "type": "query",
          "returnType": "QueryMinorsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Minor",
            "edgeType": "QueryMinorsConnectionEdge",
            "connectionType": "QueryMinorsConnection"
          },
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/query.minors.ts",
              "path": "src/modules/curriculum/resolvers/query.minors.ts"
            }
          }
        },
        {
          "name": "subject",
          "id": "Query.subject",
          "type": "query",
          "returnType": "Subject",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/query.subject.ts",
              "path": "src/modules/curriculum/resolvers/query.subject.ts"
            }
          }
        },
        {
          "name": "subjects",
          "id": "Query.subjects",
          "type": "query",
          "returnType": "Subject",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/query.subjects.ts",
              "path": "src/modules/curriculum/resolvers/query.subjects.ts"
            }
          }
        },
        {
          "name": "updateSubjectsExamDates",
          "id": "Mutation.updateSubjectsExamDates",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/curriculum/resolvers/mutation.update-subjects-exam-dates.ts",
              "path": "src/modules/curriculum/resolvers/mutation.update-subjects-exam-dates.ts"
            }
          }
        },
        {
          "name": "Major",
          "id": "Major",
          "type": "type",
          "referencedBy": [
            "Minor",
            "Profile",
            "School",
            "SchoolGroup",
            "Subject",
            "Ticket",
            "User",
            "UserCandidate"
          ],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/curriculum/types/major.ts",
              "path": "src/modules/curriculum/types/major.ts"
            }
          }
        },
        {
          "name": "Minor",
          "id": "Minor",
          "type": "type",
          "referencedBy": [
            "Major",
            "QueryMinorsConnection",
            "QueryMinorsConnectionEdge",
            "Subject",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/curriculum/types/minor.ts",
              "path": "src/modules/curriculum/types/minor.ts"
            }
          }
        },
        {
          "name": "QueryMinorsConnection",
          "id": "QueryMinorsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Minor",
            "edgeType": "QueryMinorsConnectionEdge",
            "connectionType": "QueryMinorsConnection"
          },
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/curriculum/types/minor.ts",
              "path": "src/modules/curriculum/types/minor.ts"
            }
          }
        },
        {
          "name": "Subject",
          "id": "Subject",
          "type": "type",
          "referencedBy": [
            "Document",
            "Major",
            "Minor",
            "TeachingUnit"
          ],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/curriculum/types/subject.ts",
              "path": "src/modules/curriculum/types/subject.ts"
            }
          }
        },
        {
          "name": "TeachingUnit",
          "id": "TeachingUnit",
          "type": "type",
          "referencedBy": [
            "Subject"
          ],
          "deprecationReason": null,
          "moduleName": "curriculum",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/curriculum/types/teaching-unit.ts",
              "path": "src/modules/curriculum/types/teaching-unit.ts"
            }
          }
        }
      ]
    },
    {
      "name": "comments",
      "metadata": {
        "color": "blue"
      },
      "displayName": "Commentaires",
      "rawDocs": "---\ncolor: blue\n---\n\n# Commentaires\n\nLes différents commentaires postés.\nLes commentaires peuvent être reliés à des [posts](../posts) ou des [documents](../documents)\n",
      "shortDescription": "Les différents commentaires postés",
      "renderedDocs": "<html><head></head><body>\n<p>Les différents commentaires postés.\nLes commentaires peuvent être reliés à des <a href=\"../posts\">posts</a> ou des <a href=\"../documents\">documents</a></p></body></html>",
      "types": [
        "Comment",
        "Commentable",
        "CommentsConnection"
      ],
      "queries": [],
      "mutations": [
        "deleteComment",
        "upsertComment"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "deleteComment",
          "id": "Mutation.deleteComment",
          "type": "mutation",
          "returnType": "Comment",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "comments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/comments/resolvers/mutation.delete-comment.ts",
              "path": "src/modules/comments/resolvers/mutation.delete-comment.ts"
            }
          }
        },
        {
          "name": "upsertComment",
          "id": "Mutation.upsertComment",
          "type": "mutation",
          "returnType": "Comment",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "comments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/comments/resolvers/mutation.upsert-comment.ts",
              "path": "src/modules/comments/resolvers/mutation.upsert-comment.ts"
            }
          }
        },
        {
          "name": "Comment",
          "id": "Comment",
          "type": "type",
          "referencedBy": [
            "Comment",
            "CommentsConnection",
            "CommentsEdge",
            "Reaction"
          ],
          "deprecationReason": null,
          "moduleName": "comments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/comments/types/comment.ts",
              "path": "src/modules/comments/types/comment.ts"
            }
          }
        },
        {
          "name": "Commentable",
          "id": "Commentable",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "comments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/comments/types/commentable.ts",
              "path": "src/modules/comments/types/commentable.ts"
            }
          }
        },
        {
          "name": "CommentsConnection",
          "id": "CommentsConnection",
          "type": "type",
          "referencedBy": [
            "Article",
            "Commentable",
            "Document"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Comment",
            "edgeType": "CommentsEdge",
            "connectionType": "CommentsConnection"
          },
          "moduleName": "comments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/comments/types/comments-connection.ts",
              "path": "src/modules/comments/types/comments-connection.ts"
            }
          }
        }
      ]
    },
    {
      "name": "reactions",
      "metadata": {
        "color": "cyan"
      },
      "displayName": "Réactions",
      "rawDocs": "---\ncolor: cyan\n---\n\n# Réactions\n\nRéactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)\n",
      "shortDescription": "Réactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)",
      "renderedDocs": "<html><head></head><body>\n<p>Réactions (likes, etc) sur les différents objets de l'application (évènements, posts, etc)</p></body></html>",
      "types": [
        "BooleanMap",
        "Counts",
        "QueryReactionsConnection",
        "Reactable",
        "Reaction"
      ],
      "queries": [
        "reaction",
        "reactions"
      ],
      "mutations": [
        "deleteReaction",
        "react",
        "toggleReaction",
        "unreact",
        "upsertReaction"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "reaction",
          "id": "Query.reaction",
          "type": "query",
          "returnType": "Reaction",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/query.reaction.ts",
              "path": "src/modules/reactions/resolvers/query.reaction.ts"
            }
          }
        },
        {
          "name": "reactions",
          "id": "Query.reactions",
          "type": "query",
          "returnType": "QueryReactionsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Reaction",
            "edgeType": "QueryReactionsConnectionEdge",
            "connectionType": "QueryReactionsConnection"
          },
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/query.reactions.ts",
              "path": "src/modules/reactions/resolvers/query.reactions.ts"
            }
          }
        },
        {
          "name": "deleteReaction",
          "id": "Mutation.deleteReaction",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/mutation.delete-reaction.ts",
              "path": "src/modules/reactions/resolvers/mutation.delete-reaction.ts"
            }
          }
        },
        {
          "name": "react",
          "id": "Mutation.react",
          "type": "mutation",
          "returnType": "Reactable",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/mutation.react.ts",
              "path": "src/modules/reactions/resolvers/mutation.react.ts"
            }
          }
        },
        {
          "name": "toggleReaction",
          "id": "Mutation.toggleReaction",
          "type": "mutation",
          "returnType": "Reactable",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/mutation.toggle-reaction.ts",
              "path": "src/modules/reactions/resolvers/mutation.toggle-reaction.ts"
            }
          }
        },
        {
          "name": "unreact",
          "id": "Mutation.unreact",
          "type": "mutation",
          "returnType": "Reactable",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/mutation.unreact.ts",
              "path": "src/modules/reactions/resolvers/mutation.unreact.ts"
            }
          }
        },
        {
          "name": "upsertReaction",
          "id": "Mutation.upsertReaction",
          "type": "mutation",
          "returnType": "Int",
          "referencedBy": [],
          "deprecationReason": "Use 'react' instead",
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/reactions/resolvers/mutation.upsert-reaction.ts",
              "path": "src/modules/reactions/resolvers/mutation.upsert-reaction.ts"
            }
          }
        },
        {
          "name": "BooleanMap",
          "id": "BooleanMap",
          "type": "type",
          "referencedBy": [
            "Article",
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/reactions/types/boolean-map.ts",
              "path": "src/modules/reactions/types/boolean-map.ts"
            }
          }
        },
        {
          "name": "Counts",
          "id": "Counts",
          "type": "type",
          "referencedBy": [
            "Article",
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/reactions/types/counts.ts",
              "path": "src/modules/reactions/types/counts.ts"
            }
          }
        },
        {
          "name": "QueryReactionsConnection",
          "id": "QueryReactionsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Reaction",
            "edgeType": "QueryReactionsConnectionEdge",
            "connectionType": "QueryReactionsConnection"
          },
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/reactions/types/reaction.ts",
              "path": "src/modules/reactions/types/reaction.ts"
            }
          }
        },
        {
          "name": "Reactable",
          "id": "Reactable",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/reactions/types/reactable.ts",
              "path": "src/modules/reactions/types/reactable.ts"
            }
          }
        },
        {
          "name": "Reaction",
          "id": "Reaction",
          "type": "type",
          "referencedBy": [
            "QueryReactionsConnection",
            "QueryReactionsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "reactions",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/reactions/types/reaction.ts",
              "path": "src/modules/reactions/types/reaction.ts"
            }
          }
        }
      ]
    },
    {
      "name": "links",
      "metadata": {
        "color": "orange"
      },
      "displayName": "Liens",
      "rawDocs": "---\ncolor: orange\n---\n\n# Liens\n\nLiens nommés, utilisés dans beaucoup de ressources différentes.\n\n## Organisation du code source\n\nLes codes des résolveurs respectifs sont dans chacun des modules concernés, et non ici.\n",
      "shortDescription": "Liens nommés, utilisés dans beaucoup de ressources différentes",
      "renderedDocs": "<html><head></head><body>\n<p>Liens nommés, utilisés dans beaucoup de ressources différentes.</p>\n<h2>Organisation du code source</h2>\n<p>Les codes des résolveurs respectifs sont dans chacun des modules concernés, et non ici.</p></body></html>",
      "types": [
        "DuplicateLinksAction",
        "HasLinks",
        "Link",
        "LinkInput",
        "MutationAddLinksResult",
        "MutationDeleteLinkResult",
        "MutationUpdateLinkResult"
      ],
      "queries": [],
      "mutations": [
        "addLinks",
        "deleteLink",
        "updateLink"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "addLinks",
          "id": "Mutation.addLinks",
          "type": "mutation",
          "returnType": "MutationAddLinksResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAddLinksResult",
            "successDataType": "HasLinks",
            "successType": "MutationAddLinksSuccess"
          },
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/links/resolvers/mutation.add-links.ts",
              "path": "src/modules/links/resolvers/mutation.add-links.ts"
            }
          }
        },
        {
          "name": "deleteLink",
          "id": "Mutation.deleteLink",
          "type": "mutation",
          "returnType": "MutationDeleteLinkResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteLinkResult",
            "successDataType": "Link",
            "successType": "MutationDeleteLinkSuccess"
          },
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/links/resolvers/mutation.delete-link.ts",
              "path": "src/modules/links/resolvers/mutation.delete-link.ts"
            }
          }
        },
        {
          "name": "updateLink",
          "id": "Mutation.updateLink",
          "type": "mutation",
          "returnType": "MutationUpdateLinkResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateLinkResult",
            "successDataType": "Link",
            "successType": "MutationUpdateLinkSuccess"
          },
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/links/resolvers/mutation.update-link.ts",
              "path": "src/modules/links/resolvers/mutation.update-link.ts"
            }
          }
        },
        {
          "name": "DuplicateLinksAction",
          "id": "DuplicateLinksAction",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "links",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "HasLinks",
          "id": "HasLinks",
          "type": "type",
          "referencedBy": [
            "MutationAddLinksSuccess"
          ],
          "deprecationReason": null,
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/links/types/has-links.ts",
              "path": "src/modules/links/types/has-links.ts"
            }
          }
        },
        {
          "name": "Link",
          "id": "Link",
          "type": "type",
          "referencedBy": [
            "Article",
            "Event",
            "Group",
            "MutationDeleteLinkSuccess",
            "MutationUpdateLinkSuccess",
            "Notification",
            "StudentAssociation",
            "Subject",
            "Ticket",
            "User"
          ],
          "deprecationReason": null,
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/links/types/link.ts",
              "path": "src/modules/links/types/link.ts"
            }
          }
        },
        {
          "name": "LinkInput",
          "id": "LinkInput",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/links/types/link-input.ts",
              "path": "src/modules/links/types/link-input.ts"
            }
          }
        },
        {
          "name": "MutationAddLinksResult",
          "id": "MutationAddLinksResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationAddLinksResult",
            "successDataType": "HasLinks",
            "successType": "MutationAddLinksSuccess"
          },
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/links/types/has-links.ts",
              "path": "src/modules/links/types/has-links.ts"
            }
          }
        },
        {
          "name": "MutationDeleteLinkResult",
          "id": "MutationDeleteLinkResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationDeleteLinkResult",
            "successDataType": "Link",
            "successType": "MutationDeleteLinkSuccess"
          },
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/links/types/link.ts",
              "path": "src/modules/links/types/link.ts"
            }
          }
        },
        {
          "name": "MutationUpdateLinkResult",
          "id": "MutationUpdateLinkResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpdateLinkResult",
            "successDataType": "Link",
            "successType": "MutationUpdateLinkSuccess"
          },
          "moduleName": "links",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/links/types/link.ts",
              "path": "src/modules/links/types/link.ts"
            }
          }
        }
      ]
    },
    {
      "name": "announcements",
      "metadata": {
        "color": "red"
      },
      "displayName": "Annonces",
      "rawDocs": "---\ncolor: red\n---\n\n# Annonces\n\nAnnonces effectuées par les administrateur·ice·s de l'application.\nÀ afficher à tout le monde (connecté ou non) de manière visible au travers de toute l'application.\n",
      "shortDescription": "Annonces effectuées par les administrateur·ice·s de l'application",
      "renderedDocs": "<html><head></head><body>\n<p>Annonces effectuées par les administrateur·ice·s de l'application.\nÀ afficher à tout le monde (connecté ou non) de manière visible au travers de toute l'application.</p></body></html>",
      "types": [
        "Announcement",
        "MutationUpsertAnnouncementResult",
        "QueryAnnouncementsConnection"
      ],
      "queries": [
        "announcement",
        "announcements",
        "announcementsNow"
      ],
      "mutations": [
        "deleteAnnouncement",
        "upsertAnnouncement"
      ],
      "subscriptions": [
        "announcementsNow"
      ],
      "items": [
        {
          "name": "announcement",
          "id": "Query.announcement",
          "type": "query",
          "returnType": "Announcement",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/announcements/resolvers/query.announcement.ts",
              "path": "src/modules/announcements/resolvers/query.announcement.ts"
            }
          }
        },
        {
          "name": "announcements",
          "id": "Query.announcements",
          "type": "query",
          "returnType": "QueryAnnouncementsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Announcement",
            "edgeType": "QueryAnnouncementsConnectionEdge",
            "connectionType": "QueryAnnouncementsConnection"
          },
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/announcements/resolvers/query.announcements.ts",
              "path": "src/modules/announcements/resolvers/query.announcements.ts"
            }
          }
        },
        {
          "name": "announcementsNow",
          "id": "Query.announcementsNow",
          "type": "query",
          "returnType": "Announcement",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/announcements/resolvers/query.announcements-now.ts",
              "path": "src/modules/announcements/resolvers/query.announcements-now.ts"
            }
          }
        },
        {
          "name": "deleteAnnouncement",
          "id": "Mutation.deleteAnnouncement",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/announcements/resolvers/mutation.delete-announcement.ts",
              "path": "src/modules/announcements/resolvers/mutation.delete-announcement.ts"
            }
          }
        },
        {
          "name": "upsertAnnouncement",
          "id": "Mutation.upsertAnnouncement",
          "type": "mutation",
          "returnType": "MutationUpsertAnnouncementResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertAnnouncementResult",
            "successDataType": "Announcement",
            "successType": "MutationUpsertAnnouncementSuccess"
          },
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/announcements/resolvers/mutation.upsert-announcement.ts",
              "path": "src/modules/announcements/resolvers/mutation.upsert-announcement.ts"
            }
          }
        },
        {
          "name": "Announcement",
          "id": "Announcement",
          "type": "type",
          "referencedBy": [
            "MutationUpsertAnnouncementSuccess",
            "QueryAnnouncementsConnection",
            "QueryAnnouncementsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/announcements/types/announcement.ts",
              "path": "src/modules/announcements/types/announcement.ts"
            }
          }
        },
        {
          "name": "MutationUpsertAnnouncementResult",
          "id": "MutationUpsertAnnouncementResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationUpsertAnnouncementResult",
            "successDataType": "Announcement",
            "successType": "MutationUpsertAnnouncementSuccess"
          },
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/announcements/types/announcement.ts",
              "path": "src/modules/announcements/types/announcement.ts"
            }
          }
        },
        {
          "name": "QueryAnnouncementsConnection",
          "id": "QueryAnnouncementsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "Announcement",
            "edgeType": "QueryAnnouncementsConnectionEdge",
            "connectionType": "QueryAnnouncementsConnection"
          },
          "moduleName": "announcements",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/announcements/types/announcement.ts",
              "path": "src/modules/announcements/types/announcement.ts"
            }
          }
        }
      ]
    },
    {
      "name": "payments",
      "metadata": {
        "color": "yellow"
      },
      "displayName": "Paiements",
      "rawDocs": "---\ncolor: yellow\n---\n\n# Paiements\n\nIntégrations avec différents prestataires de paiements, notamment [Lydia](https://lydia-app.com) et [PayPal](https://paypal.com).\n",
      "shortDescription": "Intégrations avec différents prestataires de paiements, notamment Lydia et PayPal",
      "renderedDocs": "<html><head></head><body>\n<p>Intégrations avec différents prestataires de paiements, notamment <a href=\"https://lydia-app.com\">Lydia</a> et <a href=\"https://paypal.com\">PayPal</a>.</p></body></html>",
      "types": [
        "LydiaAccount",
        "PaymentMethod",
        "ProfitsBreakdown",
        "ProfitsBreakdownByPaymentMethod",
        "ProfitsBreakdownByTicket",
        "PromotionType"
      ],
      "queries": [
        "lydiaAccount",
        "lydiaAccounts",
        "lydiaAccountsOfGroup"
      ],
      "mutations": [
        "claimPromotionCode",
        "finishPaypalRegistrationPayment",
        "upsertLydiaAccount"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "lydiaAccount",
          "id": "Query.lydiaAccount",
          "type": "query",
          "returnType": "LydiaAccount",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/payments/resolvers/query.lydia-account.ts",
              "path": "src/modules/payments/resolvers/query.lydia-account.ts"
            }
          }
        },
        {
          "name": "lydiaAccounts",
          "id": "Query.lydiaAccounts",
          "type": "query",
          "returnType": "LydiaAccount",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/payments/resolvers/query.lydia-accounts.ts",
              "path": "src/modules/payments/resolvers/query.lydia-accounts.ts"
            }
          }
        },
        {
          "name": "lydiaAccountsOfGroup",
          "id": "Query.lydiaAccountsOfGroup",
          "type": "query",
          "returnType": "LydiaAccount",
          "referencedBy": [],
          "deprecationReason": "Use group.lydiaAccounts instead",
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/payments/resolvers/query.lydia-accounts-of-group.ts",
              "path": "src/modules/payments/resolvers/query.lydia-accounts-of-group.ts"
            }
          }
        },
        {
          "name": "claimPromotionCode",
          "id": "Mutation.claimPromotionCode",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/payments/resolvers/mutation.claim-promotion-code.ts",
              "path": "src/modules/payments/resolvers/mutation.claim-promotion-code.ts"
            }
          }
        },
        {
          "name": "finishPaypalRegistrationPayment",
          "id": "Mutation.finishPaypalRegistrationPayment",
          "type": "mutation",
          "returnType": "MutationFinishPaypalRegistrationPaymentResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "MutationFinishPaypalRegistrationPaymentResult",
            "successDataType": "Boolean",
            "successType": "MutationFinishPaypalRegistrationPaymentSuccess"
          },
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/payments/resolvers/mutation.finish-paypal-registration-payment.ts",
              "path": "src/modules/payments/resolvers/mutation.finish-paypal-registration-payment.ts"
            }
          }
        },
        {
          "name": "upsertLydiaAccount",
          "id": "Mutation.upsertLydiaAccount",
          "type": "mutation",
          "returnType": "LydiaAccount",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/payments/resolvers/mutation.upsert-lydia-account.ts",
              "path": "src/modules/payments/resolvers/mutation.upsert-lydia-account.ts"
            }
          }
        },
        {
          "name": "LydiaAccount",
          "id": "LydiaAccount",
          "type": "type",
          "referencedBy": [
            "Event",
            "Group",
            "ShopItem"
          ],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/payments/types/lydia-account.ts",
              "path": "src/modules/payments/types/lydia-account.ts"
            }
          }
        },
        {
          "name": "PaymentMethod",
          "id": "PaymentMethod",
          "type": "type",
          "referencedBy": [
            "Registration",
            "ShopItem",
            "ShopPayment",
            "Ticket"
          ],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/payments/types/payment-method.ts",
              "path": "src/modules/payments/types/payment-method.ts"
            }
          }
        },
        {
          "name": "ProfitsBreakdown",
          "id": "ProfitsBreakdown",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/payments/types/profits-breakdown.ts",
              "path": "src/modules/payments/types/profits-breakdown.ts"
            }
          }
        },
        {
          "name": "ProfitsBreakdownByPaymentMethod",
          "id": "ProfitsBreakdownByPaymentMethod",
          "type": "type",
          "referencedBy": [
            "ProfitsBreakdown"
          ],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "ProfitsBreakdownByTicket",
          "id": "ProfitsBreakdownByTicket",
          "type": "type",
          "referencedBy": [
            "ProfitsBreakdown"
          ],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "PromotionType",
          "id": "PromotionType",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "moduleName": "payments",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/payments/types/promotion-type.ts",
              "path": "src/modules/payments/types/promotion-type.ts"
            }
          }
        }
      ]
    },
    {
      "name": "gitlab",
      "metadata": {
        "color": "magenta"
      },
      "displayName": "Gitlab",
      "rawDocs": "---\ncolor: magenta\n---\n\n# Gitlab\n\nRapports utilisateurs et crédits.\n\nChurros est interconnecté avec son dépôt pour tout ce qui concerne:\n\n- la gestion de rapports utilisateurs (signalement de bugs et propositions de fonctionnalités).\n- l'affichage de crédits et le badge \"développeur·euse\" sur les profils (développeur·euse·s ayant fait des commits)\n",
      "shortDescription": "Rapports utilisateurs et crédits",
      "renderedDocs": "<html><head></head><body>\n<p>Rapports utilisateurs et crédits.</p>\n<p>Churros est interconnecté avec son dépôt pour tout ce qui concerne:</p>\n<ul>\n<li>la gestion de rapports utilisateurs (signalement de bugs et propositions de fonctionnalités).</li>\n<li>l'affichage de crédits et le badge \"développeur·euse\" sur les profils (développeur·euse·s ayant fait des commits)</li>\n</ul></body></html>",
      "types": [
        "Issue",
        "IssueComment",
        "IssueState"
      ],
      "queries": [
        "codeContributors",
        "issue",
        "issuesByUser"
      ],
      "mutations": [
        "createGitlabIssue"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "codeContributors",
          "id": "Query.codeContributors",
          "type": "query",
          "returnType": "QueryCodeContributorsResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryCodeContributorsResult",
            "successDataType": "User",
            "successType": "QueryCodeContributorsSuccess"
          },
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/gitlab/resolvers/query.code-contributors.ts",
              "path": "src/modules/gitlab/resolvers/query.code-contributors.ts"
            }
          }
        },
        {
          "name": "issue",
          "id": "Query.issue",
          "type": "query",
          "returnType": "Issue",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/gitlab/resolvers/query.issue.ts",
              "path": "src/modules/gitlab/resolvers/query.issue.ts"
            }
          }
        },
        {
          "name": "issuesByUser",
          "id": "Query.issuesByUser",
          "type": "query",
          "returnType": "Issue",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/gitlab/resolvers/query.issues-by-user.ts",
              "path": "src/modules/gitlab/resolvers/query.issues-by-user.ts"
            }
          }
        },
        {
          "name": "createGitlabIssue",
          "id": "Mutation.createGitlabIssue",
          "type": "mutation",
          "returnType": "Int",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/gitlab/resolvers/mutation.create-gitlab-issue.ts",
              "path": "src/modules/gitlab/resolvers/mutation.create-gitlab-issue.ts"
            }
          }
        },
        {
          "name": "Issue",
          "id": "Issue",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/gitlab/types/issue.ts",
              "path": "src/modules/gitlab/types/issue.ts"
            }
          }
        },
        {
          "name": "IssueComment",
          "id": "IssueComment",
          "type": "type",
          "referencedBy": [
            "Issue"
          ],
          "deprecationReason": null,
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/gitlab/types/issue-comment.ts",
              "path": "src/modules/gitlab/types/issue-comment.ts"
            }
          }
        },
        {
          "name": "IssueState",
          "id": "IssueState",
          "type": "type",
          "referencedBy": [
            "Issue"
          ],
          "deprecationReason": null,
          "moduleName": "gitlab",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/gitlab/types/issue-state.ts",
              "path": "src/modules/gitlab/types/issue-state.ts"
            }
          }
        }
      ]
    },
    {
      "name": "changelogs",
      "metadata": {
        "color": "orange"
      },
      "displayName": "Changelogs",
      "rawDocs": "---\ncolor: orange\n---\n\n# Changelogs\n\nL'historique des versions de l'application.\nLes changelogs représentent les changements dans l'application web officielle également, et ne séparent pas les changements de l'API seul de ceux concernant l'application web.\n",
      "shortDescription": "L'historique des versions de l'application",
      "renderedDocs": "<html><head></head><body>\n<p>L'historique des versions de l'application.\nLes changelogs représentent les changements dans l'application web officielle également, et ne séparent pas les changements de l'API seul de ceux concernant l'application web.</p></body></html>",
      "types": [
        "ChangelogRelease",
        "QueryCombinedChangelogResult",
        "QueryUpcomingChangelogResult",
        "ReleaseChange",
        "ReleaseChangesMaps"
      ],
      "queries": [
        "changelog",
        "combinedChangelog",
        "upcomingChangelog"
      ],
      "mutations": [
        "acknowledgeChangelog"
      ],
      "subscriptions": [],
      "items": [
        {
          "name": "changelog",
          "id": "Query.changelog",
          "type": "query",
          "returnType": "ChangelogRelease",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/changelogs/resolvers/query.changelog.ts",
              "path": "src/modules/changelogs/resolvers/query.changelog.ts"
            }
          }
        },
        {
          "name": "combinedChangelog",
          "id": "Query.combinedChangelog",
          "type": "query",
          "returnType": "QueryCombinedChangelogResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryCombinedChangelogResult",
            "successDataType": "ChangelogRelease",
            "successType": "QueryCombinedChangelogSuccess"
          },
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/changelogs/resolvers/query.combined-changelog.ts",
              "path": "src/modules/changelogs/resolvers/query.combined-changelog.ts"
            }
          }
        },
        {
          "name": "upcomingChangelog",
          "id": "Query.upcomingChangelog",
          "type": "query",
          "returnType": "QueryUpcomingChangelogResult",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryUpcomingChangelogResult",
            "successDataType": "ChangelogRelease",
            "successType": "QueryUpcomingChangelogSuccess"
          },
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/changelogs/resolvers/query.upcoming-changelog.ts",
              "path": "src/modules/changelogs/resolvers/query.upcoming-changelog.ts"
            }
          }
        },
        {
          "name": "acknowledgeChangelog",
          "id": "Mutation.acknowledgeChangelog",
          "type": "mutation",
          "returnType": "Boolean",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/changelogs/resolvers/mutation.acknowledge-changelog.ts",
              "path": "src/modules/changelogs/resolvers/mutation.acknowledge-changelog.ts"
            }
          }
        },
        {
          "name": "ChangelogRelease",
          "id": "ChangelogRelease",
          "type": "type",
          "referencedBy": [
            "QueryCombinedChangelogSuccess",
            "QueryUpcomingChangelogSuccess"
          ],
          "deprecationReason": null,
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/changelogs/types/changelog-release.ts",
              "path": "src/modules/changelogs/types/changelog-release.ts"
            }
          }
        },
        {
          "name": "QueryCombinedChangelogResult",
          "id": "QueryCombinedChangelogResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryCombinedChangelogResult",
            "successDataType": "ChangelogRelease",
            "successType": "QueryCombinedChangelogSuccess"
          },
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/changelogs/types/changelog-release.ts",
              "path": "src/modules/changelogs/types/changelog-release.ts"
            }
          }
        },
        {
          "name": "QueryUpcomingChangelogResult",
          "id": "QueryUpcomingChangelogResult",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "result": {
            "errorTypes": [
              "Error",
              "ZodError"
            ],
            "resultType": "QueryUpcomingChangelogResult",
            "successDataType": "ChangelogRelease",
            "successType": "QueryUpcomingChangelogSuccess"
          },
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/changelogs/types/changelog-release.ts",
              "path": "src/modules/changelogs/types/changelog-release.ts"
            }
          }
        },
        {
          "name": "ReleaseChange",
          "id": "ReleaseChange",
          "type": "type",
          "referencedBy": [
            "ReleaseChangesMaps"
          ],
          "deprecationReason": null,
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/changelogs/types/release-change.ts",
              "path": "src/modules/changelogs/types/release-change.ts"
            }
          }
        },
        {
          "name": "ReleaseChangesMaps",
          "id": "ReleaseChangesMaps",
          "type": "type",
          "referencedBy": [
            "ChangelogRelease"
          ],
          "deprecationReason": null,
          "moduleName": "changelogs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/changelogs/types/release-changes-maps.ts",
              "path": "src/modules/changelogs/types/release-changes-maps.ts"
            }
          }
        }
      ]
    },
    {
      "name": "logs",
      "metadata": {
        "color": "magenta"
      },
      "displayName": "Logs",
      "rawDocs": "---\ncolor: magenta\n---\n\n# Logs\n\nLogs de l'application, accessibles uniquement par les administrateur·ice·s.\n",
      "shortDescription": "Logs de l'application, accessibles uniquement par les administrateur·ice·s",
      "renderedDocs": "<html><head></head><body>\n<p>Logs de l'application, accessibles uniquement par les administrateur·ice·s.</p></body></html>",
      "types": [
        "EventLogsConnection",
        "LogEntry",
        "QueryLogsConnection"
      ],
      "queries": [
        "logs"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "logs",
          "id": "Query.logs",
          "type": "query",
          "returnType": "QueryLogsConnection",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "LogEntry",
            "edgeType": "QueryLogsConnectionEdge",
            "connectionType": "QueryLogsConnection"
          },
          "moduleName": "logs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/logs/resolvers/query.logs.ts",
              "path": "src/modules/logs/resolvers/query.logs.ts"
            }
          }
        },
        {
          "name": "EventLogsConnection",
          "id": "EventLogsConnection",
          "type": "type",
          "referencedBy": [
            "Event"
          ],
          "deprecationReason": null,
          "connection": {
            "nodeType": "LogEntry",
            "edgeType": "EventLogsConnectionEdge",
            "connectionType": "EventLogsConnection"
          },
          "moduleName": "logs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/logs/types/log-entry.ts",
              "path": "src/modules/logs/types/log-entry.ts"
            }
          }
        },
        {
          "name": "LogEntry",
          "id": "LogEntry",
          "type": "type",
          "referencedBy": [
            "EventLogsConnection",
            "EventLogsConnectionEdge",
            "QueryLogsConnection",
            "QueryLogsConnectionEdge"
          ],
          "deprecationReason": null,
          "moduleName": "logs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/logs/types/log-entry.ts",
              "path": "src/modules/logs/types/log-entry.ts"
            }
          }
        },
        {
          "name": "QueryLogsConnection",
          "id": "QueryLogsConnection",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "connection": {
            "nodeType": "LogEntry",
            "edgeType": "QueryLogsConnectionEdge",
            "connectionType": "QueryLogsConnection"
          },
          "moduleName": "logs",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/logs/types/log-entry.ts",
              "path": "src/modules/logs/types/log-entry.ts"
            }
          }
        }
      ]
    },
    {
      "name": "health-checks",
      "metadata": {
        "color": "green"
      },
      "displayName": "Health Checks",
      "rawDocs": "---\ncolor: green\n---\n\n# Health Checks\n\nDifférents \"health checks\" de l'application, des tests permettant de vérifier que l'application fonctionne correctement.\nIls sont utilisés pour monitorer que l'application est en bonne santé, et permet aussi d'exposer un endpoint /health dans l'application web.\n",
      "shortDescription": "Différents \"health checks\" de l'application, des tests permettant de vérifier que l'application fonctionne correctement",
      "renderedDocs": "<html><head></head><body>\n<p>Différents \"health checks\" de l'application, des tests permettant de vérifier que l'application fonctionne correctement.\nIls sont utilisés pour monitorer que l'application est en bonne santé, et permet aussi d'exposer un endpoint /health dans l'application web.</p></body></html>",
      "types": [
        "DatabaseHealthCheck",
        "HealthCheck",
        "LdapHealthCheck",
        "MailHealthCheck",
        "RedisHealthCheck"
      ],
      "queries": [
        "healthcheck"
      ],
      "mutations": [],
      "subscriptions": [],
      "items": [
        {
          "name": "healthcheck",
          "id": "Query.healthcheck",
          "type": "query",
          "returnType": "HealthCheck",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "health-checks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
              "computed": "src/modules/health-checks/resolvers/query.healthcheck.ts",
              "path": "src/modules/health-checks/resolvers/query.healthcheck.ts"
            }
          }
        },
        {
          "name": "DatabaseHealthCheck",
          "id": "DatabaseHealthCheck",
          "type": "type",
          "referencedBy": [
            "HealthCheck"
          ],
          "deprecationReason": null,
          "moduleName": "health-checks",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "HealthCheck",
          "id": "HealthCheck",
          "type": "type",
          "referencedBy": [],
          "deprecationReason": null,
          "moduleName": "health-checks",
          "match": {
            "filesystem": {
              "pattern": "src/modules/[module]/types/[typename].ts",
              "computed": "src/modules/health-checks/types/health-check.ts",
              "path": "src/modules/health-checks/types/health-check.ts"
            }
          }
        },
        {
          "name": "LdapHealthCheck",
          "id": "LdapHealthCheck",
          "type": "type",
          "referencedBy": [
            "HealthCheck"
          ],
          "deprecationReason": null,
          "moduleName": "health-checks",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "MailHealthCheck",
          "id": "MailHealthCheck",
          "type": "type",
          "referencedBy": [
            "HealthCheck"
          ],
          "deprecationReason": null,
          "moduleName": "health-checks",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        },
        {
          "name": "RedisHealthCheck",
          "id": "RedisHealthCheck",
          "type": "type",
          "referencedBy": [
            "HealthCheck"
          ],
          "deprecationReason": null,
          "moduleName": "health-checks",
          "match": {
            "schema": {
              "directive": "graphinx"
            }
          }
        }
      ]
    }
  ],
  "schema": "directive @graphinx(module: String) on OBJECT | FIELD_DEFINITION | SCALAR | ENUM | UNION | INTERFACE | INPUT_OBJECT\n\ndirective @rateLimit(limit: Int!, duration: Int!) on OBJECT | FIELD_DEFINITION\n\n\"\"\"\nAnnouncement is a way to get a message accross the entire site, such as for maintenance announcements.\n\"\"\"\ntype Announcement implements Node {\n  body: String!\n  bodyHtml: String!\n  by: User\n  createdAt: DateTime!\n  endsAt: DateTime!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  startsAt: DateTime!\n  title: String!\n  updatedAt: DateTime!\n  userId: ID\n  warning: Boolean!\n}\n\n\"\"\"\nUne réponse à un formulaire. Les réponses peuvent être de plusieurs types différents (en fonction de la question).\n\"\"\"\ninterface Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n  question: Question!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n}\n\n\"\"\"Réponse de type `Date` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerDate implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Réponse donnée, brute (sous forme de texte)\"\"\"\n  rawValue: String\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: DateTime\n}\n\n\"\"\"Réponse de type `FileUpload` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerFileUpload implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionFileUpload!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\ninput AnswerInput {\n  \"\"\"\n  Réponse à la question. Pour les questions à une seule réponse, ne mettre qu'un seul élément.\n      \n  - Pour les questions de type `Date`, utiliser le format `YYYY-mm-dd`\n  - Pour les questions de type `Time`, utiliser le format `HH:MM:ss`\n  - Pour les questions de type `Scale`, utiliser simplement le nombre répondu par l'utilisateur·ice\n  - Pour les questions de type `FileUpload`, utiliser la mutation [`answerFileQuestion`](#mutation/answerFileQuestion)\n  \"\"\"\n  answer: [String!]!\n\n  \"\"\"ID de la question à laquelle répondre\"\"\"\n  question: ID!\n}\n\n\"\"\"Réponse de type `LongText` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerLongText implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\n\"\"\"Réponse de type `Number` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerNumber implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: Float\n}\n\n\"\"\"Réponse de type `Scale` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerScale implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Réponse donnée, entre 0 et 1\"\"\"\n  normalizedValue: Float\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScale!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: Int\n}\n\ntype AnswerSearchResult {\n  answer: Answer!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\n\"\"\"\nRéponse de type `SelectMultiple` (voir [`QuestionKind`](#QuestionKind))\n\"\"\"\ntype AnswerSelectMultiple implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionSelectMultiple!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: [String!]\n}\n\n\"\"\"Réponse de type `SelectOne` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerSelectOne implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionSelectOne!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\n\"\"\"Réponse de type `Text` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerText implements Answer {\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: String\n}\n\n\"\"\"Réponse de type `Time` (voir [`QuestionKind`](#QuestionKind))\"\"\"\ntype AnswerTime implements Answer {\n  answer: Answer!\n  answerString: String!\n\n  \"\"\"Réservation associée à la réponse\"\"\"\n  booking: Registration\n  checkboxIsMarked: Boolean\n\n  \"\"\"Date de création de la réponse\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant répondu à la question\"\"\"\n  createdBy: User\n\n  \"\"\"Formulaire auquel appartient la question\"\"\"\n  form: Form!\n\n  \"\"\"Préfixe de l'identifiant: `answer:`\"\"\"\n  id: ID!\n\n  \"\"\"Question à laquelle la réponse est associée\"\"\"\n  question: QuestionScalar!\n\n  \"\"\"Réponse donnée, brute (sous forme de texte)\"\"\"\n  rawValue: String\n\n  \"\"\"Section du formulaire auquel appartient la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Date de dernière mise à jour de la réponse\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Réponse donnée\"\"\"\n  value: DateTime\n}\n\n\"\"\"Formats d'export des réponses\"\"\"\nenum AnswersExportFormats {\n  \"\"\"\n  Format CSV (séparateur de colonnes: virgule, séparateur de lignes: saut de ligne)\n  \"\"\"\n  CSV\n\n  \"\"\"\n  Format TSV (séparateur de colonnes: tabulation, séparateur de lignes: saut de ligne)\n  \"\"\"\n  TSV\n}\n\n\"\"\"\nReprésente toutes les réponses d'un·e utilisateur·ice à un formulaire. Pratique pour grouper les réponses afin de les afficher dans un tableau\n\"\"\"\ntype AnswersOfUser {\n  answers: [Answer!]!\n\n  \"\"\"Correspond à la date de dernière réponse parmis les réponses\"\"\"\n  date: DateTime!\n  user: User!\n}\n\n\"\"\"An article is a post in a group\"\"\"\ntype Article implements Commentable & Node & Pictured & Reactable & Shareable {\n  author: User\n  authorId: ID\n  body: String!\n  bodyHtml: String!\n  bodyPreview: String!\n\n  \"\"\"\n  Vrai si l'utilisateur·ice connecté·e peut éditer le post (en considérant qu'iel ne va pas changer l'auteur·ice ou le groupe du post)\n  \"\"\"\n  canBeEdited: Boolean!\n  comments(after: String, before: String, first: Int, last: Int): CommentsConnection!\n  createdAt: DateTime!\n  event: Event\n  eventId: ID\n  group: Group!\n  groupId: ID!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n  links: [Link!]!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  myReactions: BooleanMap!\n  notifiedAt: DateTime\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  published: Boolean!\n  publishedAt: DateTime!\n\n  \"\"\"Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji\"\"\"\n  reacted(emoji: String!): Boolean!\n  reactionCounts: Counts!\n\n  \"\"\"Nombre total de réactions avec cet emoji\"\"\"\n  reactions(emoji: String!): Int!\n  shares: Int!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  title: String!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  visibility: Visibility!\n}\n\ntype ArticleSearchResultType {\n  article: Article!\n  highlightedTitle: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\ntype AwaitingValidationError {\n  message: String!\n}\n\n\"\"\"A bar week is a week during which some groups takeover the bar staff\"\"\"\ntype BarWeek implements Node {\n  description: String!\n  descriptionHtml: String!\n  endsAt: DateTime!\n  groups: [Group!]!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  startsAt: DateTime!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n}\n\nenum BookingState {\n  \"\"\"Payée\"\"\"\n  Paid\n\n  \"\"\"Non payée et non scannée\"\"\"\n  Unpaid\n\n  \"\"\"Scannée\"\"\"\n  Verified\n}\n\n\"\"\"\nUne page épinglée pour en faire un accès rapide pour un·e utilisateur·rice\n\"\"\"\ntype Bookmark implements Node {\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n\n  \"\"\"Chemin de la page\"\"\"\n  path: String!\n  user: User!\n}\n\n\"\"\"Contrainte booléenne, à trois états\"\"\"\nenum BooleanConstraint {\n  \"\"\"Ne pas prendre en compte la contrainte\"\"\"\n  DontCare\n\n  \"\"\"Obliger la contrainte à ne pas être remplie\"\"\"\n  Not\n\n  \"\"\"Obliger la contrainte à être remplie\"\"\"\n  Only\n}\n\nscalar BooleanMap\n\ntype BuildInfo {\n  \"\"\"Le hash du commit utilisé pour build l'API\"\"\"\n  commit: String!\n\n  \"\"\"La version actuelle de l'API (et de l'application)\"\"\"\n  version: String!\n}\n\n\"\"\"Un entier positif ou 'Unlimited' pour une capacité sans limite\"\"\"\nscalar Capacity\n\n\"\"\"A release in the changelog\"\"\"\ntype ChangelogRelease {\n  \"\"\"The changes of the release, grouped by category\"\"\"\n  changes: ReleaseChangesMaps!\n\n  \"\"\"The date of the release\"\"\"\n  date: DateTime\n\n  \"\"\"A short description of the release\"\"\"\n  description: String!\n\n  \"\"\"A short description of the release, in HTML. Safe from XSS.\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"The version of the release\"\"\"\n  version: String!\n}\n\n\"\"\"\nUne couleur. En entrée, un code héxadécimal avec '#', ou un nom de couleur CSS. En sortie, un code héxadécimal avec '#' présent. La transparence n'est pas supportée.\n\"\"\"\nscalar Color\n\ntype Comment implements Node & Reactable {\n  author: User\n  authorId: ID\n  body: String!\n  bodyHtml: String!\n  createdAt: DateTime!\n  document: Document\n  documentId: ID\n  id: ID!\n  inReplyTo: Comment\n  inReplyToId: ID\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n\n  \"\"\"Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji\"\"\"\n  reacted(emoji: String!): Boolean!\n\n  \"\"\"Nombre total de réactions avec cet emoji\"\"\"\n  reactions(emoji: String!): Int!\n  replies: [Comment!]!\n  updatedAt: DateTime!\n}\n\n\"\"\"Une resource pouvant être commentée par les utilisateur·ice·s\"\"\"\ninterface Commentable {\n  comments(after: String, before: String, first: Int, last: Int): CommentsConnection!\n\n  \"\"\"L’identifiant de la resource commentée\"\"\"\n  id: ID!\n}\n\ntype CommentsConnection {\n  edges: [CommentsEdge!]!\n  nodes: [Comment!]!\n  pageInfo: PageInfo!\n}\n\ntype CommentsEdge {\n  cursor: String!\n  node: Comment!\n}\n\ntype ContributionOption implements Node {\n  \"\"\"On peut marquer une cotisation de cette option comme payée\"\"\"\n  canMarkAsPaid: Boolean!\n  descriptionHtml: String!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  name: String!\n  offeredIn: School!\n\n  \"\"\"Une personne paye une cotisation avec cette option\"\"\"\n  paidBy(\n    \"\"\"UID de l'utilisateur·ice\"\"\"\n    uid: String!\n  ): Boolean!\n  paysFor: [StudentAssociation!]!\n  price: Float!\n}\n\nscalar Counts\n\n\"\"\"A credential is a way to authenticate a user\"\"\"\ntype Credential {\n  active: Boolean!\n  createdAt: DateTime!\n  expiresAt: DateTime\n  id: ID!\n  name: String!\n  token: String!\n  type: CredentialType!\n  user: User!\n  userAgent: String!\n}\n\nenum CredentialType {\n  Google\n  GroupAccessToken\n  Password\n  Token\n}\n\n\"\"\"Le dialecte CSV à utiliser\"\"\"\nenum CsvDialect {\n  \"\"\"\n  Dialecte CSV pour Excel: séparé par des point-virgules, et toujours guillemeté.\n  \"\"\"\n  Excel\n\n  \"\"\"\n  Dialecte CSV standard: séparé par des virgules, avec des guillemets quand nécéssaire seulement. S'ouvre sans soucis dans la plupart des logiciels de tableur, excepté Excel.\n  \"\"\"\n  Standard\n}\n\ntype DatabaseHealthCheck {\n  prisma: Boolean!\n}\n\n\"\"\"Un intervalle valide de dates\"\"\"\ninput DateRangeInput {\n  \"\"\"Date de fin de l'intervalle\"\"\"\n  end: DateTime!\n\n  \"\"\"Date de début de l'intervalle\"\"\"\n  start: DateTime!\n}\n\n\"\"\"\nA date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.\n\"\"\"\nscalar DateTime\n\ntype Document implements Commentable & Node & Reactable {\n  comments(after: String, before: String, first: Int, last: Int): CommentsConnection!\n  createdAt: DateTime!\n  description: String!\n  descriptionHtml: String!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n\n  \"\"\"\n  Liste de chemins vers les fichiers représentant le sujet (ou la fiche de révision)\n  \"\"\"\n  paperPaths: [String!]!\n\n  \"\"\"Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji\"\"\"\n  reacted(emoji: String!): Boolean!\n\n  \"\"\"Nombre total de réactions avec cet emoji\"\"\"\n  reactions(emoji: String!): Int!\n  schoolYear: Int!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n\n  \"\"\"Liste de chemins vers les fichiers représentant la correction.\"\"\"\n  solutionPaths: [String!]!\n  subject: Subject\n  subjectId: ID\n  title: String!\n  type: DocumentType!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  updatedAt: DateTime!\n  uploader: User\n  uploaderId: ID\n}\n\ntype DocumentSearchResult {\n  document: Document!\n  id: ID!\n  rank: Int\n  similarity: Float!\n}\n\nenum DocumentType {\n  CourseNotes\n  CourseSlides\n  Exam\n  Exercises\n  GradedExercises\n  Miscellaneous\n  Practical\n  PracticalExam\n  Summary\n}\n\nenum DuplicateLinksAction {\n  \"\"\"Provoquer une erreur\"\"\"\n  Error\n\n  \"\"\"Remplacer l'ancien lien\"\"\"\n  Replace\n\n  \"\"\"Ne pas ajouter\"\"\"\n  Skip\n}\n\n\"\"\"Adresse e-mail\"\"\"\nscalar Email\n\n\"\"\"A email validation request\"\"\"\ntype EmailChange implements Node {\n  createdAt: DateTime!\n  email: String!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  pending: Boolean!\n  updatedAt: DateTime!\n  user: User!\n  userId: ID!\n}\n\n\"\"\"\nThe most basic error object, based on the base JavaScript Error object.\n\"\"\"\ntype Error implements ErrorInterface {\n  message: String!\n}\n\n\"\"\"Basic interface for all error types to implement.\"\"\"\ninterface ErrorInterface {\n  message: String!\n}\n\ntype EvenSearchResult {\n  event: Event!\n  highlightedTitle: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\n\"\"\"An event is a date, time and place, as well as an optional ticket\"\"\"\ntype Event implements Node & Pictured & Reactable & Shareable {\n  \"\"\"Les promotions applicables à cet évènement\"\"\"\n  applicableOffers: [PromotionType!]!\n  articles: [Article!]!\n  author: User\n  authorId: ID\n  banned: [User!]!\n  beneficiary: LydiaAccount\n  bookings(\n    after: String\n    before: String\n    first: Int\n    last: Int\n\n    \"\"\"Ne montre que les réservations d'un certain statut\"\"\"\n    only: BookingState!\n  ): EventBookingsConnection!\n  bookingsCounts: RegistrationsCounts!\n\n  \"\"\"\n  Renvoie un texte à un format demandé contentant un export des réservations de l'évènement.\n  \"\"\"\n  bookingsCsv(\n    \"\"\"\n    Un texe représentant les URLs des pages de réservation individuelles. Dans ce texte, les occurences de '[code]' seront remplacées par le code de réservation.\n    \"\"\"\n    bookingURL: URL!\n    dialect: CsvDialect! = Standard\n  ): EventBookingsCsvResult!\n\n  \"\"\"L'utilisateur·ice connecté·e peut modifier cet évènement\"\"\"\n  canEdit(\n    \"\"\"\n    Lève une erreur avec ce message si l'utilisateur·ice n'a pas les droits\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut ajouter, enlever ou modifier les droits des managers de cet évènement\n  \"\"\"\n  canEditManagers: Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut scanner les réservations de cet évènement\n  \"\"\"\n  canScanBookings(\n    \"\"\"\n    Erreur à lever si jamais la permission n'est pas donnée à l'utilisateur.ice connecté.e\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut voir la liste des réservations de cet évènement\n  \"\"\"\n  canSeeAllBookings(\n    \"\"\"\n    Lève une erreur si l'utilisateur·ice n'a pas les permissions, au lieu de juste renvoyer `false`. La valeur est le message d'erreur à renvoyer\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"L'utilsateur·ice connecté·e peut voir les logs de cet évènement\"\"\"\n  canSeeLogs: Boolean!\n  capacity: Int!\n  coOrganizers: [Group!]!\n  contactMail: String!\n  createdAt: DateTime!\n  description: String!\n  descriptionHtml: HTML!\n  descriptionPreview: String!\n\n  \"\"\"Liste des promotions activées pour tout les billets de l'évènement.\"\"\"\n  enabledSpecialOffers: [PromotionType!]\n  endsAt: DateTime\n\n  \"\"\"\n  URL vers une billetterie externe. Null si l'évènement possède un lien à URL valide, non dynamique, nommé \"billetterie\" et n'a pas de billets\n  \"\"\"\n  externalTicketing: URL\n\n  \"\"\"Formulaires associés à l'événement\"\"\"\n  forms: [Form!]!\n  frequency: EventFrequency!\n  globalCapacity: Capacity\n  group: Group! @deprecated(reason: \"Use `organizer` instead.\")\n  groupId: ID!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n\n  \"\"\"Vrai si l'évènement doit apparaître dans le mode kiosque\"\"\"\n  includeInKiosk: Boolean!\n  links: [Link!]!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  location: String!\n\n  \"\"\"\n  Logs concernant cet évènement. Ne contient pas les logs concernant les réservations.\n  \"\"\"\n  logs(after: String, before: String, first: Int, last: Int): EventLogsConnection!\n  lydiaAccountId: ID\n  managers: [EventManager!]!\n\n  \"\"\"\n  Réservations faites par et/ou pour l'utilisateur.ice connecté.e. Triée par bénéficiaire (soi-même d'abord), puis par date de création. Renvoie au maximum 100 réservations.\n  \"\"\"\n  myBookings(\n    \"\"\"Nombre de réservations à récupérer\"\"\"\n    count: Int\n  ): [Registration!]!\n  myReactions: BooleanMap!\n  mySoonestShotgunOpensAt: DateTime @deprecated(reason: \"Use first ticket's opensAt instead. Event.tickets is now sorted such that if the user has access to tickets with soon-to-open or opened shotguns, the earliest one will be first.\")\n  organizer: Group!\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  placesLeft: Int\n  profitsBreakdown: ProfitsBreakdown!\n\n  \"\"\"Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji\"\"\"\n  reacted(emoji: String!): Boolean!\n  reactionCounts: Counts!\n\n  \"\"\"Nombre total de réactions avec cet emoji\"\"\"\n  reactions(emoji: String!): Int!\n  recurringUntil: DateTime\n  searchBookings(q: String!): [RegistrationSearchResult!]!\n  shares: Int!\n\n  \"\"\"Vrai si le nombre de places restantes doit être affiché\"\"\"\n  showPlacesLeft: Boolean!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  startsAt: DateTime\n  ticket(id: LocalID!): Ticket\n\n  \"\"\"Récupérer un groupe de billets de l'évènement\"\"\"\n  ticketGroup(id: LocalID!): TicketGroup\n  ticketGroups: [TicketGroup!]!\n  tickets: [Ticket!]!\n  title: String!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  updatedAt: DateTime\n  visibility: Visibility!\n}\n\ntype EventBookingsConnection {\n  edges: [EventBookingsConnectionEdge!]!\n  nodes: [Registration!]!\n  pageInfo: PageInfo!\n}\n\ntype EventBookingsConnectionEdge {\n  cursor: String!\n  node: Registration!\n}\n\nunion EventBookingsCsvResult = Error | EventBookingsCsvSuccess | ZodError\n\ntype EventBookingsCsvSuccess {\n  data: String!\n}\n\nenum EventFrequency {\n  Biweekly\n  Monthly\n  Once\n  Weekly\n}\n\ntype EventLogsConnection {\n  edges: [EventLogsConnectionEdge!]!\n  nodes: [LogEntry!]!\n  pageInfo: PageInfo!\n}\n\ntype EventLogsConnectionEdge {\n  cursor: String!\n  node: LogEntry!\n}\n\n\"\"\"\nAn event manager is a user that can scan tickets, and may be able to manage the event\n\"\"\"\ntype EventManager implements Node {\n  canEdit: Boolean!\n  canEditPermissions: Boolean!\n  canVerifyRegistrations: Boolean!\n  event: Event!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  power: EventManagerPowerLevel!\n  user: User!\n}\n\nenum EventManagerPowerLevel {\n  Edit\n  EditPermissions\n  ReadOnly\n  ScanTickets\n}\n\ntype EventsByDay {\n  date: DateTime!\n\n  \"\"\"Évènements qui ont lieu (commencent) à ce jour\"\"\"\n  happening: [Event!]!\n\n  \"\"\"Évènements qui ont leur premier shotgun à ce jour\"\"\"\n  shotgunning: [Event!]!\n}\n\ntype FamilyTree {\n  nesting: String!\n  users: [User!]!\n}\n\nscalar File\n\n\"\"\"Un formulaire\"\"\"\ntype Form implements Node {\n  \"\"\"Nombre de réponses au formulaire\"\"\"\n  answerCount: Int!\n\n  \"\"\"Réponses au formulaire\"\"\"\n  answers(after: String, before: String, first: Int, last: Int): FormAnswersConnection!\n\n  \"\"\"\n  Réponses au formulaire, groupées par utilisateur·ice. Ne contient pas de réponses dont l'utilisateur·ice est inconnu·e.\n  \"\"\"\n  answersByUser(\n    after: String\n    before: String\n    first: Int\n    last: Int\n\n    \"\"\"Recherche par utilisateur·ice\"\"\"\n    q: String\n  ): FormAnswersByUserConnection!\n\n  \"\"\"Export des réponses au formulaires dans un format\"\"\"\n  answersExport(\n    \"\"\"Format à utiliser\"\"\"\n    format: AnswersExportFormats! = CSV\n  ): String!\n\n  \"\"\"Indique si l'utilisateur peut répondre au formulaire.\"\"\"\n  canAnswer: Boolean!\n\n  \"\"\"Indique si l'utilisateur peut éditer le formulaire.\"\"\"\n  canEdit: Boolean!\n\n  \"\"\"Indique si l'utilisateur·ice peut modifier ses réponses au formulaire.\"\"\"\n  canModifyAnswers: Boolean!\n\n  \"\"\"\n  Indique si l'utilisateur peut voir les statistiques des réponses au formulaire.\n  \"\"\"\n  canSeeAnswerStats: Boolean!\n\n  \"\"\"Indique si l'utilisateur peut voir les réponses au formulaire.\"\"\"\n  canSeeAnswers: Boolean!\n\n  \"\"\"\n  Indique si l'utilisateur peut cocher ou décocher les cases à cocher à côté des réponses au formulaire.\n  \"\"\"\n  canSetCheckboxes: Boolean!\n  checkboxesAreEnabled: Boolean!\n\n  \"\"\"Date de fermeture du formulaire.\"\"\"\n  closesAt: DateTime\n\n  \"\"\"Date de création du formulaire\"\"\"\n  createdAt: DateTime!\n\n  \"\"\"Utilisateur ayant créé le formulaire\"\"\"\n  createdBy: User\n\n  \"\"\"Description en Markdown du formulaire.\"\"\"\n  description: String\n\n  \"\"\"Description en HTML du formulaire.\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Événement associé au formulaire\"\"\"\n  event: Event\n\n  \"\"\"Groupe auquel le formulaire est associé\"\"\"\n  group: Group\n\n  \"\"\"Vrai si le formulaire comporte des sections\"\"\"\n  hasSections: Boolean!\n\n  \"\"\"Préfixe de l'identifiant: `form:`\"\"\"\n  id: ID!\n\n  \"\"\"\n  L'URL du Google Sheet des réponses lié à ce formulaire. Voir `createLinkedGoogleSheet` pour créer un Google Sheet lié au formulaire.\n  \"\"\"\n  linkedGoogleSheetUrl: String\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n\n  \"\"\"Identifiant local du formulaire\"\"\"\n  localId: String!\n\n  \"\"\"Réponses de l'utilisateur·ice connecté·e à ce formulaire\"\"\"\n  myAnswers: [Answer!]!\n\n  \"\"\"Date d'ouverture du formulaire.\"\"\"\n  opensAt: DateTime\n\n  \"\"\"\n  Questions du formulaire. Liste de toutes les questions, peut importe la section dans laquelle elles se trouvent.\n  \"\"\"\n  questions(after: String, before: String, first: Int, last: Int): FormQuestionsConnection!\n  searchAnswers(\n    \"\"\"La recherche\"\"\"\n    q: String!\n    similarityCutoff: Float\n  ): [AnswerSearchResult!]!\n\n  \"\"\"Une section du formulaire.\"\"\"\n  section(\n    \"\"\"Identifiant (local ou global) de la section\"\"\"\n    id: String\n  ): FormSection!\n\n  \"\"\"\n  Sections du formulaire. Un formulaire contient toujours au moins une section (sauf s'il n'y a aucune question). Uniquement accessible par celleux qui peuvent modifier le formulaire. Utiliser `nextSection` pour afficher une section dans le but d'y répondre.\n  \"\"\"\n  sections: [FormSection!]!\n  title: String!\n\n  \"\"\"Date de dernière mise à jour du formulaire\"\"\"\n  updatedAt: DateTime!\n\n  \"\"\"Visibilité du formulaire\"\"\"\n  visibility: Visibility!\n}\n\ntype FormAnswersByUserConnection {\n  edges: [FormAnswersByUserConnectionEdge!]!\n  nodes: [AnswersOfUser!]!\n  pageInfo: PageInfo!\n}\n\ntype FormAnswersByUserConnectionEdge {\n  cursor: String!\n  node: AnswersOfUser!\n}\n\ntype FormAnswersConnection {\n  edges: [FormAnswersConnectionEdge!]!\n  nodes: [Answer!]!\n  pageInfo: PageInfo!\n}\n\ntype FormAnswersConnectionEdge {\n  cursor: String!\n  node: Answer!\n}\n\ntype FormQuestionsConnection {\n  edges: [FormQuestionsConnectionEdge!]!\n  nodes: [Question!]!\n  pageInfo: PageInfo!\n}\n\ntype FormQuestionsConnectionEdge {\n  cursor: String!\n  node: Question!\n}\n\ntype FormSearchResult {\n  form: Form!\n  highlightedDescription: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\n\"\"\"\nUne section d'un formulaire. Les sections sont utiles pour séparer les questions en plusieurs parties, dont certaines peuvent être affichées selon des réponses à des questions précédentes\n\"\"\"\ntype FormSection {\n  \"\"\"Réponses à cette section\"\"\"\n  answers(after: String, before: String, first: Int, last: Int): FormSectionAnswersConnection!\n\n  \"\"\"Description en Markdown de la section\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la section\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Formulaire auquel appartient la section\"\"\"\n  form: Form!\n  id: ID!\n\n  \"\"\"Identifiant local de la section du formulaire\"\"\"\n  localId: String!\n\n  \"\"\"\n  Section suivante dans le formulaire, si il y en a une. (Sinon, c'est que c'est la dernière section). Dépend du fait que des sections soit cachées à l'utilisateur (voir `restrictedToGroups`), ou que une répond à une question provoque le passaage à une autre section (voir `goToSection`) \n  \"\"\"\n  nextSection: FormSection\n\n  \"\"\"Ordre de la section dans le formulaire\"\"\"\n  order: Int!\n\n  \"\"\"Questions dans section\"\"\"\n  questions: [Question!]!\n\n  \"\"\"\n  Si non vide, seul·e·s les membres des groupes spécifiés peuvent accéder à cette section. \n  \"\"\"\n  restrictedToGroups: [Group!]!\n\n  \"\"\"Titre de la section\"\"\"\n  title: String!\n}\n\ntype FormSectionAnswersConnection {\n  edges: [FormSectionAnswersConnectionEdge!]!\n  nodes: [Answer!]!\n  pageInfo: PageInfo!\n}\n\ntype FormSectionAnswersConnectionEdge {\n  cursor: String!\n  node: Answer!\n}\n\n\"\"\"\nRequests to become someone's godchild. Gets deleted once the request has been accepted (or denied). godchild is the requester, godparent is the requested.\n\"\"\"\ntype GodparentRequest {\n  createdAt: DateTime!\n  godchild: User!\n  godparent: User!\n  id: ID!\n  updatedAt: DateTime!\n}\n\n\"\"\"A group is a collection of users\"\"\"\ntype Group implements Node & Pictured {\n  address: String!\n\n  \"\"\"All the ancestors of this group, from the current group to the root.\"\"\"\n  ancestors: [Group!]!\n  articles: [Article!]!\n  boardMembers: [GroupMember!]!\n\n  \"\"\"\n  Si l'utilisateur·ice connecté·e peut créer des thèmes au nom de ce groupe\n  \"\"\"\n  canCreateThemes: Boolean!\n\n  \"\"\"\n  Vrai si l'utilisateur·ice connecté·e peut modifier les informations du groupe\n  \"\"\"\n  canEditDetails(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"\n  On peut changer la politique d'adhésion au groupe (inscription libre ou non)\n  \"\"\"\n  canEditJoinPolicy(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"On peut changer les comptes Lydias du groupe\"\"\"\n  canEditLydiaAccounts(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"\n  Vrai si l'utilisateur·ice connecté·e peut modifier les membres du groupe\n  \"\"\"\n  canEditMembers(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut éditer (créer ou modifier) les pages du groupe\n  \"\"\"\n  canEditPages: Boolean!\n\n  \"\"\"On peut changer le groupe parent\"\"\"\n  canEditParent(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"On peut modifier l'AE de rattachement\"\"\"\n  canEditStudentAssociation(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"On peut changer le type de groupe\"\"\"\n  canEditType(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"On peut changer le statut de liste de groupe\"\"\"\n  canEditUnlisted(\n    \"\"\"\n    Lève une erreur avec le message donné si la permission n'est pas accordée\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"L'utilisateur·ice connecté·e peut lister les pages du groupe\"\"\"\n  canListPages: Boolean!\n\n  \"\"\"L'utilisater.ice connecté.e a le droit de mettre à jour roomIsOpen\"\"\"\n  canSetGroupRoomOpenState: Boolean!\n  children: [Group!]!\n  coOrganizedEvents: [Event!]!\n  color: Color\n  createdAt: DateTime!\n  description: String! @deprecated(reason: \"Use `shortDescription` instead\")\n  email: Email\n  events(after: String, before: String, first: Int, last: Int): GroupEventsConnection!\n  familyChildren: [Group!]!\n\n  \"\"\"\n  Helper field to get a whole tree without processing all groups\\nTo be set to the group's id itself for root groups.\n  \"\"\"\n  familyId: ID\n\n  \"\"\"Formulaires associés au groupe\"\"\"\n  forms: [Form!]!\n  groupId: ID!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n\n  \"\"\"L'utilisateur.ice connecté.e est membre de ce groupe\"\"\"\n  isMember: Boolean!\n  ldapUid: String!\n  links: [Link!]!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  longDescription: String!\n  longDescriptionHtml: HTML!\n\n  \"\"\"Comptes Lydia du groupe\"\"\"\n  lydiaAccounts: [LydiaAccount!]!\n  mailingList: String!\n  members: [GroupMember!]!\n\n  \"\"\"Nombre de membres\"\"\"\n  membersCount(\n    \"\"\"\n    Limiter aux membres de certaines promos (pratique par exemple pour avoir le nombre d'actif.ve.s)\n    \"\"\"\n    yearTiers: [Int!]! = []\n  ): Int!\n\n  \"\"\"L'adhésion de l'utilisateur.ice connecté.e à ce groupe\"\"\"\n  membership: GroupMember\n  name: String!\n  ownEvents: [Event!]!\n\n  \"\"\"La page associée au groupe\"\"\"\n  page(\n    \"\"\"\n    Le chemin de la page. Ce n'est pas le chemin complet, mais celui qui est local au groupe. Voir `Page` pour plus d'informations.\n    \"\"\"\n    path: String!\n  ): Page\n\n  \"\"\"Les pages associées au groupe\"\"\"\n  pages(after: String, before: String, first: Int, last: Int): PagesConnection!\n\n  \"\"\"Nombre de pages associées au groupe\"\"\"\n  pagesCount: Int!\n\n  \"\"\"Parent group, from which this group inherits its permissions\"\"\"\n  parent: Group\n  parentId: ID\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n  pictureFile: String!\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  president: GroupMember\n\n  \"\"\"Related clubs\"\"\"\n  related: [Group!]!\n  roomIsOpen: Boolean!\n\n  \"\"\"Family root, only created for performance reasons\"\"\"\n  root: Group\n  secretaries: [GroupMember!]!\n  selfJoinable: Boolean!\n  services: [Service!]!\n\n  \"\"\"Article de la boutique du groupe\"\"\"\n  shopItem(id: LocalID!): ShopItem\n  shopItems(after: String, before: String, first: Int, last: Int): GroupShopItemsConnection!\n  shopOrders: [ShopPayment!]!\n  shortDescription: String!\n  studentAssociation: StudentAssociation!\n  treasurers: [GroupMember!]!\n  type: GroupType!\n  uid: String!\n\n  \"\"\"Le groupe doit être caché des listes de groupes\"\"\"\n  unlisted: Boolean!\n  vicePresidents: [GroupMember!]!\n  website: String!\n}\n\ntype GroupEventsConnection {\n  edges: [GroupEventsConnectionEdge!]!\n  nodes: [Event!]!\n  pageInfo: PageInfo!\n}\n\ntype GroupEventsConnectionEdge {\n  cursor: String!\n  node: Event!\n}\n\nenum GroupJoinPolicy {\n  \"\"\"\n  Seul le bureau (et autres ayant les permissions) peut ajouter des membres\n  \"\"\"\n  Closed\n\n  \"\"\"Tout le monde peut rejoindre le groupe\"\"\"\n  Open\n}\n\n\"\"\"The intermediate model between users and groups\"\"\"\ntype GroupMember {\n  canEditArticles: Boolean!\n  canEditMembers: Boolean!\n  canScanEvents: Boolean!\n  createdAt: DateTime!\n  group: Group!\n  groupId: ID!\n  isDeveloper: Boolean!\n  member: User!\n  memberId: ID!\n  president: Boolean!\n  secretary: Boolean!\n  title: String!\n  treasurer: Boolean!\n  vicePresident: Boolean!\n}\n\n\"\"\"Les champs du profil d'un groupe\"\"\"\ninput GroupProfileInput {\n  color: Color\n  email: Email\n  longDescription: Markdown\n  name: String\n  relatedGroups: [UID!]\n  room: String\n  shortDescription: String\n\n  \"\"\"Supprimer la couleur du groupe\"\"\"\n  unsetColor: Boolean\n\n  \"\"\"Supprimer l’adresse email du groupe\"\"\"\n  unsetEmail: Boolean\n}\n\ntype GroupSearchResult {\n  group: Group!\n  highlightedDescription: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n}\n\ntype GroupShopItemsConnection {\n  edges: [GroupShopItemsConnectionEdge!]!\n  nodes: [ShopItem!]!\n  pageInfo: PageInfo!\n}\n\ntype GroupShopItemsConnectionEdge {\n  cursor: String!\n  node: ShopItem!\n}\n\nenum GroupType {\n  Association\n  Club\n  Group\n  Integration\n  List\n  StudentAssociationSection\n}\n\nscalar HTML\n\nunion HasLinks = Article | Event | Group | Ticket | User\n\n\"\"\"Results of a health self-check\"\"\"\ntype HealthCheck {\n  database: DatabaseHealthCheck!\n  ldap: LdapHealthCheck!\n  mail: MailHealthCheck!\n  redis: RedisHealthCheck!\n}\n\n\"\"\"A Gitlab issue\"\"\"\ntype Issue {\n  body: String!\n  bodyHtml: String!\n  comments: [IssueComment!]!\n  deployedIn: String!\n\n  \"\"\"Expressed from 0 to 1\"\"\"\n  difficulty: Float\n  duplicatedFrom: Int\n\n  \"\"\"Expressed from 0 to 1\"\"\"\n  importance: Float\n  number: Int!\n  state: IssueState!\n\n  \"\"\"The date at which the issue was submitted\"\"\"\n  submittedAt: DateTime!\n  title: String!\n  url: String!\n}\n\n\"\"\"A Gitlab issue comment\"\"\"\ntype IssueComment {\n  \"\"\"The date at which the comment was added\"\"\"\n  addedAt: DateTime!\n  authorAvatarUrl: String!\n  authorGitlabUrl: String!\n  authorName: String!\n  body: String!\n  bodyHtml: String!\n}\n\nenum IssueState {\n  Closed\n  Deployed\n  Open\n}\n\ntype LdapHealthCheck {\n  \"\"\"Whether the LDAP internal client is ready\"\"\"\n  internal: Boolean!\n\n  \"\"\"Whether the LDAP school client is ready\"\"\"\n  school: Boolean!\n}\n\n\"\"\"\nUn lien avec un texte à afficher. Pour changer les liens d'une ressource, voir la mutation `setLinks` (valable pour tout les types implémentant `HasLinks`)\n\"\"\"\ntype Link implements Node {\n  computedValue: String! @deprecated(reason: \"Use `url` instead.\")\n  createdAt: DateTime!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  name: String! @deprecated(reason: \"Use `text` instead.\")\n  rawURL: String!\n  text: String!\n  url: URL\n  value: String! @deprecated(reason: \"Use `rawURL` instead.\")\n}\n\ninput LinkInput {\n  \"\"\"Texte à afficher pour le lien\"\"\"\n  text: String!\n  url: LooseURL!\n}\n\n\"\"\"\nUn identifiant, dont le préfixe (par exemple, `a:` dans `a:627dgfd87ccc`) est optionnel.\n\"\"\"\nscalar LocalID\n\n\"\"\"A log entry is a log of an action that happened on the website\"\"\"\ntype LogEntry implements Node {\n  action: String!\n  area: String!\n  happenedAt: DateTime!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  message: String!\n  target: String\n  user: User\n}\n\nenum LogoSourceType {\n  ExternalLink\n  GroupLogo\n  Icon\n  InternalLink\n}\n\n\"\"\"\nUne adresse internet (URL). Si le protocole n'est pas spécifié, https:// sera ajouté (par exemple, net7.dev est valide en entrée et est interprété comme https://net7.dev). Les éventuels espaces autours de l'URL sont ignorés. Les protocoles autorisés sont: http:, https:, mailto:, tel:\n\"\"\"\nscalar LooseURL\n\n\"\"\"A Lydia account\"\"\"\ntype LydiaAccount implements Node {\n  events: [Event!]!\n  group: Group\n  groupId: ID\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  name: String!\n  studentAssociation: StudentAssociation\n  studentAssociationId: ID\n}\n\ntype MailHealthCheck {\n  \"\"\"Whether the SMTP client is ready\"\"\"\n  smtp: Boolean!\n}\n\n\"\"\"\nUne filière (division de premier niveau du cursus scolaire d'une école). Peut être reliée à plusieurs écoles\n\"\"\"\ntype Major implements Pictured {\n  \"\"\"Ancienne filière n'existant plus dans les cursus actuels\"\"\"\n  discontinued: Boolean!\n  fullName: String!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n  ldapSchool: School\n  minors: [Minor!]!\n  name: String!\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n\n  \"\"\"Le nom du fichier de l'image\"\"\"\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  schools: [School!]!\n  shortName: String! @deprecated(reason: \"Use 'name' instead\")\n  subjects(forApprentices: Boolean, yearTier: Int): [Subject!]!\n  uid: String!\n}\n\ninput ManagerOfEventInput {\n  canEdit: Boolean!\n  canEditPermissions: Boolean!\n  canVerifyRegistrations: Boolean!\n  userUid: String!\n}\n\n\"\"\"Du texte au format Markdown. (https://commonmark.org/help/)\"\"\"\nscalar Markdown\n\ntype Minor implements Node {\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  majors: [Major!]!\n  name: String!\n  shortName: String!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  subjects: [Subject!]!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  users: [User!]!\n  yearTier: Int!\n}\n\ntype Mutation {\n  acceptRegistration(email: String!): MutationAcceptRegistrationResult!\n\n  \"\"\"Marks the user as having seen the given version's changelog.\"\"\"\n  acknowledgeChangelog(version: String! = \"dev\"): Boolean!\n\n  \"\"\"\n  Ajouter un fichier à une page. Permet notamment d'ajouter des images pour s'en servir dans le contenu de la page.\n  \"\"\"\n  addFileToPage(file: File!, page: ID!): MutationAddFileToPageResult!\n  addGroupMember(groupUid: String!, title: String!, uid: String!): MutationAddGroupMemberResult!\n\n  \"\"\"Ajouter des liens à une ressource implémentant `HasLinks`\"\"\"\n  addLinks(\n    \"\"\"\n    Que faire pour un lien si la ressource en possède déjà un autre avec la même URL\n    \"\"\"\n    duplicates: DuplicateLinksAction! = Replace\n\n    \"\"\"ID complet de la ressource (AVEC le préfixe)\"\"\"\n    id: ID!\n    links: [LinkInput!]!\n  ): MutationAddLinksResult!\n\n  \"\"\"Répondre à une question de type `FileUpload` en uploadant un fichier\"\"\"\n  answerFileQuestion(\n    \"\"\"Fichier à uploader\"\"\"\n    answer: File!\n\n    \"\"\"ID de la question à laquelle répondre\"\"\"\n    question: ID!\n  ): AnswerFileUpload!\n  answerFormSection(\n    answers: [AnswerInput!]!\n\n    \"\"\"ID de la section du formulaire\"\"\"\n    section: ID!\n  ): MutationAnswerFormSectionResult!\n\n  \"\"\"\n  Deletes a pending godparent request. If accept is true, the request will be accepted (and the godparent of the requester will be changed), otherwise it will be rejected (the godparent of the requester won't be changed)\n  \"\"\"\n  answerGodparentRequest(accept: Boolean!, id: LocalID!): MutationAnswerGodparentRequestResult!\n\n  \"\"\"\n  Bannir un·e utilisateur·rice d'un événement. Iel ne pourra plus prendre de place (que ce soit pour iel ou pour une autre personne, dans le cas des billets à parrainages)\n  \"\"\"\n  banFromEvent(id: LocalID!, user: UID!): MutationBanFromEventResult!\n\n  \"\"\"\n  Bloquer un thème pour empêcher qu'il soit automatiquement déployé à l'utilisateur·ice connecté·e\n  \"\"\"\n  blockTheme(\n    \"\"\"ID du thème\"\"\"\n    id: LocalID!\n  ): Theme!\n\n  \"\"\"Réserver une place sur un évènement\"\"\"\n  bookEvent(\n    \"\"\"\n    Adresse mail à laquelle envoyer le billet. Nécéssaire quand on est pas connecté.e\n    \"\"\"\n    authorEmail: Email\n\n    \"\"\"\n    Nom de la personne pour qui on réserve la place. Préférer churrosBeneficiary quand c'est possible\n    \"\"\"\n    beneficiary: String\n\n    \"\"\"Identifiant (@) de la personne qui recevra la place\"\"\"\n    churrosBeneficiary: UID\n    ticket: LocalID!\n  ): MutationBookEventResult!\n\n  \"\"\"\n  Épingle une page pour en faire un accès rapide. Si la page est déjà épinglée, ne fait rien. Voir `unpin` pour retirer une page épinglée.\n  \"\"\"\n  bookmark(\n    \"\"\"Chemin de la page à épingler\"\"\"\n    path: String!\n  ): Bookmark!\n  cancelBooking(\n    \"\"\"Code de réservation\"\"\"\n    code: String!\n  ): MutationCancelBookingResult!\n  cancelPendingContribution(optionId: ID!): MutationCancelPendingContributionResult!\n\n  \"\"\"Changer le groupe organisateur (principal) de l'événement\"\"\"\n  changeEventOrganizer(group: UID!, id: LocalID!): MutationChangeEventOrganizerResult!\n  checkIfBookingIsPaid(code: String!): Boolean!\n  claimPromotionCode(code: String!): Boolean!\n  completeSignup(token: String!): SignupCompletionResult!\n  contribute(optionId: ID!, phone: String!): MutationContributeResult!\n\n  \"\"\"\n  Crée un pass Apple Wallet pour une réservation donnée. Renvoie l'URL à utiliser pour ajouter le pass à Apple Wallet.\n  \"\"\"\n  createAppleWalletPass(\n    \"\"\"Code de la réservation\"\"\"\n    code: String!\n  ): MutationCreateAppleWalletPassResult!\n  createBot(\n    \"\"\"UID de la filière\"\"\"\n    major: String\n\n    \"\"\"Nom du compte bot\"\"\"\n    name: String!\n\n    \"\"\"Mot de passe du compte bot\"\"\"\n    password: String!\n\n    \"\"\"UID du compte bot\"\"\"\n    uid: String!\n  ): User!\n\n  \"\"\"Créer un nouvel évènement\"\"\"\n  createEvent(\n    \"\"\"\n    Dates de l'évènement. Si non précisé, l'évènement est créé sans dates, ce qui l'empêche d'avoir une visibilité autre que `Private` ou `Unlisted`.\n    \"\"\"\n    dates: DateRangeInput\n\n    \"\"\"Groupe organisateur principal\"\"\"\n    group: UID!\n    title: ShortString!\n  ): MutationCreateEventResult!\n  createGitlabIssue(description: String!, isBug: Boolean!, title: String!): Int!\n\n  \"\"\"\n  Créer un pass Google Wallet pour une réservation donnée. Renvoie l'URL a utiliser pour ajouter le pass à Google Wallet.\n  \"\"\"\n  createGoogleWalletPass(\n    \"\"\"Code de la réservation\"\"\"\n    code: String!\n  ): MutationCreateGoogleWalletPassResult!\n\n  \"\"\"Créer un nouveau groupe\"\"\"\n  createGroup(\n    name: String!\n\n    \"\"\"AE de rattachement du groupe\"\"\"\n    studentAssociation: UID!\n    type: GroupType! = Group\n    uid: UID!\n  ): MutationCreateGroupResult!\n\n  \"\"\"\n  Créer un token d'accès pour un groupe. Les requêtes effectuées avec ce token auront des permissions différentes, et permettent d'effectuer certaines actions en tant qu'un groupe au lieu d'une personne\n  \"\"\"\n  createGroupAccessToken(group: UID!): MutationCreateGroupAccessTokenResult!\n\n  \"\"\"\n  Crée une feuille Google Sheets (si elle n'existe pas déjà) qui contiendra les réponses au formulaire (et sera mise à jour automatiquement). Renvoie l'URL de la feuille Google Sheets.\n  \"\"\"\n  createLinkedGoogleSheet(\n    \"\"\"L'identifiant du formulaire\"\"\"\n    form: ID!\n  ): String!\n\n  \"\"\"\n  Démarre une procédure de réinitialisation de mot de passe pour l'utilisateur associé à l'adresse e-mail ou l'uid fournie. Renvoie `true` même si l'utilisateur n'existe pas.\n  \"\"\"\n  createPasswordReset(email: String!): MutationCreatePasswordResetResult!\n\n  \"\"\"Créer un post en privé\"\"\"\n  createPost(body: String! = \"\", event: LocalID!, group: UID!, title: String! = \"\"): MutationCreatePostResult!\n\n  \"\"\"Créer un lien d'inscription rapide\"\"\"\n  createQuickSignup(\n    \"\"\"UID de l'école\"\"\"\n    school: String!\n\n    \"\"\"Date de validité du lien\"\"\"\n    validUntil: DateTime!\n  ): QuickSignup!\n\n  \"\"\"Créer un nouveau billet sur un évènement existant\"\"\"\n  createTicket(\n    event: LocalID!\n\n    \"\"\"Groupe de billet dans lequel mettre ce billet\"\"\"\n    group: LocalID\n    name: String\n    shotgun: DateRangeInput!\n  ): MutationCreateTicketResult!\n  deleteAnnouncement(id: ID!): Boolean!\n  deleteArticle(id: ID!): Boolean!\n  deleteArticlePicture(id: ID!): Boolean!\n  deleteBarWeek(id: ID!): Boolean!\n  deleteComment(id: ID!): Comment!\n\n  \"\"\"Supprimer une cotisation\"\"\"\n  deleteContribution(option: LocalID!, user: String!): MutationDeleteContributionResult!\n  deleteDocument(id: ID!): Boolean!\n  deleteDocumentFile(documentId: ID!, filename: String!): Boolean!\n  deleteEvent(id: LocalID!): MutationDeleteEventResult!\n  deleteEventManager(eventId: ID!, user: String!): Boolean! @deprecated(reason: \"Use 'removeEventManager' instead\")\n  deleteEventPicture(id: ID!): Event!\n  deleteGodchild(child: UID!, parent: UID!): MutationDeleteGodchildResult!\n\n  \"\"\"\n  Supprime le parrain ou la marraine, que ce soit une demande de parrainage en cours ou simplement un·e parrain/marraine existant·e. Renvoie lea fillo·t·e\n  \"\"\"\n  deleteGodparent(child: UID!, parent: UID!): MutationDeleteGodparentResult!\n  deleteGroup(uid: String!): Boolean!\n  deleteGroupMember(groupId: ID!, memberId: ID!): Boolean!\n  deleteGroupPicture(dark: Boolean!, uid: String!): Boolean! @deprecated(reason: \"Use setPicture instead\")\n  deleteItemPicture(groupUid: String!, itemId: String!, pictureId: String!): Boolean!\n\n  \"\"\"Supprimer un lien existant\"\"\"\n  deleteLink(id: LocalID!): MutationDeleteLinkResult!\n\n  \"\"\"\n  Supprime une page existante. On peut renseigner l'identifiant de la page ou son chemin ainsi que son groupe ou AE d'appartenance.\n  \"\"\"\n  deletePage(\n    \"\"\"L'UID du groupe auquel la page appartient\"\"\"\n    group: String\n\n    \"\"\"L'identifiant de la page à supprimer\"\"\"\n    id: ID\n\n    \"\"\"Le chemin de la page à supprimer\"\"\"\n    path: String\n\n    \"\"\"L'UID de l'AE à laquelle la page appartient\"\"\"\n    studentAssociation: String\n  ): MutationDeletePageResult!\n  deleteQuickSignup(code: String!): QuickSignup!\n  deleteReaction(articleId: ID, commentId: ID, documentId: ID, emoji: String!, eventId: ID): Boolean!\n  deleteSchoolPicture(id: String!): String!\n  deleteShopItem(groupUid: String!, itemId: ID!): MutationDeleteShopItemResult!\n  deleteShopOption(optionIds: [String!]!): Boolean!\n  deleteTicket(\n    \"\"\"Supprimer le billet même s'il existe des réservations\"\"\"\n    force: Boolean! = false\n    id: LocalID!\n  ): MutationDeleteTicketResult!\n  deleteTicketGroup(id: LocalID!): MutationDeleteTicketGroupResult!\n  deleteToken(id: ID!): Boolean!\n  deleteUserPicture(uid: String!): Boolean!\n  finishPaypalRegistrationPayment(orderId: String!): MutationFinishPaypalRegistrationPaymentResult!\n  kioskReload(\n    \"\"\"\n    UID de l'AE sur laquelle on veut indiquer que les kiosques concernés doivent être re-chargés\n    \"\"\"\n    studentAssociation: String!\n  ): Boolean!\n\n  \"\"\"Logs a user in and returns a session token.\"\"\"\n  login(clientId: String, email: String!, password: String!): MutationLoginResult!\n\n  \"\"\"Logs a user out and invalidates the session token.\"\"\"\n  logout: Boolean!\n\n  \"\"\"\n  Envoie une copie des réponses de l'utilisateur·ice connecté·e à ce formulaire par email. Renvoie l'adresse mail à laquelle les réponses ont été envoyées.\n  \"\"\"\n  mailFormAnswers(\n    \"\"\"ID du formulaire\"\"\"\n    formId: ID!\n  ): MutationMailFormAnswersResult!\n\n  \"\"\"Marquer une réservation comme payée\"\"\"\n  markBookingAsPaid(\n    \"\"\"Code de la réservation\"\"\"\n    code: String!\n\n    \"\"\"Aussi marquer la réservation comme vérifiée (scannée)\"\"\"\n    verify: Boolean\n  ): MutationMarkBookingAsPaidResult!\n\n  \"\"\"Marquer une cotisation comme payée.\"\"\"\n  markContributionAsPaid(\n    \"\"\"\n    Créer la cotisation si elle n'existe pas (et immédiatement la marquer comme payée)\n    \"\"\"\n    create: Boolean! = false\n    option: LocalID!\n    user: UID!\n  ): MutationMarkContributionAsPaidResult!\n  mergeDocuments(from: [ID!]!, into: ID!): Document!\n  opposeRegistration(id: ID!): MutationOpposeRegistrationResult!\n  paidShopPayment(paymentMethod: PaymentMethod, phone: String, shopPaymentId: ID!): MutationPaidShopPaymentResult!\n  payBooking(\n    \"\"\"\n    Montant que l'on souhaite payer. Par défaut, le prix du billet. Peut être supérieur si l'on souhaite payer plus\n    \"\"\"\n    amount: Float\n\n    \"\"\"Code de réservation\"\"\"\n    code: String!\n\n    \"\"\"\n    URL ou chemin où renvoyer l'utilisateur.ice après confirmation du paiement. Sert par exemple pour l'URL de la notification de confirmation de paiement de la part de Lydia.\n    \"\"\"\n    paidCallback: String\n    paymentMethod: PaymentMethod\n    phone: String\n  ): MutationPayBookingResult!\n  react(\n    emoji: String!\n\n    \"\"\"La ressource à laquelle réagir. ID global, avec préfixe.\"\"\"\n    target: ID!\n  ): Reactable!\n  refuseRegistration(email: String!, reason: String!): Boolean!\n\n  \"\"\"Enregistrer un token OAuth2 Google pour l'utilisateur connecté.\"\"\"\n  registerGoogleCredential(\n    \"\"\"Le code d'authorisation\"\"\"\n    code: String!\n  ): MutationRegisterGoogleCredentialResult!\n\n  \"\"\"Enlever un manager d'un événement\"\"\"\n  removeEventManager(event: LocalID!, user: UID!): MutationRemoveEventManagerResult!\n\n  \"\"\"Supprimer un fichier d'une page.\"\"\"\n  removeFileFromPage(filename: String!, page: ID!): MutationRemoveFileFromPageResult!\n  renameSession(id: ID!, name: String!): Boolean!\n  requestEmailChange(\n    \"\"\"\n    URL vers laquelle faire pointer le lien de validation de la nouvelle adresse email. [token] sera remplacé par le token d'activation.\n    \"\"\"\n    callbackURL: URL!\n    email: Email!\n  ): MutationRequestEmailChangeResult!\n  resetPassword(disconnectAll: Boolean!, newPassword: String!, oldPassword: String!, uid: String!): MutationResetPasswordResult!\n\n  \"\"\"\n  Sauvegarder le numéro de téléphone pour les paiements Lydia de l'utilisateur.ice\n  \"\"\"\n  saveLydiaPhoneNumber(phoneNumber: String!): MutationSaveLydiaPhoneNumberResult!\n  selfJoinGroup(uid: UID!): MutationSelfJoinGroupResult!\n\n  \"\"\"\n  Envoie une notification à l'utilisateur connecté. Limité à une notification par heure. Si l'utilisateur a désactivé les notifications de type “Autres” pour le groupe responsable du [client OAuth](/oauth) faisant la requête, la notification ne lui sera pas envoyée.\n  \"\"\"\n  sendNotification(\n    \"\"\"Corps de la notification.\"\"\"\n    body: String!\n\n    \"\"\"\n    Titre de la notification. Sera préfixé par “[Nom de l'application]” quand la mutation est appelée par un [client OAuth](/oauth).\n    \"\"\"\n    title: String!\n  ): Boolean!\n  setDocumentFileIsSolution(documentId: ID!, filename: String!, isSolution: Boolean!): Boolean!\n\n  \"\"\"Définir les promotions applicables pour cet évènement.\"\"\"\n  setEventApplicableOffers(event: LocalID!, offers: [PromotionType!]!): MutationSetEventApplicableOffersResult!\n  setEventBeneficiary(\n    event: LocalID!\n\n    \"\"\"\n    Identifiant du compte Lydia. Null pour enlever le bénéficiaire de l'évènement\n    \"\"\"\n    lydiaAccount: LocalID\n  ): MutationSetEventBeneficiaryResult!\n\n  \"\"\"Changer les groupes co-organisateurs d'un événement\"\"\"\n  setEventCoOrganizers(coOrganizers: [UID!]!, id: LocalID!): MutationSetEventCoOrganizersResult!\n\n  \"\"\"Définir les dates d'un évènement\"\"\"\n  setEventDates(\n    \"\"\"Dates de l'évènement. Null pour supprimer les dates\"\"\"\n    dates: DateRangeInput\n    id: LocalID!\n  ): MutationSetEventDatesResult!\n\n  \"\"\"\n  Changer la visibilité d'un événement. Un évènement dont les dates ne sont pas encore déclarées ne peut pas avoir une visiblité autre que Unlisted ou Private.\n  \"\"\"\n  setEventVisibility(id: LocalID!, visibility: Visibility!): MutationSetEventVisibilityResult!\n\n  \"\"\"\n  Coche ou décoche la case à cocher à côté des réponses à un formulaire pour un·e utilisateur·ice.\n  \"\"\"\n  setFormAnswersCheckbox(\n    \"\"\"Vrai pour cocher la case, faux pour la décocher\"\"\"\n    checked: Boolean!\n\n    \"\"\"L'ID du formulaire\"\"\"\n    form: String!\n\n    \"\"\"ID de l'utilisateur·ice\"\"\"\n    userId: ID!\n  ): Form!\n\n  \"\"\"Changer si la salle d'un groupe est fermée ou ouverte\"\"\"\n  setGoupRoomOpenState(\n    \"\"\"L'uid du groupe\"\"\"\n    group: UID!\n\n    \"\"\"Vrai si on veut indiquer que le local est maintenant ouvert \"\"\"\n    open: Boolean!\n  ): Group!\n\n  \"\"\"Définir comment l'on peut rejoindre un groupe\"\"\"\n  setGroupJoinPolicy(policy: GroupJoinPolicy!, uid: UID!): MutationSetGroupJoinPolicyResult!\n\n  \"\"\"Changer l'AE liée à un groupe\"\"\"\n  setGroupStudentAssociation(group: UID!, studentAssociation: UID!): MutationSetGroupStudentAssociationResult!\n\n  \"\"\"Changer le type d'un groupe\"\"\"\n  setGroupType(\n    type: GroupType\n    uid: UID!\n\n    \"\"\"Si le groupe doit être caché des listes de groupes\"\"\"\n    unlisted: Boolean\n  ): MutationSetGroupTypeResult!\n\n  \"\"\"Changer le groupe parent d'un groupe\"\"\"\n  setParentGroup(\n    child: UID!\n\n    \"\"\"Le groupe parent. Null pour déconnecter d'un groupe parent\"\"\"\n    parent: UID\n  ): MutationSetParentGroupResult!\n  setPicture(\n    \"\"\"Le fichier de l'image. Si null, l'image sera supprimée.\"\"\"\n    file: File\n\n    \"\"\"Identifiant global de la resource sur laquelle on veut changer l'image\"\"\"\n    resource: ID!\n\n    \"\"\"\n    Pour quelle variante de thème changer l'image. Voir `Pictured.hasSeparateDarkPicture`.\n    \"\"\"\n    variant: ThemeVariant! = Light\n  ): MutationSetPictureResult!\n\n  \"\"\"Changer la valeur d'une variable d'un thème\"\"\"\n  setThemeValue(\n    \"\"\"ID du thème\"\"\"\n    theme: LocalID!\n\n    \"\"\"Valeur à utiliser. Doit être une valeur CSS valide\"\"\"\n    value: String!\n    variable: ThemeVariable!\n\n    \"\"\"Variante du thème\"\"\"\n    variant: ThemeVariant!\n  ): Theme!\n\n  \"\"\"\n  Changer la visibilité d'un thème. Voir `Theme.canSetVisibility` pour déterminer si l'utilisateur·ice connecté·e peut changer la visibilité d'un thème à une certaine valeur\n  \"\"\"\n  setThemeVisibility(\n    \"\"\"ID du thème\"\"\"\n    theme: LocalID!\n\n    \"\"\"Visibilité à utiliser\"\"\"\n    visibility: Visibility!\n  ): Theme!\n\n  \"\"\"Définir le groupe d'un billet\"\"\"\n  setTicketGroup(\n    \"\"\"\n    Le groupe de billet dans lequel mettre ce billet. Null pour le retirer de tout groupe.\n    \"\"\"\n    group: LocalID\n    ticket: LocalID!\n  ): MutationSetTicketGroupResult!\n  startSignup(\n    email: Email!\n\n    \"\"\"Prénom\"\"\"\n    firstName: String!\n\n    \"\"\"Promo de la personne\"\"\"\n    graduationYear: Int!\n\n    \"\"\"Nom de famille\"\"\"\n    lastName: String!\n\n    \"\"\"\n    Template d'URL à utliser pour le lien de validation d'adresse e-mail envoyé. [token] est remplacé par le token de validation dans l'URL donnée. La page à cette URL doit appeler Mutation.finishSignup.\n    \"\"\"\n    mailVerificationCallbackURL: URL!\n\n    \"\"\"Filière à laquelle la personne se déclare étudiant.e\"\"\"\n    major: UID\n\n    \"\"\"Mot de passe\"\"\"\n    password: String!\n\n    \"\"\"Confirmation du mot de passe\"\"\"\n    passwordConfirmation: String!\n\n    \"\"\"\n    Code d'inscription rapide, pour s'inscrire sans mail étudiant et sans validation manuelle. Voir QuickSignupType.\n    \"\"\"\n    quickSignupCode: String\n  ): MutationStartSignupResult!\n  subscribeToNotifications(endpoint: String!, expiresAt: DateTime, keys: NotificationSubscriptionKeysInput!, name: String!): MutationSubscribeToNotificationsResult!\n  syncUserLdap(uid: String!): Boolean!\n  testNotification(subscriptionEndpoint: String!): Boolean!\n  toggleReaction(articleId: ID, commentId: ID, documentId: ID, emoji: String!, eventId: ID): Reactable!\n\n  \"\"\"Marque une ressource comme partagée par l'utilisateur·ice connecté·e\"\"\"\n  trackShare(\n    \"\"\"ID (global) de la ressource\"\"\"\n    resource: ID!\n  ): Boolean!\n\n  \"\"\"\n  Débannir un·e utilisateur·rice d'un événement. Si l'utilisateur·ice n'était pas banni·e, cette mutation n'aura aucun effet (mais ne fait pas d'erreur).\n  \"\"\"\n  unbanFromEvent(id: LocalID!, user: UID!): MutationUnbanFromEventResult!\n\n  \"\"\"Enlève une page de l'accès rapide\"\"\"\n  unbookmark(\n    \"\"\"Chemin de la page à désépingler\"\"\"\n    path: String!\n  ): Bookmark\n  unreact(\n    emoji: String!\n\n    \"\"\"La ressource à laquelle enlever la réaction. ID global, avec préfixe.\"\"\"\n    target: ID!\n  ): Reactable!\n  unsubscribeFromNotifications(endpoint: String!): MutationUnsubscribeFromNotificationsResult!\n  updateArticlePicture(file: File!, id: ID!): String!\n\n  \"\"\"Mettre à jour les informations de base d'un évènement\"\"\"\n  updateEvent(\n    \"\"\"\n    Liste d'identifiants de promotions applicables à tout les billets de l'évènement\n    \"\"\"\n    applicableOffers: [PromotionType!]\n\n    \"\"\"E-mail de contact de l'orga de l'évènement\"\"\"\n    contactMail: String\n    description: Markdown\n\n    \"\"\"Capacité globale de l'évènement\"\"\"\n    globalCapacity: Capacity\n    id: LocalID!\n\n    \"\"\"Vrai si l'évènement doit apparaître dans le mode kiosque\"\"\"\n    includeInKiosk: Boolean\n\n    \"\"\"Lieu de l'évènement\"\"\"\n    location: String\n\n    \"\"\"Afficher le nombre de places restantes sur les billets\"\"\"\n    showPlacesLeft: Boolean = true\n\n    \"\"\"Titre de l'évènement\"\"\"\n    title: String\n  ): MutationUpdateEventResult!\n  updateEventPicture(file: File!, id: ID!): Event!\n\n  \"\"\"Changer les caractéristiques de récurrence d'un évènement\"\"\"\n  updateEventRecurrence(\n    \"\"\"Fréquence de récurrence de l'évènement\"\"\"\n    frequency: EventFrequency! = Once\n\n    \"\"\"Identifiant de l'évènement\"\"\"\n    id: LocalID!\n\n    \"\"\"\n    Date de fin de la récurrence. Si non précisé, ne modifie pas la date. Il faut passer `frequency` à `Once` pour supprimer la date de fin de récurrence\n    \"\"\"\n    recurringUntil: DateTime\n  ): MutationUpdateEventRecurrenceResult!\n  updateGroupPicture(dark: Boolean!, file: File!, uid: String!): String! @deprecated(reason: \"Use setPicture instead\")\n\n  \"\"\"Mettre à jour le profil d'un groupe\"\"\"\n  updateGroupProfile(profile: GroupProfileInput!, uid: UID!): MutationUpdateGroupProfileResult!\n  updateItemPicture(file: File!, groupUid: String!, itemId: String!): Picture!\n\n  \"\"\"Mettre à jour un lien existant\"\"\"\n  updateLink(\n    id: LocalID!\n\n    \"\"\"Texte à afficher pour le lien\"\"\"\n    text: String\n    url: LooseURL\n  ): MutationUpdateLinkResult!\n  updateNotificationSettings(enabledChannels: [NotificationChannel!]!, uid: String!): [NotificationChannel!]!\n  updateSchool(address: String, aliasMailDomains: [String!]!, description: String, name: String!, studentMailDomain: String!, uid: String!): School!\n  updateSchoolPicture(file: File!, id: String!): String!\n  updateStudentAssociationPicture(file: File!, uid: String!): String!\n  updateSubjectsExamDates: Boolean!\n\n  \"\"\"Mettre à jour un billet\"\"\"\n  updateTicket(\n    \"\"\"Moyens de paiement acceptés pour ce billet\"\"\"\n    allowedPaymentMethods: [PaymentMethod!]\n    capacity: Capacity\n    countingPolicy: TicketCountingPolicy! = OnBooked\n\n    \"\"\"\n    Nombre maximum de parrainages par billet (0 pour désactiver les parrainages)\n    \"\"\"\n    godsonLimit: Int\n\n    \"\"\"Prix maximum en euros du billet\"\"\"\n    maximumPrice: Float\n\n    \"\"\"Prix minimum en euros du billet\"\"\"\n    minimumPrice: Float\n    name: String\n\n    \"\"\"Prix en euros du billet. Met à jour les prix minimum et maximum\"\"\"\n    price: Float\n    shotgun: DateRangeInput\n    ticket: LocalID!\n  ): MutationUpdateTicketResult!\n  updateTicketConstraints(\n    \"\"\"\n    Contraintes pour limiter la réservation du billet. Les différentes contraintes sont appliquées avec un “ET logique”: il faut que chacune des contraintes spécificées soient remplies par la personne voulant réserver.\n    \"\"\"\n    constraints: TicketConstraintsInput!\n    ticket: LocalID!\n  ): MutationUpdateTicketConstraintsResult!\n  updateUser(\n    address: String!\n    apprentice: Boolean!\n    birthday: DateTime\n    cededImageRightsToTVn7: Boolean!\n    contributesWith: [ID!]\n    description: String!\n    email: String!\n    firstName: String!\n\n    \"\"\"\n    An empty string removes the godparent. Passing null (or undefined) does not update the godparent. An uid sets the godparent to that uid.\n    \"\"\"\n    godparentUid: String\n    graduationYear: Int\n    lastName: String!\n    majorId: ID\n    minorId: ID\n    nickname: String!\n    otherEmails: [String!]!\n    phone: String!\n    uid: UID!\n  ): MutationUpdateUserResult! @deprecated(reason: \"Use `updateUserProfile`, `requestEmailChange` and other `updateUser*` mutations instead\")\n  updateUserCandidate(\n    birthday: DateTime\n    cededImageRightsToTVn7: Boolean!\n    email: String!\n    firstName: String!\n    graduationYear: Int!\n    lastName: String!\n    majorId: ID!\n\n    \"\"\"\n    Inscrire définitivement l'utilisateur·ice si vrai. Si faux, mettre à jour la demande d'inscription sans créer de compte\n    \"\"\"\n    register: Boolean!\n\n    \"\"\"Le @ souhaité\"\"\"\n    uid: UID!\n  ): MutationUpdateUserCandidateResult!\n\n  \"\"\"Met à jour les infos sur le cursus scolaire de l'utilisateur.ice\"\"\"\n  updateUserCurriculum(\n    apprentice: Boolean\n\n    \"\"\"\n    Vrai pour déconnecter la personne de sa filière (et donc faire du compte un compte exté)\n    \"\"\"\n    external: Boolean\n    graduationYear: PositiveInt\n    major: UID\n    uid: UID!\n  ): MutationUpdateUserCurriculumResult!\n  updateUserPermissions(adminOf: [UID!], canAccessDocuments: Boolean, canEditGroupsOf: [UID!], user: UID!): MutationUpdateUserPermissionsResult!\n  updateUserPicture(file: File!, uid: String!): String!\n\n  \"\"\"Met à jour le profil de l'utilisateur\"\"\"\n  updateUserProfile(profile: UserProfileInput!, uid: UID!): MutationUpdateUserProfileResult!\n  uploadDocumentFile(documentId: ID!, file: File!, solution: Boolean!): String!\n  upsertAnnouncement(body: String!, endsAt: DateTime!, id: ID, startsAt: DateTime!, title: String!, warning: Boolean!): MutationUpsertAnnouncementResult!\n\n  \"\"\"Crée ou met à jour un post\"\"\"\n  upsertArticle(body: String!, event: ID, group: UID!, id: ID, publishedAt: DateTime, title: String!, visibility: Visibility!): MutationUpsertArticleResult!\n  upsertBarWeek(description: String!, endsAt: DateTime!, groupsUids: [String!]!, id: ID, startsAt: DateTime!): MutationUpsertBarWeekResult!\n  upsertComment(body: String!, id: ID, inReplyToId: ID, resourceId: ID): Comment!\n  upsertDocument(description: String!, id: ID, schoolYear: Int!, subject: ID!, title: String!, type: DocumentType!): MutationUpsertDocumentResult!\n  upsertEventManager(event: LocalID!, powerlevel: EventManagerPowerLevel!, user: UID!): MutationUpsertEventManagerResult!\n\n  \"\"\"\n  Crée ou met à jour un formulaire. À la création, une section de formulaire vide sans titre est automatiquement créée. C'est pratique pour les formulaires sans section.\n  \"\"\"\n  upsertForm(input: MutationUpsertFormInput!): Form!\n\n  \"\"\"Crée ou met à jour une section de formulaire.\"\"\"\n  upsertFormSection(input: MutationUpsertFormSectionInput!): FormSection!\n  upsertGodparentRequest(godchildUid: String!, godparentUid: String!, id: ID): MutationUpsertGodparentRequestResult!\n  upsertGroup(input: UpsertGroupInput!, uid: UID): MutationUpsertGroupResult! @deprecated(reason: \"Mutation séparée en plusieurs mutations plus spécifiques. Voir la documentation du module groups\")\n  upsertGroupMember(canEditArticles: Boolean!, canEditMembers: Boolean!, canScanEvents: Boolean!, groupId: ID!, isDeveloper: Boolean!, memberId: ID!, president: Boolean!, secretary: Boolean!, title: String!, treasurer: Boolean!, vicePresident: Boolean!): GroupMember!\n  upsertLydiaAccount(groupUid: String!, id: ID, name: String!, privateToken: String!, vendorToken: String!): LydiaAccount!\n  upsertManagersOfEvent(eventId: ID!, managers: [ManagerOfEventInput!]!): [EventManager!]! @deprecated(reason: \"Use 'upsertEventManager' and 'removeEventManager' instead\")\n\n  \"\"\"Crée ou met à jour une page.\"\"\"\n  upsertPage(\n    \"\"\"Le corps de la page. Supporte le markdown\"\"\"\n    body: String!\n\n    \"\"\"L'UID du groupe auquel la page appartient\"\"\"\n    group: String\n\n    \"\"\"\n    Le chemin de la page. Si la page existe déjà, elle sera mise à jour. Sinon, une nouvelle page sera créée. Ne peut contenir que des caractères alphanumériques, des tirets, des tirets du bas et des slashes. Fait pour être utilisé dans des URLs.\n    \"\"\"\n    path: String!\n\n    \"\"\"L'UID de l'AE à laquelle la page appartient\"\"\"\n    studentAssociation: String\n\n    \"\"\"Le titre de la page\"\"\"\n    title: String!\n  ): MutationUpsertPageResult!\n\n  \"\"\"Crée ou met à jour une question.\"\"\"\n  upsertQuestion(input: MutationUpsertQuestionInput!): Question!\n  upsertReaction(articleId: ID, commentId: ID, documentId: ID, emoji: String!, eventId: ID, id: ID): Int! @deprecated(reason: \"Use 'react' instead\")\n  upsertRegistration(authorEmail: String, beneficiary: String, id: ID, paid: Boolean!, paymentMethod: PaymentMethod, ticketId: ID!): MutationUpsertRegistrationResult! @deprecated(reason: \"Use bookEvent instead\")\n  upsertService(description: String!, groupUid: String, id: ID, importance: Int = 0, logo: String!, logoSourceType: LogoSourceType!, name: String!, schoolUid: String, studentAssociationUid: String, url: String!): MutationUpsertServiceResult!\n  upsertShopItem(description: String!, endsAt: DateTime, groupUid: String!, id: ID, lydiaAccounId: String, max: Int!, name: String!, paymentMethods: [PaymentMethod!]!, price: Float!, startsAt: DateTime, stock: Int!, visibility: Visibility!): MutationUpsertShopItemResult!\n  upsertShopOptions(itemOptions: [ShopItemOptionInput!]!, shopItemId: String!): Boolean!\n  upsertShopPayment(answers: [String!]!, id: ID, paymentMethod: String, phone: String, quantity: Int!, shopItemId: String!, userUid: String!): MutationUpsertShopPaymentResult!\n\n  \"\"\"Créer ou modifier un thème\"\"\"\n  upsertTheme(autodeploy: Boolean!, endsAt: DateTime!, group: UID!, id: LocalID, name: String!, startsAt: DateTime!): MutationUpsertThemeResult!\n  upsertTicketGroup(\n    capacity: Int\n\n    \"\"\"Ne sert qu'à la création.\"\"\"\n    event: LocalID\n    id: LocalID\n    name: String\n  ): MutationUpsertTicketGroupResult!\n  usePasswordReset(newPassword: String!, token: String!): MutationUsePasswordResetResult!\n  validateEmail(token: String!): MutationValidateEmailResult!\n  verifyBooking(\n    \"\"\"\n    URL vers la page du billet, permet d'extraire le code de réservation depuis le contenu du QR Code, qui peut alors être une URL vers le billet plutôt qu'un simple code. `[code]` correspond au code de réservation dans cette URL.\n    \"\"\"\n    bookingURLTemplate: URL\n\n    \"\"\"Identifiant de l’événement\"\"\"\n    event: LocalID!\n\n    \"\"\"Contenu du QR Code décodé\"\"\"\n    qrcode: String!\n  ): MutationVerifyBookingResult!\n}\n\nunion MutationAcceptRegistrationResult = Error | MutationAcceptRegistrationSuccess | ZodError\n\ntype MutationAcceptRegistrationSuccess {\n  data: User!\n}\n\nunion MutationAddFileToPageResult = Error | MutationAddFileToPageSuccess | ZodError\n\ntype MutationAddFileToPageSuccess {\n  data: Page!\n}\n\nunion MutationAddGroupMemberResult = Error | MutationAddGroupMemberSuccess | ZodError\n\ntype MutationAddGroupMemberSuccess {\n  data: GroupMember!\n}\n\nunion MutationAddLinksResult = Error | MutationAddLinksSuccess | ZodError\n\ntype MutationAddLinksSuccess {\n  data: HasLinks!\n}\n\nunion MutationAnswerFormSectionResult = Error | MutationAnswerFormSectionSuccess | ZodError\n\ntype MutationAnswerFormSectionSuccess {\n  data: [Answer!]!\n}\n\nunion MutationAnswerGodparentRequestResult = Error | MutationAnswerGodparentRequestSuccess | ZodError\n\ntype MutationAnswerGodparentRequestSuccess {\n  data: GodparentRequest!\n}\n\nunion MutationBanFromEventResult = Error | MutationBanFromEventSuccess | ZodError\n\ntype MutationBanFromEventSuccess {\n  data: Event!\n}\n\nunion MutationBookEventResult = Error | MutationBookEventSuccess | ZodError\n\ntype MutationBookEventSuccess {\n  data: Registration!\n}\n\nunion MutationCancelBookingResult = Error | MutationCancelBookingSuccess | ZodError\n\ntype MutationCancelBookingSuccess {\n  data: Registration!\n}\n\nunion MutationCancelPendingContributionResult = Error | MutationCancelPendingContributionSuccess | ZodError\n\ntype MutationCancelPendingContributionSuccess {\n  data: Boolean!\n}\n\nunion MutationChangeEventOrganizerResult = Error | MutationChangeEventOrganizerSuccess | ZodError\n\ntype MutationChangeEventOrganizerSuccess {\n  data: Event!\n}\n\nunion MutationContributeResult = Error | MutationContributeSuccess | ZodError\n\ntype MutationContributeSuccess {\n  data: Boolean!\n}\n\nunion MutationCreateAppleWalletPassResult = Error | MutationCreateAppleWalletPassSuccess | ZodError\n\ntype MutationCreateAppleWalletPassSuccess {\n  data: String!\n}\n\nunion MutationCreateEventResult = Error | MutationCreateEventSuccess | ZodError\n\ntype MutationCreateEventSuccess {\n  data: Event!\n}\n\nunion MutationCreateGoogleWalletPassResult = Error | MutationCreateGoogleWalletPassSuccess | ZodError\n\ntype MutationCreateGoogleWalletPassSuccess {\n  data: String!\n}\n\nunion MutationCreateGroupAccessTokenResult = Error | MutationCreateGroupAccessTokenSuccess | ZodError\n\ntype MutationCreateGroupAccessTokenSuccess {\n  data: Credential!\n}\n\nunion MutationCreateGroupResult = Error | MutationCreateGroupSuccess | ZodError\n\ntype MutationCreateGroupSuccess {\n  data: Group!\n}\n\nunion MutationCreatePasswordResetResult = Error | MutationCreatePasswordResetSuccess | ZodError\n\ntype MutationCreatePasswordResetSuccess {\n  data: Boolean!\n}\n\nunion MutationCreatePostResult = Error | MutationCreatePostSuccess | ZodError\n\ntype MutationCreatePostSuccess {\n  data: Article!\n}\n\nunion MutationCreateTicketResult = Error | MutationCreateTicketSuccess | ZodError\n\ntype MutationCreateTicketSuccess {\n  data: Ticket!\n}\n\nunion MutationDeleteContributionResult = Error | MutationDeleteContributionSuccess | ZodError\n\ntype MutationDeleteContributionSuccess {\n  data: ContributionOption!\n}\n\nunion MutationDeleteEventResult = Error | MutationDeleteEventSuccess | ZodError\n\ntype MutationDeleteEventSuccess {\n  data: Event!\n\n  \"\"\"\n  Indique que l'évènement n'a pas été supprimé mais plutôt passé en privé. La valeur est un message expliquant cela, et pourquoi c'est arrivé.\n  \"\"\"\n  didSoftDelete: String\n}\n\nunion MutationDeleteGodchildResult = Error | MutationDeleteGodchildSuccess | ZodError\n\ntype MutationDeleteGodchildSuccess {\n  data: User!\n}\n\nunion MutationDeleteGodparentResult = Error | MutationDeleteGodparentSuccess | ZodError\n\ntype MutationDeleteGodparentSuccess {\n  data: User!\n}\n\nunion MutationDeleteLinkResult = Error | MutationDeleteLinkSuccess | ZodError\n\ntype MutationDeleteLinkSuccess {\n  data: Link!\n}\n\nunion MutationDeletePageResult = Error | MutationDeletePageSuccess | ZodError\n\ntype MutationDeletePageSuccess {\n  data: Page!\n}\n\nunion MutationDeleteShopItemResult = Error | MutationDeleteShopItemSuccess | ZodError\n\ntype MutationDeleteShopItemSuccess {\n  data: Boolean!\n}\n\nunion MutationDeleteTicketGroupResult = Error | MutationDeleteTicketGroupSuccess | ZodError\n\ntype MutationDeleteTicketGroupSuccess {\n  data: TicketGroup!\n}\n\nunion MutationDeleteTicketResult = Error | MutationDeleteTicketSuccess | ZodError\n\ntype MutationDeleteTicketSuccess {\n  data: Ticket!\n\n  \"\"\"\n  Message d'explication si le billet n'a pas pu être supprimé mais qu'une autre action a été effectuée à la place\n  \"\"\"\n  softDeleted: String\n}\n\nunion MutationFinishPaypalRegistrationPaymentResult = Error | MutationFinishPaypalRegistrationPaymentSuccess | ZodError\n\ntype MutationFinishPaypalRegistrationPaymentSuccess {\n  data: Boolean!\n}\n\nunion MutationLoginResult = AwaitingValidationError | Error | MutationLoginSuccess | ZodError\n\ntype MutationLoginSuccess {\n  data: Credential!\n}\n\nunion MutationMailFormAnswersResult = Error | MutationMailFormAnswersSuccess | ZodError\n\ntype MutationMailFormAnswersSuccess {\n  data: String!\n}\n\nunion MutationMarkBookingAsPaidResult = Error | MutationMarkBookingAsPaidSuccess | ZodError\n\ntype MutationMarkBookingAsPaidSuccess {\n  data: Registration!\n}\n\nunion MutationMarkContributionAsPaidResult = Error | MutationMarkContributionAsPaidSuccess | ZodError\n\ntype MutationMarkContributionAsPaidSuccess {\n  data: ContributionOption!\n}\n\nunion MutationOpposeRegistrationResult = Error | MutationOpposeRegistrationSuccess | ZodError\n\ntype MutationOpposeRegistrationSuccess {\n  data: Boolean!\n}\n\nunion MutationPaidShopPaymentResult = Error | MutationPaidShopPaymentSuccess | ZodError\n\ntype MutationPaidShopPaymentSuccess {\n  data: ShopPayment!\n}\n\nunion MutationPayBookingResult = Error | MutationPayBookingSuccess | ZodError\n\ntype MutationPayBookingSuccess {\n  data: Registration!\n}\n\nunion MutationRegisterGoogleCredentialResult = Error | MutationRegisterGoogleCredentialSuccess | ZodError\n\ntype MutationRegisterGoogleCredentialSuccess {\n  data: Boolean!\n}\n\nunion MutationRemoveEventManagerResult = Error | MutationRemoveEventManagerSuccess | ZodError\n\ntype MutationRemoveEventManagerSuccess {\n  data: EventManager!\n\n  \"\"\"\n  Contient un message d'explication si jamais le dernier manager a dû changer de permissions afin de conserver au moins un manager avec les permissions de gestion des managers de l'événement\n  \"\"\"\n  lastManagerPowerlevelChanged: String\n}\n\nunion MutationRemoveFileFromPageResult = Error | MutationRemoveFileFromPageSuccess | ZodError\n\ntype MutationRemoveFileFromPageSuccess {\n  data: Page!\n}\n\nunion MutationRequestEmailChangeResult = Error | MutationRequestEmailChangeSuccess | ZodError\n\ntype MutationRequestEmailChangeSuccess {\n  data: EmailChange!\n}\n\nunion MutationResetPasswordResult = Error | MutationResetPasswordSuccess | ZodError\n\ntype MutationResetPasswordSuccess {\n  data: Boolean!\n}\n\nunion MutationSaveLydiaPhoneNumberResult = Error | MutationSaveLydiaPhoneNumberSuccess | ZodError\n\ntype MutationSaveLydiaPhoneNumberSuccess {\n  data: User!\n}\n\nunion MutationSelfJoinGroupResult = Error | MutationSelfJoinGroupSuccess | ZodError\n\ntype MutationSelfJoinGroupSuccess {\n  data: GroupMember!\n}\n\nunion MutationSetEventApplicableOffersResult = Error | MutationSetEventApplicableOffersSuccess | ZodError\n\ntype MutationSetEventApplicableOffersSuccess {\n  data: Event!\n}\n\nunion MutationSetEventBeneficiaryResult = Error | MutationSetEventBeneficiarySuccess | ZodError\n\ntype MutationSetEventBeneficiarySuccess {\n  data: Event!\n}\n\nunion MutationSetEventCoOrganizersResult = Error | MutationSetEventCoOrganizersSuccess | ZodError\n\ntype MutationSetEventCoOrganizersSuccess {\n  data: Event!\n}\n\nunion MutationSetEventDatesResult = Error | MutationSetEventDatesSuccess | ZodError\n\ntype MutationSetEventDatesSuccess {\n  data: Event!\n}\n\nunion MutationSetEventVisibilityResult = Error | MutationSetEventVisibilitySuccess | ZodError\n\ntype MutationSetEventVisibilitySuccess {\n  data: Event!\n}\n\nunion MutationSetGroupJoinPolicyResult = Error | MutationSetGroupJoinPolicySuccess | ZodError\n\ntype MutationSetGroupJoinPolicySuccess {\n  data: Group!\n}\n\nunion MutationSetGroupStudentAssociationResult = Error | MutationSetGroupStudentAssociationSuccess | ZodError\n\ntype MutationSetGroupStudentAssociationSuccess {\n  data: Group!\n}\n\nunion MutationSetGroupTypeResult = Error | MutationSetGroupTypeSuccess | ZodError\n\ntype MutationSetGroupTypeSuccess {\n  data: Group!\n}\n\nunion MutationSetParentGroupResult = Error | MutationSetParentGroupSuccess | ZodError\n\ntype MutationSetParentGroupSuccess {\n  data: Group!\n}\n\nunion MutationSetPictureResult = Error | MutationSetPictureSuccess | ZodError\n\ntype MutationSetPictureSuccess {\n  \"\"\"\n  Si l'image a déjà été supprimée, renvoie un texte expliquant que l'image a déjà été supprimée. Sinon, renvoie une chaîne vide.\n  \"\"\"\n  alreadyDeleted: String!\n  data: Pictured!\n}\n\nunion MutationSetTicketGroupResult = Error | MutationSetTicketGroupSuccess | ZodError\n\ntype MutationSetTicketGroupSuccess {\n  data: Ticket!\n}\n\nunion MutationStartSignupResult = Error | MutationStartSignupSuccess | ZodError\n\ntype MutationStartSignupSuccess {\n  data: UserCandidate!\n}\n\nunion MutationSubscribeToNotificationsResult = Error | MutationSubscribeToNotificationsSuccess | ZodError\n\ntype MutationSubscribeToNotificationsSuccess {\n  data: NotificationSubscription!\n}\n\nunion MutationUnbanFromEventResult = Error | MutationUnbanFromEventSuccess | ZodError\n\ntype MutationUnbanFromEventSuccess {\n  data: Event!\n}\n\nunion MutationUnsubscribeFromNotificationsResult = Error | MutationUnsubscribeFromNotificationsSuccess | ZodError\n\ntype MutationUnsubscribeFromNotificationsSuccess {\n  data: NotificationSubscription!\n}\n\nunion MutationUpdateEventRecurrenceResult = Error | MutationUpdateEventRecurrenceSuccess | ZodError\n\ntype MutationUpdateEventRecurrenceSuccess {\n  data: Event!\n}\n\nunion MutationUpdateEventResult = Error | MutationUpdateEventSuccess | ZodError\n\ntype MutationUpdateEventSuccess {\n  data: Event!\n}\n\nunion MutationUpdateGroupProfileResult = Error | MutationUpdateGroupProfileSuccess | ZodError\n\ntype MutationUpdateGroupProfileSuccess {\n  data: Group!\n}\n\nunion MutationUpdateLinkResult = Error | MutationUpdateLinkSuccess | ZodError\n\ntype MutationUpdateLinkSuccess {\n  data: Link!\n}\n\nunion MutationUpdateTicketConstraintsResult = Error | MutationUpdateTicketConstraintsSuccess | ZodError\n\ntype MutationUpdateTicketConstraintsSuccess {\n  \"\"\"\n  Les contraintes de billet n'ont pas été enregistrées tel quel mais on été simplifiées. La valeur est un message d'explication.\n  \"\"\"\n  constraintsWereSimplified: String\n  data: Ticket!\n}\n\nunion MutationUpdateTicketResult = Error | MutationUpdateTicketSuccess | ZodError\n\ntype MutationUpdateTicketSuccess {\n  data: Ticket!\n}\n\nunion MutationUpdateUserCandidateResult = Error | MutationUpdateUserCandidateSuccess | ZodError\n\ntype MutationUpdateUserCandidateSuccess {\n  data: Boolean!\n}\n\nunion MutationUpdateUserCurriculumResult = Error | MutationUpdateUserCurriculumSuccess | ZodError\n\ntype MutationUpdateUserCurriculumSuccess {\n  data: User!\n}\n\nunion MutationUpdateUserPermissionsResult = Error | MutationUpdateUserPermissionsSuccess | ZodError\n\ntype MutationUpdateUserPermissionsSuccess {\n  data: User!\n}\n\nunion MutationUpdateUserProfileResult = Error | MutationUpdateUserProfileSuccess | ZodError\n\ntype MutationUpdateUserProfileSuccess {\n  data: User!\n}\n\nunion MutationUpdateUserResult = Error | MutationUpdateUserSuccess | ZodError\n\ntype MutationUpdateUserSuccess {\n  data: User!\n}\n\nunion MutationUpsertAnnouncementResult = Error | MutationUpsertAnnouncementSuccess | ZodError\n\ntype MutationUpsertAnnouncementSuccess {\n  data: Announcement!\n}\n\nunion MutationUpsertArticleResult = Error | MutationUpsertArticleSuccess | ZodError\n\ntype MutationUpsertArticleSuccess {\n  data: Article!\n}\n\nunion MutationUpsertBarWeekResult = Error | MutationUpsertBarWeekSuccess | ZodError\n\ntype MutationUpsertBarWeekSuccess {\n  data: BarWeek!\n}\n\nunion MutationUpsertDocumentResult = Error | MutationUpsertDocumentSuccess | ZodError\n\ntype MutationUpsertDocumentSuccess {\n  data: Document!\n}\n\nunion MutationUpsertEventManagerResult = Error | MutationUpsertEventManagerSuccess | ZodError\n\ntype MutationUpsertEventManagerSuccess {\n  data: EventManager!\n}\n\ninput MutationUpsertFormInput {\n  closesAt: DateTime\n  description: String! = \"\"\n\n  \"\"\"Identifiant de l'événement à associer au formulaire\"\"\"\n  eventId: ID\n\n  \"\"\"UID du groupe auquel le formulaire est associé.\"\"\"\n  group: String\n\n  \"\"\"\n  Identifiant du formulaire à mettre à jour. Si non fourni, un nouveau formulaire sera créé.\n  \"\"\"\n  id: ID\n  opensAt: DateTime\n  title: String!\n  visibility: Visibility! = Unlisted\n}\n\ninput MutationUpsertFormSectionInput {\n  description: String! = \"\"\n\n  \"\"\"\n  Identifiant du formulaire auquel associer la section. Il n'es pas possible de changer le formulaire auquel une section est associée, si id est fourni, ce paramètre est ignoré. L'ID peut être local\n  \"\"\"\n  formId: String!\n\n  \"\"\"\n  Identifiant de la section à mettre à jour. Si non fourni, une nouvelle section sera créée.\n  \"\"\"\n  id: ID\n\n  \"\"\"\n  Position de la section dans le formulaire. Si non spécifié, la section est ajoutée à la fin du formulaire\n  \"\"\"\n  order: Int\n  title: String!\n}\n\nunion MutationUpsertGodparentRequestResult = Error | MutationUpsertGodparentRequestSuccess | ZodError\n\ntype MutationUpsertGodparentRequestSuccess {\n  data: GodparentRequest!\n}\n\nunion MutationUpsertGroupResult = Error | MutationUpsertGroupSuccess | ZodError\n\ntype MutationUpsertGroupSuccess {\n  data: Group!\n}\n\nunion MutationUpsertPageResult = Error | MutationUpsertPageSuccess | ZodError\n\ntype MutationUpsertPageSuccess {\n  data: Page!\n}\n\ninput MutationUpsertQuestionInput {\n  \"\"\"\n  Indique si la question doit avoir une option \"Autre\"\n  \"\"\"\n  allowOptionOther: Boolean! = false\n\n  \"\"\"Types de fichiers autorisés pour les questions de type `FileUpload`\"\"\"\n  allowedFiletypes: [String!]\n\n  \"\"\"Indique si les réponses à la question sont anonymes\"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Valeur par défaut de la question. Voir `AnswerInput.answer` pour le format.\n  \"\"\"\n  default: [String!]! = []\n  description: String! = \"\"\n\n  \"\"\"\n  Identifiant du formulaire auquel associer la question. Il n'es pas possible de changer le formulaire auquel une question est associée, si id est fourni, ce paramètre est ignoré.\n  \"\"\"\n  formId: ID\n\n  \"\"\"\n  Identifiant de la question à mettre à jour. Si non fourni, une nouvelle question sera créée.\n  \"\"\"\n  id: ID\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n  options: [QuestionOptionInput!]\n\n  \"\"\"\n  Position de la question dans la section. Si non spécifié, rajoute la question à la fin de la section.\n  \"\"\"\n  order: Int\n  scale: QuestionScaleInput\n\n  \"\"\"\n  Identifiant de la section de formulaire à laquelle associer la question. Si non fourni, la question est rajoutée à une section à titre vide, qui est créée au besoin. Pratique pour les formulaires plus simples sans section.\n  \"\"\"\n  sectionId: ID\n  title: String!\n  type: QuestionKind!\n}\n\nunion MutationUpsertRegistrationResult = Error | MutationUpsertRegistrationSuccess | ZodError\n\ntype MutationUpsertRegistrationSuccess {\n  data: Registration!\n}\n\nunion MutationUpsertServiceResult = Error | MutationUpsertServiceSuccess | ZodError\n\ntype MutationUpsertServiceSuccess {\n  data: Service!\n}\n\nunion MutationUpsertShopItemResult = Error | MutationUpsertShopItemSuccess | ZodError\n\ntype MutationUpsertShopItemSuccess {\n  data: ShopItem!\n}\n\nunion MutationUpsertShopPaymentResult = Error | MutationUpsertShopPaymentSuccess | ZodError\n\ntype MutationUpsertShopPaymentSuccess {\n  data: ShopPayment!\n}\n\nunion MutationUpsertThemeResult = Error | MutationUpsertThemeSuccess | ZodError\n\ntype MutationUpsertThemeSuccess {\n  data: Theme!\n}\n\nunion MutationUpsertTicketGroupResult = Error | MutationUpsertTicketGroupSuccess | ZodError\n\ntype MutationUpsertTicketGroupSuccess {\n  data: TicketGroup!\n}\n\nunion MutationUsePasswordResetResult = Error | MutationUsePasswordResetSuccess | ZodError\n\ntype MutationUsePasswordResetSuccess {\n  data: Boolean!\n}\n\nunion MutationValidateEmailResult = Error | MutationValidateEmailSuccess | ZodError\n\ntype MutationValidateEmailSuccess {\n  data: EmailChange!\n}\n\nunion MutationVerifyBookingResult = Error | MutationVerifyBookingSuccess | ZodError\n\ntype MutationVerifyBookingSuccess {\n  data: RegistrationVerificationResult!\n}\n\ninterface Node {\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n}\n\n\"\"\"An error raised when a resource does not exist.\"\"\"\ntype NotFoundError implements ErrorInterface {\n  message: String!\n}\n\n\"\"\"A notification is a push notification that was sent to a user\"\"\"\ntype Notification implements Node {\n  actions: [Link!]!\n  body: String!\n  channel: NotificationChannel!\n  createdAt: DateTime!\n  goto: String!\n  group: Group\n  groupId: ID\n  id: ID!\n  imageFile: String!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  subscription: NotificationSubscription!\n  subscriptionId: ID!\n  timestamp: DateTime\n  title: String!\n  updatedAt: DateTime!\n  vibrate: [Int!]!\n}\n\nenum NotificationChannel {\n  Articles\n  Comments\n  GodparentRequests\n  GroupBoard\n  Mandatory\n  Other\n  Permissions\n  Shotguns\n}\n\n\"\"\"\nA NotificationSubscription stores a user's subscription to push notifications on a user agent\n\"\"\"\ntype NotificationSubscription {\n  createdAt: DateTime!\n  endpoint: String!\n  expiresAt: DateTime\n  id: ID!\n  name: String!\n  owner: User!\n  ownerId: ID!\n  updatedAt: DateTime!\n}\n\ninput NotificationSubscriptionKeysInput {\n  auth: String!\n  p256dh: String!\n}\n\n\"\"\"\nUne page écrite par un·e utilisateur·rice, servant par exemple à présenter les partenariats d'une AE sur une page dédiée.\n\"\"\"\ntype Page {\n  \"\"\"Contenu de la page. Supporte la syntaxe Markdown.\"\"\"\n  body: String!\n\n  \"\"\"Contenu de la page, converti en HTML. Protégé contre les attaques XSS.\"\"\"\n  bodyHtml: String!\n\n  \"\"\"L'utilisateur·ice connecté·e peut modifier ou supprimer cette page\"\"\"\n  canBeEdited: Boolean!\n  createdAt: DateTime!\n\n  \"\"\"\n  Chemin vers les fichiers inclus sur la page, par exmple des images. Voir filesURLs pour obtenir les URLs de ces fichiers.\n  \"\"\"\n  files: [String!]!\n\n  \"\"\"URLs vers les fichiers inclus sur la page.\"\"\"\n  filesURLs: [String!]!\n\n  \"\"\"\n  Groupe auquel appartient la page. Peut être null si la page n'appartient à aucun groupe.\n  \"\"\"\n  group: Group\n  id: ID!\n\n  \"\"\"\n  Dernier·ère utilisateur·rice ayant modifié la page. Peut être null si la page n'a jamais été modifiée, ou que l'utilisateur·ice en question a été supprimé·e.\n  \"\"\"\n  lastAuthor: User\n\n  \"\"\"\n  Chemin vers la page. Doit être unique _par AE ou groupe_. L'URL finale sera donc préfixée d'une certaine manière pour éviter les collisions.\n  \"\"\"\n  path: String!\n\n  \"\"\"\n  Association étudiante à laquelle appartient la page. Peut être null si la page n'appartient à aucune association.\n  \"\"\"\n  studentAssociation: StudentAssociation\n\n  \"\"\"Titre de la page.\"\"\"\n  title: String!\n  updatedAt: DateTime!\n}\n\ntype PageInfo {\n  endCursor: String\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n}\n\ntype PagesConnection {\n  edges: [PagesEdge!]!\n  nodes: [Page!]!\n  pageInfo: PageInfo!\n}\n\ntype PagesEdge {\n  cursor: String!\n  node: Page!\n}\n\nenum PaymentMethod {\n  \"\"\"Carte bancaire\"\"\"\n  Card\n\n  \"\"\"Espèces\"\"\"\n  Cash\n\n  \"\"\"Chèque\"\"\"\n  Check\n\n  \"\"\"Paiement externe à Churros\"\"\"\n  External\n\n  \"\"\"Lydia\"\"\"\n  Lydia\n\n  \"\"\"Autre\"\"\"\n  Other\n\n  \"\"\"PayPal\"\"\"\n  PayPal @deprecated(reason: \"Non implémenté\")\n\n  \"\"\"Virement\"\"\"\n  Transfer\n}\n\n\"\"\"\nNuméro de téléphone, au format international (E.164, avec préfixes “+”), ou au format local français (10 chiffres, sans préfixe).\n\"\"\"\nscalar PhoneNumber\n\ntype Picture {\n  id: ID!\n  path: String!\n  position: Int!\n}\n\n\"\"\"Une ressource qui possède une image associée\"\"\"\ninterface Pictured {\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n\n  \"\"\"L'identifiant global de la ressource\"\"\"\n  id: ID!\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n\n  \"\"\"Le nom du fichier de l'image\"\"\"\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n}\n\n\"\"\"Entier positif\"\"\"\nscalar PositiveInt\n\n\"\"\"\nResource possédant un '@' (uid) et pouvant raisonnablement posséder une page de profil, avec nom, photo, bio/description...\n\"\"\"\nunion Profile = Group | Major | School | StudentAssociation | User\n\ntype ProfitsBreakdown {\n  byPaymentMethod: ProfitsBreakdownByPaymentMethod!\n  byTicket: [ProfitsBreakdownByTicket!]!\n  total: Float!\n}\n\ntype ProfitsBreakdownByPaymentMethod {\n  Card: Float!\n  Cash: Float!\n  Check: Float!\n  External: Float!\n  Lydia: Float!\n  Other: Float!\n  PayPal: Float!\n  Transfer: Float!\n}\n\ntype ProfitsBreakdownByTicket {\n  amount: Float!\n  id: ID!\n}\n\nenum PromotionType {\n  SIMPPS\n}\n\ntype QRCode {\n  path: String!\n  viewbox: String!\n}\n\ntype Query {\n  \"\"\"Récupère tous les formulaires. Réservé aux admins.\"\"\"\n  allForms(after: String, before: String, first: Int, last: Int): QueryAllFormsConnection!\n  allUsers(after: String, before: String, first: Int, last: Int): QueryAllUsersConnection!\n  announcement(\n    \"\"\"ID local ou global\"\"\"\n    id: ID!\n  ): Announcement!\n  announcements(after: String, before: String, first: Int, last: Int): QueryAnnouncementsConnection!\n  announcementsNow: [Announcement!]!\n  article(id: LocalID!): Article!\n\n  \"\"\"\n  Récupérer l'ID d'un article à partir de son groupe et de son slug. Pensé pour les redirections d'URLs anciennes.\n  \"\"\"\n  articleID(group: UID!, slug: String!): LocalID @deprecated(reason: \"Utilisez `article` à la place\")\n\n  \"\"\"\n  Renvoie l'utilisateur·ice connecté·e. Si l'utilisateur·ice n'est pas connecté·e, une erreur est renvoyée. Pour avoir null aulieu d'une erreur, voir `me`.\n  \"\"\"\n  assertMe: User!\n\n  \"\"\"\n  Récupérer le thème qui est actuellement choisi pour un déploiement automatique: le thème de l'utilisateur·ice doit être changé à celui-ci, si iel n'a pas explicitement demandé à ne pas utiliser ce thème\n  \"\"\"\n  autodeployedTheme: Theme\n  barWeek(slug: String!): BarWeek!\n  barWeekNow(now: DateTime!): BarWeek\n  barWeeks: [BarWeek!]!\n  birthdays(activeOnly: Boolean, now: DateTime, width: Int): [User!]!\n\n  \"\"\"Récupère une réservation par son code\"\"\"\n  booking(code: String!): Registration!\n\n  \"\"\"Si la page donnée est épinglée par l'utilisateur·ice connecté·e\"\"\"\n  bookmarked(\n    \"\"\"Chemin de la page\"\"\"\n    path: String!\n  ): Boolean!\n\n  \"\"\"Retourne des informations sur le build actuel de l'API\"\"\"\n  buildInfo: BuildInfo!\n  changelog(\n    \"\"\"\n    The version to request a changelog for. Defaults to the current version (dev).\n    \"\"\"\n    version: String\n  ): ChangelogRelease!\n  codeContributors: QueryCodeContributorsResult!\n\n  \"\"\"\n  A changelog for multiple versions. \n  Be careful, this range is (from, to]. I.e. **the first version is excluded, and the last is included**. \n  This is way more useful for querying a range of versions for a changelog, but not the usual way ranges are defined.\n  \"\"\"\n  combinedChangelog(\n    \"\"\"\n    The version to start from, **exclusive**. Leave empty to start from the latest version the user has seen\n    \"\"\"\n    from: String\n    sort: SortDirection! = Ascending\n\n    \"\"\"\n    The version to end at, **inclusive**. Leave empty to end at the current version (dev).\n    \"\"\"\n    to: String! = \"dev\"\n  ): QueryCombinedChangelogResult!\n  contributionOptions: [ContributionOption!]!\n  document(slug: String!, subject: ID!): Document!\n  documents(after: String, before: String, first: Int, last: Int): QueryDocumentsConnection!\n  event(id: LocalID!): Event!\n  eventManager(id: LocalID!): EventManager!\n  events(\n    after: String\n    before: String\n    first: Int\n    future: Boolean\n\n    \"\"\"\n    N'include seulement les évènements qui veulent être inclus dans l'affichage kiosque\n    \"\"\"\n    kiosk: Boolean\n    last: Int\n    noLinkedArticles: Boolean\n    past: Boolean\n    pastRecurring: Boolean\n    upcomingShotguns: Boolean\n  ): QueryEventsConnection!\n\n  \"\"\"\n  Tout les évènements, regroupés par date (de début). Les curseurs (before, after) peuvent être des dates au format YYYY-MM-DD\n  \"\"\"\n  eventsByDay(\n    after: String\n    before: String\n    first: Int\n\n    \"\"\"\n    N'include seulement les évènements qui veulent être inclus dans l'affichage kiosque\n    \"\"\"\n    kiosk: Boolean\n    last: Int\n  ): QueryEventsByDayConnection!\n  eventsInWeek(today: DateTime!): [Event!]!\n  existsInSchoolLdap(email: String!): Boolean!\n\n  \"\"\"\n  Récupère un formulaire. On peut utiliser une subscription pour avoir la mise à jour en temps réel des réponses au formulaire.\n  \"\"\"\n  form(\n    \"\"\"Identifiant local (sans le préfixe `form:`) du formulaire\"\"\"\n    localId: String!\n  ): Form\n\n  \"\"\"Récupère les formulaires visibles par l'utilisateur·ice connecté·e.\"\"\"\n  forms(after: String, before: String, first: Int, last: Int): QueryFormsConnection!\n  godparentRequest(id: ID!): GodparentRequest!\n  godparentRequests: [GodparentRequest!]!\n  group(uid: String!): Group!\n  groupMembersCsv(groupUid: String!): QueryGroupMembersCsvResult!\n  groups(\n    types: [GroupType!]\n\n    \"\"\"Inclures les groupes non répertoriés\"\"\"\n    unlisted: Boolean! = false\n  ): [Group!]!\n  healthcheck: HealthCheck!\n\n  \"\"\"Gets the homepage articles, customized if the user is logged in.\"\"\"\n  homepage(after: String, before: String, first: Int, last: Int): QueryHomepageConnection!\n  issue(number: Int!): Issue!\n  issuesByUser: [Issue!]!\n  kioskReload: Boolean!\n\n  \"\"\"Vrai si l'utilisateur·ice est connecté·e\"\"\"\n  loggedIn(\n    \"\"\"\n    Si renseigné, renvoie une erreur si l’utilisateur·ice n’est pas connecté·e\n    \"\"\"\n    assert: String\n  ): Boolean!\n  logs(\n    after: String\n\n    \"\"\"Filtrer par zone\"\"\"\n    area: String\n    before: String\n    first: Int\n    last: Int\n\n    \"\"\"Filtrer dans le message de l'entrée de log\"\"\"\n    message: String\n\n    \"\"\"Limiter les logs à ceux effectués par une certaine personne\"\"\"\n    user: UID\n  ): QueryLogsConnection!\n  lydiaAccount(id: ID!): LydiaAccount!\n  lydiaAccounts: [LydiaAccount!]!\n  lydiaAccountsOfGroup(uid: String!): [LydiaAccount!]! @deprecated(reason: \"Use group.lydiaAccounts instead\")\n  major(uid: String!): Major!\n  majors(\n    \"\"\"Inclure les filières anciennes n'existant plus dans les cursus actuels\"\"\"\n    discontinued: Boolean! = false\n  ): [Major!]!\n\n  \"\"\"\n  Renvoie l’utilisateur·ice connecté·e, ou null. Pour une valeur de retour non-nullable, voir `assertMe`.\n  \"\"\"\n  me: User\n  minor(id: ID!): Minor!\n  minors(after: String, before: String, first: Int, last: Int): QueryMinorsConnection!\n  notification(id: ID!): Notification!\n  notificationSubscription(endpoint: String!): NotificationSubscription!\n  notificationSubscriptions: [NotificationSubscription!]!\n  notifications(after: String, before: String, channels: [NotificationChannel!] = [], first: Int, groupUids: [String!] = [], last: Int, subscriptionEndpoint: ID): QueryNotificationsConnection!\n\n  \"\"\"\n  Returns how many people will be notified if an article of the given visibility and group is created.\n  \"\"\"\n  notificationsSendCountForArticle(group: UID!, visibility: Visibility!): Int!\n\n  \"\"\"\n  Récupérer une page par son identifiant. Voir aussi `Group.page` et `StudentAssociation.page` pour des queries plus ergonomiques\n  \"\"\"\n  page(id: ID!): Page!\n\n  \"\"\"\n  Récupère toutes les pages existantes. Réservé aux administrateur·ice.s.\n  \"\"\"\n  pages(after: String, before: String, first: Int, last: Int): QueryPagesConnection!\n  profile(uid: UID!): Profile!\n\n  \"\"\"Récupérer des informations sur un lien d'inscription rapide\"\"\"\n  quickSignup(\n    \"\"\"Identifiant de l'inscription rapide. Si null, renvoie null\"\"\"\n    id: LocalID!\n  ): QuickSignup!\n  quickSignups(after: String, before: String, first: Int, last: Int): QueryQuickSignupsConnection!\n  reaction(id: ID!): Reaction!\n  reactions(after: String, before: String, first: Int, last: Int): QueryReactionsConnection!\n  registration(id: ID!): QueryRegistrationResult!\n\n  \"\"\"\n  Rendu de markdown en HTML. Demande a être authentifié·e pour éviter tout abus.\n  \"\"\"\n  renderMarkdown(\n    \"\"\"Le markdown à rendre en HTML\"\"\"\n    markdown: String!\n  ): String!\n  school(uid: String!): School!\n  schoolGroups: [SchoolGroup!]!\n  schools: [School!]!\n  searchArticles(groupUid: String, q: String!): [ArticleSearchResultType!]!\n  searchDocuments(forApprentices: Boolean!, majorUid: String!, q: String!, yearTier: Int!): [DocumentSearchResult!]!\n  searchEvents(groupUid: String, q: String!): [EvenSearchResult!]!\n\n  \"\"\"Recherche des formulaires\"\"\"\n  searchForms(\n    \"\"\"La recherche\"\"\"\n    q: String!\n    similarityCutoff: Float\n  ): [FormSearchResult!]!\n  searchGroups(q: String, similarityCutoff: Float): [GroupSearchResult!]!\n  searchUsers(q: String, similarityCutoff: Float): [UserSearchResult!]!\n  service(id: LocalID!): Service!\n  services(\n    \"\"\"\n    Renvoie uniquement les services intéréssant l'utilisateur·ice connecté·e\n    \"\"\"\n    mine: Boolean!\n  ): [Service!]!\n  shopItem(slug: String!): ShopItem!\n  shopPayments(item: ID!): [ShopPayment!]!\n  studentAssociation(uid: String!): StudentAssociation!\n  studentAssociations(canContributeOnly: Boolean): [StudentAssociation!]!\n  subject(forApprentices: Boolean!, slug: String!, yearTier: Int!): Subject!\n  subjects: [Subject!]!\n\n  \"\"\"\n  Génère un pseudo suggéré à partir des infos rentrées par l'utilisateur.ice en cours d'inscription\n  \"\"\"\n  suggestedUid(\n    \"\"\"Prénom\"\"\"\n    firstName: String!\n\n    \"\"\"Nom de famille\"\"\"\n    lastName: String!\n  ): String!\n  themes(\n    \"\"\"\n    Récupérer tous les thèmes auquel ont a accès, même ceux qui sont passés\n    \"\"\"\n    all: Boolean\n  ): [Theme!]!\n  ticket(id: LocalID!): Ticket!\n  ticketGroup(id: LocalID!): TicketGroup!\n\n  \"\"\"Vérifie si un identifiant (un “@” dans l'interface) est disponible\"\"\"\n  uidIsAvailable(uid: UID!): Boolean!\n  upcomingChangelog: QueryUpcomingChangelogResult!\n  user(id: ID, uid: String): User!\n  userByEmail(email: String!): User!\n  userCandidate(token: String!): UserCandidate!\n  userCandidateByEmail(email: String!): UserCandidate!\n  userCandidates(after: String, before: String, first: Int, last: Int): QueryUserCandidatesConnection!\n  userServices: [Service!]! @deprecated(reason: \"Use `services(mine: true)` instead\")\n}\n\ntype QueryAllFormsConnection {\n  edges: [QueryAllFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryAllFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\ntype QueryAllUsersConnection {\n  edges: [QueryAllUsersConnectionEdge!]!\n  nodes: [User!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryAllUsersConnectionEdge {\n  cursor: String!\n  node: User!\n}\n\ntype QueryAnnouncementsConnection {\n  edges: [QueryAnnouncementsConnectionEdge!]!\n  nodes: [Announcement!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryAnnouncementsConnectionEdge {\n  cursor: String!\n  node: Announcement!\n}\n\nunion QueryCodeContributorsResult = Error | QueryCodeContributorsSuccess | ZodError\n\ntype QueryCodeContributorsSuccess {\n  data: [User!]!\n}\n\nunion QueryCombinedChangelogResult = Error | QueryCombinedChangelogSuccess | ZodError\n\ntype QueryCombinedChangelogSuccess {\n  data: [ChangelogRelease!]!\n}\n\ntype QueryDocumentsConnection {\n  edges: [QueryDocumentsConnectionEdge!]!\n  nodes: [Document!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryDocumentsConnectionEdge {\n  cursor: String!\n  node: Document!\n}\n\ntype QueryEventsByDayConnection {\n  edges: [QueryEventsByDayConnectionEdge!]!\n  nodes: [EventsByDay!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryEventsByDayConnectionEdge {\n  cursor: String!\n  node: EventsByDay!\n}\n\ntype QueryEventsConnection {\n  edges: [QueryEventsConnectionEdge!]!\n  nodes: [Event!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryEventsConnectionEdge {\n  cursor: String!\n  node: Event!\n}\n\ntype QueryFormsConnection {\n  edges: [QueryFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\nunion QueryGroupMembersCsvResult = Error | QueryGroupMembersCsvSuccess | ZodError\n\ntype QueryGroupMembersCsvSuccess {\n  data: String!\n}\n\ntype QueryHomepageConnection {\n  edges: [QueryHomepageConnectionEdge!]!\n  nodes: [Article!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryHomepageConnectionEdge {\n  cursor: String!\n  node: Article!\n}\n\ntype QueryLogsConnection {\n  edges: [QueryLogsConnectionEdge!]!\n  nodes: [LogEntry!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryLogsConnectionEdge {\n  cursor: String!\n  node: LogEntry!\n}\n\ntype QueryMinorsConnection {\n  edges: [QueryMinorsConnectionEdge!]!\n  nodes: [Minor!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryMinorsConnectionEdge {\n  cursor: String!\n  node: Minor!\n}\n\ntype QueryNotificationsConnection {\n  edges: [QueryNotificationsConnectionEdge!]!\n  nodes: [Notification!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryNotificationsConnectionEdge {\n  cursor: String!\n  node: Notification!\n}\n\ntype QueryPagesConnection {\n  edges: [QueryPagesConnectionEdge!]!\n  nodes: [Page!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryPagesConnectionEdge {\n  cursor: String!\n  node: Page!\n}\n\ntype QueryQuickSignupsConnection {\n  edges: [QueryQuickSignupsConnectionEdge!]!\n  nodes: [QuickSignup!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryQuickSignupsConnectionEdge {\n  cursor: String!\n  node: QuickSignup!\n}\n\ntype QueryReactionsConnection {\n  edges: [QueryReactionsConnectionEdge!]!\n  nodes: [Reaction!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryReactionsConnectionEdge {\n  cursor: String!\n  node: Reaction!\n}\n\nunion QueryRegistrationResult = Error | QueryRegistrationSuccess | ZodError\n\ntype QueryRegistrationSuccess {\n  data: Registration!\n}\n\nunion QueryUpcomingChangelogResult = Error | QueryUpcomingChangelogSuccess | ZodError\n\ntype QueryUpcomingChangelogSuccess {\n  data: ChangelogRelease!\n}\n\ntype QueryUserCandidatesConnection {\n  edges: [QueryUserCandidatesConnectionEdge!]!\n  nodes: [UserCandidate!]!\n  pageInfo: PageInfo!\n}\n\ntype QueryUserCandidatesConnectionEdge {\n  cursor: String!\n  node: UserCandidate!\n}\n\n\"\"\"Une question dans un formulaire\"\"\"\ninterface Question {\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\ntype QuestionAnswersConnection {\n  edges: [QuestionAnswersConnectionEdge!]!\n  nodes: [Answer!]!\n  pageInfo: PageInfo!\n}\n\ntype QuestionAnswersConnectionEdge {\n  cursor: String!\n  node: Answer!\n}\n\n\"\"\"Question de type `FileUpload`\"\"\"\ntype QuestionFileUpload implements Question {\n  \"\"\"\n  Types de fichiers autorisés pour les questions de type `File`. Null si la question n'est pas de type `File`.\n  \"\"\"\n  allowedFileTypes: [String!]\n\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Le type de question\"\"\"\nenum QuestionKind {\n  \"\"\"La réponse est une date, sans heure associée.\"\"\"\n  Date\n\n  \"\"\"La réponse est un fichier mis en ligne par l'utilisateur·ice.\"\"\"\n  FileUpload\n\n  \"\"\"La réponse est un texte long.\"\"\"\n  LongText\n\n  \"\"\"La réponse est un nombre, potentiellement à virgule.\"\"\"\n  Number\n\n  \"\"\"La réponse est un nombre entier entre deux bornes\"\"\"\n  Scale\n\n  \"\"\"La réponse est une ou plusieurs options parmi une liste.\"\"\"\n  SelectMultiple\n\n  \"\"\"La réponse est une des options parmi une liste.\"\"\"\n  SelectOne\n\n  \"\"\"La réponse est un texte court.\"\"\"\n  Text\n\n  \"\"\"\n  La réponse est un temps  (heures, minute et seconde), sans date associée.\n  \"\"\"\n  Time\n}\n\n\"\"\"Choix pour les questions de type `SelectOne` ou `SelectMultiple`\"\"\"\ninput QuestionOptionInput {\n  \"\"\"ID de la question vers laquelle sauter si ce choix est sélectionné\"\"\"\n  jump: ID\n\n  \"\"\"Choix\"\"\"\n  value: String!\n}\n\n\"\"\"Question de type `Text`, `Number`, `Date`, `Time` ou `LongText`\"\"\"\ntype QuestionScalar implements Question {\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Question de type `Scale`\"\"\"\ntype QuestionScale implements Question {\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.\n  \"\"\"\n  answerCounts: [StringToIntMapping!]!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Liste des labels pour les valeurs possibles\"\"\"\n  labels: [String!]!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"Valeur maximale\"\"\"\n  maximum: Int!\n\n  \"\"\"Label de la valeur maximale\"\"\"\n  maximumLabel: String!\n\n  \"\"\"Valeur minimale\"\"\"\n  minimum: Int!\n\n  \"\"\"Label de la valeur minimale\"\"\"\n  minimumLabel: String!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"Liste des valeurs possibles\"\"\"\n  options: [Int!]!\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Options supplémentaires pour les questions de type `Scale`\"\"\"\ninput QuestionScaleInput {\n  \"\"\"Valeur maximale\"\"\"\n  maximum: Int!\n\n  \"\"\"Label de la valeur maximale\"\"\"\n  maximumLabel: String\n\n  \"\"\"Valeur minimale\"\"\"\n  minimum: Int!\n\n  \"\"\"Label de la valeur minimale\"\"\"\n  minimumLabel: String\n}\n\n\"\"\"Question de type `SelectMultiple`\"\"\"\ntype QuestionSelectMultiple implements Question {\n  \"\"\"\n  Indique si la question de type `SelectOne` ou `SelectMultiple` permet une option \"Autre\", que l'utilisateur·ice peut remplir sans contrainte.\n  \"\"\"\n  allowOptionsOther: Boolean!\n\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.\n  \"\"\"\n  answerCounts: [StringToIntMapping!]!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"\n  Uniquement pertinent pour les questions de type `SelectOne` ou `SelectMultiple`\n  \"\"\"\n  options: [String!]!\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"Question de type `SelectOne`\"\"\"\ntype QuestionSelectOne implements Question {\n  \"\"\"\n  Indique si la question de type `SelectOne` ou `SelectMultiple` permet une option \"Autre\", que l'utilisateur·ice peut remplir sans contrainte.\n  \"\"\"\n  allowOptionsOther: Boolean!\n\n  \"\"\"\n  Indique si la réponse à la question est anonyme. Si oui, les personnes pouvant voir les réponses ne pouront jamais savoir la réponse d'une personne à la question\n  \"\"\"\n  anonymous: Boolean!\n\n  \"\"\"\n  Compte le nombre total de réponses pour chaque option. Retourne un `StringToIntMapping` où les clés sont les options et les valeurs sont le nombre de réponses pour l'option.\n  \"\"\"\n  answerCounts: [StringToIntMapping!]!\n  answers(\n    after: String\n    before: String\n\n    \"\"\"Récupérer uniquement les réponses d'un utilisateur, par son uid.\"\"\"\n    by: String\n    first: Int\n    last: Int\n  ): QuestionAnswersConnection!\n\n  \"\"\"\n  La réponse par défaut à cette question. Même si le résultat est bien de type Answer, le champ `id` est vide\n  \"\"\"\n  defaultAnswer: Answer\n\n  \"\"\"Description en Markdown de la question\"\"\"\n  description: String!\n\n  \"\"\"Description en HTML de la question\"\"\"\n  descriptionHtml: String!\n\n  \"\"\"\n  Dans le même ordre que `options`, contient le groupe si l'option porte exactement le nom du groupe, ou null si aucun groupe ne correspond. Pratique pour les questions où l'on demande à choisir entre plusieurs groupes (comme les votes de listes par ex.)\n  \"\"\"\n  groups: [Group]!\n\n  \"\"\"Préfixe d'identifiant: question:\"\"\"\n  id: ID!\n\n  \"\"\"\n  Correspondances entre les réponses à cette question et les sections du formulaire à sauter vers. Dans le même ordre que `options`. Quand un élément est null, la section suivante n'est pas modifiée\n  \"\"\"\n  jumps: [FormSection]!\n\n  \"\"\"Indique si la question est obligatoire\"\"\"\n  mandatory: Boolean!\n\n  \"\"\"La réponse de l'utilisateur·ice connecté·e à cette question\"\"\"\n  myAnswer: Answer\n\n  \"\"\"\n  Uniquement pertinent pour les questions de type `SelectOne` ou `SelectMultiple`\n  \"\"\"\n  options: [String!]!\n\n  \"\"\"Ordre de la question dans la section\"\"\"\n  order: Int!\n\n  \"\"\"Section du formulaire dans laquelle est la question\"\"\"\n  section: FormSection!\n\n  \"\"\"Titre de la question\"\"\"\n  title: String!\n\n  \"\"\"Nombre total de réponses à cette question\"\"\"\n  totalAnswers: Int!\n\n  \"\"\"Type de la question\"\"\"\n  type: QuestionKind!\n}\n\n\"\"\"\nLien d'inscription rapide, qui permet de créer un compte étudiant sans adresse mail étudiante et sans validation manuelle\n\"\"\"\ntype QuickSignup implements Node {\n  code: String!\n  createdAt: DateTime!\n\n  \"\"\"Vrai si le lien est expiré\"\"\"\n  expired: Boolean!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  school: School!\n  schoolId: ID!\n  updatedAt: DateTime!\n  validUntil: DateTime!\n}\n\n\"\"\"\nUne resource pouvant recevoir des réactions (likes, etc) par les utilisateur·ice·s\n\"\"\"\ninterface Reactable {\n  \"\"\"L’identifiant de la resource\"\"\"\n  id: ID!\n\n  \"\"\"Vrai si l’utilisateur·ice connecté·e a réagi avec cet emoji\"\"\"\n  reacted(emoji: String!): Boolean!\n\n  \"\"\"Nombre total de réactions avec cet emoji\"\"\"\n  reactions(emoji: String!): Int!\n}\n\ntype Reaction implements Node {\n  author: User\n  authorId: ID\n  comment: Comment\n  commentId: ID\n  createdAt: DateTime!\n  document: Document\n  documentId: ID\n  emoji: String!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  updatedAt: DateTime!\n}\n\ntype RedisHealthCheck {\n  \"\"\"Whether the Redis publisher client is ready\"\"\"\n  publish: Boolean!\n\n  \"\"\"Whether the Redis subscriber client is ready\"\"\"\n  subscribe: Boolean!\n}\n\n\"\"\"A reservation is a user's registration for a ticket\"\"\"\ntype Registration implements Node {\n  author: User\n  authorEmail: String!\n  authorId: ID\n  authorIsBeneficiary: Boolean!\n\n  \"\"\"En attente du démarrage du paiement par l'utilisateur.ice\"\"\"\n  awaitingPayment: Boolean!\n  beneficiary: String! @deprecated(reason: \"Use `externalBeneficiary` instead.\")\n  beneficiaryUser: User\n\n  \"\"\"\n  L'utilisateur.ice connecté.e peut marquer la réservation comme payée, la valider, etc.\n  \"\"\"\n  canManage: Boolean!\n  cancelled: Boolean!\n  cancelledAt: DateTime\n  cancelledBy: User\n  code: String!\n  createdAt: DateTime!\n  externalBeneficiary: String\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  opposed: Boolean!\n  opposedAt: DateTime\n  opposedBy: User\n  paid: Boolean!\n  paymentMethod: PaymentMethod\n\n  \"\"\"\n  Une demande de paiement a été effectuée mais la place n'est pas encore payée\n  \"\"\"\n  pendingPayment: Boolean!\n\n  \"\"\"Returns an SVG path of the QR Code for the given registration\"\"\"\n  qrCode(\n    \"\"\"\n    URL à utiliser pour le QR Code. `[code]` sera remplacé par le code de la réservation\n    \"\"\"\n    url: URL!\n  ): QRCode!\n  ticket: Ticket!\n  ticketId: ID!\n  updatedAt: DateTime!\n  verified: Boolean!\n  verifiedAt: DateTime\n  verifiedBy: User\n  wantsToPay: Float\n}\n\ntype RegistrationSearchResult {\n  highlightedBeneficiary: String!\n  id: ID!\n  rank: Float\n  registration: Registration!\n  similarity: Float!\n}\n\ntype RegistrationVerificationResult {\n  message: String\n  registration: Registration\n  state: RegistrationVerificationState!\n}\n\nenum RegistrationVerificationState {\n  AlreadyVerified\n  NotFound\n  NotPaid\n  Ok\n  Opposed\n  OtherEvent\n}\n\ntype RegistrationsCounts {\n  cancelled: Float!\n  paid: Float!\n  total: Float!\n  unpaid(method: PaymentMethod): Float!\n  unpaidLydia: Float! @deprecated(reason: \"Use unpaid(method: Lydia)\")\n  verified: Float!\n}\n\n\"\"\"A change in the changelog\"\"\"\ntype ReleaseChange {\n  \"\"\"The authors of the change\"\"\"\n  authors: [String!]!\n  html: String!\n\n  \"\"\"Issues linked to the change\"\"\"\n  issues: [Int!]!\n\n  \"\"\"Merge requests linked to the change\"\"\"\n  mergeRequests: [Int!]!\n\n  \"\"\"People who created the issues (gave the idea, reported the bug, etc.)\"\"\"\n  reporters: [String!]!\n\n  \"\"\"The text of the change\"\"\"\n  text: String!\n}\n\n\"\"\"Changes in the changelog, grouped by category\"\"\"\ntype ReleaseChangesMaps {\n  \"\"\"New features\"\"\"\n  added: [ReleaseChange!]!\n\n  \"\"\"What was fixed\"\"\"\n  fixed: [ReleaseChange!]!\n\n  \"\"\"What was improved\"\"\"\n  improved: [ReleaseChange!]!\n\n  \"\"\"Miscalleanous changes\"\"\"\n  other: [ReleaseChange!]!\n\n  \"\"\"Security changes\"\"\"\n  security: [ReleaseChange!]!\n\n  \"\"\"Technical changes\"\"\"\n  technical: [ReleaseChange!]!\n}\n\ntype School implements Pictured {\n  address: String!\n  aliasMailDomains: [String!]!\n\n  \"\"\"L'utilisateur.ice connecté.e peut modifier les infos de l'école\"\"\"\n  canEdit: Boolean!\n  color: String!\n  description: String!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n  majors: [Major!]!\n  name: String!\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  services: [Service!]!\n  slug: String!\n  studentAssociations: [StudentAssociation!]!\n  studentMailDomain: String!\n\n  \"\"\"Nombre d'étudiant.e.s membres d'une filière appartenant à cette école\"\"\"\n  studentsCount(\n    \"\"\"Filtrer par promotions relatives (1 = 1A, 2 = 2A...)\"\"\"\n    yearTiers: [Int!]! = []\n  ): Int!\n  uid: String!\n}\n\ntype SchoolGroup {\n  majors: [Major!]!\n  names: [String!]!\n}\n\ninput SchoolInput {\n  color: String!\n  id: ID\n  name: String!\n}\n\n\"\"\"A service\"\"\"\ntype Service implements Node {\n  description: String!\n  group: Group @deprecated(reason: \"Use `owner` instead\")\n  id: ID!\n  importance: Int!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  logo: String!\n  logoSourceType: LogoSourceType!\n  name: String!\n  owner: ServiceOwner!\n  school: School @deprecated(reason: \"Use `owner` instead\")\n  studentAssociation: StudentAssociation @deprecated(reason: \"Use `owner` instead\")\n  url: String!\n}\n\n\"\"\"Responsable d'un service\"\"\"\nunion ServiceOwner = Group | School | StudentAssociation\n\n\"\"\"Ressource dont le nombre de partages est compté\"\"\"\ninterface Shareable {\n  id: ID!\n\n  \"\"\"Nombre de partages\"\"\"\n  shares: Int!\n}\n\ntype ShopItem implements Node {\n  createdAt: DateTime!\n  description: String!\n  descriptionHtml: String!\n  endsAt: DateTime\n  group: Group!\n  id: ID!\n  itemOptions: [ShopItemOption!]!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  lydiaAccount: LydiaAccount\n  max: Int!\n  name: String!\n  paymentMethods: [PaymentMethod!]!\n  pictures: [Picture!]!\n  price: Float!\n  shopPayments: [ShopPayment!]!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  startsAt: DateTime\n  stock: Int!\n  stockLeft: Int!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  updatedAt: DateTime!\n  visibility: Visibility!\n}\n\ntype ShopItemAnswer {\n  id: ID!\n  options: [String!]!\n  shopPayment: ShopPayment!\n  shopPaymentId: String!\n}\n\ntype ShopItemOption {\n  id: ID!\n  name: String!\n  options: [String!]!\n  otherToggle: Boolean!\n  required: Boolean!\n  shopItem: ShopItem!\n}\n\ninput ShopItemOptionInput {\n  id: String!\n  name: String!\n  options: [String!]!\n  otherToggle: Boolean!\n  required: Boolean!\n}\n\ntype ShopPayment {\n  createdAt: DateTime!\n  id: ID!\n  paid: Boolean!\n  paymentMethod: PaymentMethod!\n  quantity: Int!\n  shopItem: ShopItem!\n  shopItemAnswer: ShopItemAnswer\n  totalPrice: Float!\n  updatedAt: DateTime!\n  user: User!\n}\n\n\"\"\"Du texte de 200 caractères maximum\"\"\"\nscalar ShortString\n\n\"\"\"Résultat d'une finalisation d'inscription\"\"\"\ntype SignupCompletionResult {\n  \"\"\"\n  L'inscription n'est pas encore terminée, l'équipe administrative de l'AE doit valider la demade d'inscription\n  \"\"\"\n  needsManualValidation: Boolean!\n\n  \"\"\"\n  Token utilisable pour connecter la personne immédiatement suite à l'inscription\n  \"\"\"\n  token: Credential\n}\n\nenum SortDirection {\n  Ascending\n  Descending\n}\n\n\"\"\"Associe une clé à une valeur de type nombre entier\"\"\"\ntype StringToIntMapping {\n  \"\"\"Clé de la paire\"\"\"\n  key: String!\n\n  \"\"\"Valeur de la paire\"\"\"\n  value: Int!\n}\n\n\"\"\"There is one student association per school\"\"\"\ntype StudentAssociation implements Pictured {\n  \"\"\"L'utilisateur.ice connecté.e peut cotiser à cette AE\"\"\"\n  canContribute: Boolean!\n\n  \"\"\"\n  Si l'utilsateur·ice courant·e peut créer des groupes rattachés à cette AE\n  \"\"\"\n  canCreateGroups(\n    \"\"\"\n    Quel type de groupe l'on souhaiterait créer. Si non spécifié, renvoie vrai si l'on peut créer au moins un type de groupe\n    \"\"\"\n    type: GroupType\n  ): Boolean!\n\n  \"\"\"L'utilisateur.ice connecét.e peut modifier les infos de cette AE\"\"\"\n  canEditDetails: Boolean!\n\n  \"\"\"\n  L'utilisateur·ice connecté·e peut éditer (créer ou modifier) les pages de l'AE\n  \"\"\"\n  canEditPages: Boolean!\n\n  \"\"\"L'utilisateur·ice connecté·e peut lister les pages de l'AE\"\"\"\n  canListPages: Boolean!\n\n  \"\"\"L'utilisateur.ice connecté.e cotise à cette AE\"\"\"\n  contributing: Boolean!\n  contributionOptions: [ContributionOption!]!\n\n  \"\"\"\n  Nombre de cotisant.e.s à l'AE. Légalement (selon les statuts de l'AEn7), membres\n  \"\"\"\n  contributorsCount(\n    \"\"\"Filtrer par promotions relatives (1 = 1A, 2 = 2A...)\"\"\"\n    yearTiers: [Int!]!\n  ): Int!\n  createdAt: DateTime!\n  description: String!\n  descriptionHtml: HTML!\n\n  \"\"\"Email de contact de l'AE\"\"\"\n  email: Email\n  groups(after: String, before: String, first: Int, last: Int, types: [GroupType!]): StudentAssociationGroupsConnection!\n\n  \"\"\"Nombre de groupes reliés à cette AE\"\"\"\n  groupsCount: Int!\n\n  \"\"\"\n  Si l'utilisateur·ice connecté·e a une cotisation en attente de paiement\n  \"\"\"\n  hasPendingContribution: Boolean!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n  links: [Link!]!\n  name: String!\n\n  \"\"\"\n  Nombre de membres des différents bureaux de l'AE (selon les statuts de l'AEn7, membres organisateurs)\n  \"\"\"\n  organizerMembersCount(\n    \"\"\"Filtrer par promotions relatives (1 = 1A, 2 = 2A...)\"\"\"\n    yearTiers: [Int!]!\n  ): Int!\n\n  \"\"\"La page associée à l'AE\"\"\"\n  page(\n    \"\"\"\n    Le chemin de la page. Ce n'est pas le chemin complet, mais celui qui est local à l'AE. Voir `Page` pour plus d'informations.\n    \"\"\"\n    path: String!\n  ): Page\n\n  \"\"\"Les pages associées à l'AE\"\"\"\n  pages(after: String, before: String, first: Int, last: Int): PagesConnection!\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  school: School!\n  schoolId: ID!\n\n  \"\"\"Services proposés par une AE\"\"\"\n  services(after: String, before: String, first: Int, last: Int): StudentAssociationServicesConnection!\n\n  \"\"\"\n  Nombre d'étudiant.e.s rattachés à l'AE (cotisant.e.s ou non). Légalement (selon en particulier les statuts de l'AEn7), compte à la fois les membres et les étudiant.e.s susceptibles d'être membres temporaires durant un évènement organisé par l'AE\n  \"\"\"\n  studentsCount(\n    \"\"\"Filtrer par promotions relatives (1 = 1A, 2 = 2A...)\"\"\"\n    yearTiers: [Int!]! = []\n  ): Int!\n  uid: String!\n  updatedAt: DateTime!\n}\n\ntype StudentAssociationGroupsConnection {\n  edges: [StudentAssociationGroupsConnectionEdge!]!\n  nodes: [Group!]!\n  pageInfo: PageInfo!\n}\n\ntype StudentAssociationGroupsConnectionEdge {\n  cursor: String!\n  node: Group!\n}\n\ntype StudentAssociationServicesConnection {\n  edges: [StudentAssociationServicesConnectionEdge!]!\n  nodes: [Service!]!\n  pageInfo: PageInfo!\n}\n\ntype StudentAssociationServicesConnectionEdge {\n  cursor: String!\n  node: Service!\n}\n\ntype Subject {\n  apogeeCode: String\n  documents(after: String, before: String, first: Int, last: Int): SubjectDocumentsConnection!\n  documentsCount: Int!\n  emoji: String!\n  forApprentices: Boolean!\n  id: ID!\n  links: [Link!]!\n  majors: [Major!]!\n  minors: [Minor!]!\n  name: String!\n  nextExamAt: DateTime\n  semester: Int\n  shortName: String!\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n  unit: TeachingUnit\n  unitId: ID\n  yearTier: Int\n}\n\ntype SubjectDocumentsConnection {\n  edges: [SubjectDocumentsConnectionEdge!]!\n  nodes: [Document!]!\n  pageInfo: PageInfo!\n}\n\ntype SubjectDocumentsConnectionEdge {\n  cursor: String!\n  node: Document!\n}\n\n\"\"\"\nPermet de faire des requêtes de données temps-réel, via des _websockets_.\nL'endpoint pour le temps réel est `ws://localhost:4000/graphql`. \n\nPour un client JavaScript, il y a par exemple [GraphQL-WebSocket](https://the-guild.dev/graphql/ws/get-started#use-the-client)\n\"\"\"\ntype Subscription {\n  announcementsNow: [Announcement!]!\n  article(id: LocalID!): Article!\n\n  \"\"\"Récupère une réservation par son code\"\"\"\n  booking(code: String!): Registration!\n  event(id: LocalID!): Event!\n\n  \"\"\"\n  Récupère un formulaire. On peut utiliser une subscription pour avoir la mise à jour en temps réel des réponses au formulaire.\n  \"\"\"\n  form(\n    \"\"\"Identifiant local (sans le préfixe `form:`) du formulaire\"\"\"\n    localId: String!\n  ): Form\n\n  \"\"\"Gets the homepage articles, customized if the user is logged in.\"\"\"\n  homepage(after: String, before: String, first: Int, last: Int): QueryHomepageConnection!\n  kioskReload: Boolean!\n  registration(id: ID!): SubscriptionRegistrationResult!\n}\n\nunion SubscriptionRegistrationResult = Error | SubscriptionRegistrationSuccess | ZodError\n\ntype SubscriptionRegistrationSuccess {\n  data: Registration!\n}\n\ntype TeachingUnit {\n  apogeeCode: String\n  id: ID!\n  name: String!\n  shortName: String!\n  subjects: [Subject!]!\n}\n\ntype Theme implements Node {\n  author: Group\n\n  \"\"\"\n  Si l'utilisateur·ice connecté·e peut changer la visibilité du thème à une certaine valeur\n  \"\"\"\n  canChangeVisibility(to: Visibility!): Boolean!\n\n  \"\"\"\n  Si l'utilisateur·ice connecté·e peut éditer (modifier ou supprimer) le thème\n  \"\"\"\n  canEdit: Boolean!\n  createdAt: DateTime!\n  endsAt: DateTime!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  name: String!\n  startsAt: DateTime!\n  updatedAt: DateTime!\n  values(\n    \"\"\"Ne récupérer que les valeurs d'une variante du thème\"\"\"\n    variant: ThemeVariant\n  ): [ThemeValue!]!\n  visibility: Visibility!\n}\n\n\"\"\"Définit la valeur d'une variable du thème\"\"\"\ntype ThemeValue implements Node {\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  theme: Theme!\n  value: String!\n  variable: ThemeVariable!\n  variant: ThemeVariant!\n}\n\n\"\"\"Les différentes variables qu'un thème peut définir\"\"\"\nenum ThemeVariable {\n  \"\"\"Couleur de fond\"\"\"\n  ColorBackground\n\n  \"\"\"Couleur de fond moins intense\"\"\"\n  ColorBackground2\n\n  \"\"\"Couleur de fond moins intense que ColorBackground2\"\"\"\n  ColorBackground3\n\n  \"\"\"Couleur de fond moins intense que ColorBackground3\"\"\"\n  ColorBackground4\n\n  \"\"\"Couleur des erreurs ou choses dangereuses (souvent rouge)\"\"\"\n  ColorDanger\n\n  \"\"\"Couleur de fond pour ColorDanger\"\"\"\n  ColorDangerBackground\n\n  \"\"\"Couleur d'avant plan\"\"\"\n  ColorForeground\n\n  \"\"\"Couleur d'avant plan moins intense\"\"\"\n  ColorMuted\n\n  \"\"\"Couleur principale\"\"\"\n  ColorPrimary\n\n  \"\"\"Couleur de fond pour ColorPrimary\"\"\"\n  ColorPrimaryBackground\n\n  \"\"\"Couleur d'avant plan moins intense que ColorMuted\"\"\"\n  ColorShy\n\n  \"\"\"Couleur des éléments de succès (souvent vert)\"\"\"\n  ColorSuccess\n\n  \"\"\"Couleur de fond pour ColorSuccess\"\"\"\n  ColorSuccessBackground\n\n  \"\"\"Couleurs des avertissements\"\"\"\n  ColorWarning\n\n  \"\"\"Couleur de fond pour ColorWarning\"\"\"\n  ColorWarningBackground\n\n  \"\"\"Image à utiliser en fond de la barre de navigation en bas (sur mobile)\"\"\"\n  ImageBackgroundNavbarBottom\n\n  \"\"\"\n  Image à utiliser en fond de la barre de navigation en haut (s'affiche seulement sur mobile)\n  \"\"\"\n  ImageBackgroundNavbarTop\n\n  \"\"\"\n  Image à utiliser à la place du logo dans la barre de navigation sur le côté (sur ordinateur)\n  \"\"\"\n  ImageLogoNavbarSide\n\n  \"\"\"\n  Image à utiliser à la place du logo dans la barre de navigation en haut\n  \"\"\"\n  ImageLogoNavbarTop\n\n  \"\"\"Motif à répéter en fond de l'application\"\"\"\n  PatternBackground\n}\n\n\"\"\"Différentes variantes pour un même thème\"\"\"\nenum ThemeVariant {\n  \"\"\"Variante sombre\"\"\"\n  Dark\n\n  \"\"\"Variante claire\"\"\"\n  Light\n}\n\n\"\"\"\nA ticket is a way to register for an event. May include a price and conditions.\n\"\"\"\ntype Ticket implements Node {\n  allowedPaymentMethods: [PaymentMethod!]!\n  autojoinGroups: [Group!]!\n  basePrice: Float! @deprecated(reason: \"Use minimumPrice instead\")\n\n  \"\"\"\n  Indique si le billet peut être supprimé avec `deleteTicket(force: false)`\n  \"\"\"\n  canBeSafelyDeleted: Boolean!\n\n  \"\"\"\n  Un message d'explication sur pourquoi la personne connectée peut réserver ce billet pour quelqu'un d'autre. Null si la personne peut.\n  \"\"\"\n  cannotBookReason(\n    \"\"\"On souhaite réserver pour soi-même\"\"\"\n    themself: Boolean!\n  ): String\n  capacity: Int\n  closesAt: DateTime\n  countingPolicy: TicketCountingPolicy!\n  description: String!\n  descriptionHtml: String!\n  event: Event!\n  eventId: ID!\n\n  \"\"\"Full name, including the ticket group's name if any\"\"\"\n  fullName: String!\n  godsonLimit: Int!\n  group: TicketGroup\n  id: ID!\n\n  \"\"\"Ce billet appartient au groupe de billet donné\"\"\"\n  isInGroup(\n    \"\"\"Null pour tester si le billet est dans aucun groupe\"\"\"\n    id: LocalID\n  ): Boolean!\n  links: [Link!]!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n\n  \"\"\"Prix maximum du billet\"\"\"\n  maximumPrice: Float!\n\n  \"\"\"Prix minimum du billet\"\"\"\n  minimumPrice(\n    \"\"\"\n    Calculer le minimum en prenant en compte les promotions applicables pour l'utilisateur.ice. ATTENTION: Certaines promotions sont confidentielles, et donc le prix minimum avec promotions appliquées ne devrait donc pas être affiché sur des pages susceptibles d'être montrées à d'autres (comme une page de QR code servant à se faire scanner son billet, par exemple)\n    \"\"\"\n    applyPromotions: Boolean! = true\n  ): Float!\n  name: String!\n  onlyManagersCanProvide: Boolean!\n\n  \"\"\"Si le shotgun du billet est ouvert\"\"\"\n  open: Boolean!\n  openToAlumni: Boolean\n  openToApprentices: Boolean\n  openToContributors: Boolean\n  openToExternal: Boolean\n  openToGroups: [Group!]!\n  openToMajors(\n    \"\"\"\n    Ne renvoyer que les filières qui ne consistuent pas ensemble la totalité des filières d'une école. Pratique pour l'affichage sur un billet, en combinant avec openToSchools\n    \"\"\"\n    smart: Boolean! = false\n  ): [Major!]!\n  openToPromotions: [Int!]!\n\n  \"\"\"Écoles telles que toutes leur filières sont autorisées sur ce billet\"\"\"\n  openToSchools: [School!]!\n  opensAt: DateTime\n\n  \"\"\"\n  Nombre de places restantes. Null si l'information n'est pas disponible. N'est jamais null quand il n'y a plus de places disponibles (0)\n  \"\"\"\n  placesLeft: Int\n  price: Float! @deprecated(reason: \"Use minimumPrice(applyPromotions: true) instead\")\n\n  \"\"\"\n  Le billet permet de payer un prix choisi par l'utilisateur.ice, entre minimumPrice et maximumPrice\n  \"\"\"\n  priceIsVariable: Boolean!\n  registrations: [Registration!]!\n\n  \"\"\"Nombre de parrainages restants. Null pour illimité\"\"\"\n  remainingGodsons: Int\n\n  \"\"\"Un nom lisible sans espaces, adaptés pour des URLs.\"\"\"\n  slug: String!\n  ticketGroupId: ID\n  uid: String! @deprecated(reason: \"Use `slug` instead. This field was never universally unique.\")\n}\n\n\"\"\"Contraintes d'un billet\"\"\"\ninput TicketConstraintsInput {\n  \"\"\"Ancien·ne·s étudiant·e·s\"\"\"\n  alumni: BooleanConstraint\n\n  \"\"\"Apprenti·e·s (FISAs)\"\"\"\n  apprentices: BooleanConstraint\n\n  \"\"\"\n  Personnes sans compte Churros ou avec un compte exté (c'est à dire non relié à une école)\n  \"\"\"\n  external: BooleanConstraint\n\n  \"\"\"Membres d'au moins un des groupes spécifiés\"\"\"\n  groupMembers: [UID!]\n\n  \"\"\"Étudiant·e·s de certaines filières\"\"\"\n  majors: [UID!]\n\n  \"\"\"Réservable par les gestionnaires de l'évènement seulement\"\"\"\n  managersOnly: Boolean\n\n  \"\"\"Étudiant·e·s de certaines promos (année)\"\"\"\n  promotions: [Int!]\n\n  \"\"\"Cotisant·e·s de l'AE du groupe organisateur de l'évènement\"\"\"\n  studentAssociationContributors: BooleanConstraint\n}\n\n\"\"\"\nPolitique de comptage des places pour un billet. Permet de décider quand est-ce que l'on compte un billet dans le calcul des places restantes\n\"\"\"\nenum TicketCountingPolicy {\n  \"\"\"On compte le billet dès qu'il est réservé\"\"\"\n  OnBooked\n\n  \"\"\"On compte le billet seulement une fois payé\"\"\"\n  OnPaid\n}\n\n\"\"\"\nA ticket group allows for conditions on multiple tickets, such as an upper limit on the sum of registrations in the sub-tickets\n\"\"\"\ntype TicketGroup implements Node {\n  capacity: Int!\n  event: Event!\n  eventId: ID!\n  id: ID!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  name: String!\n  tickets: [Ticket!]!\n  ticketsCount: Int!\n}\n\ninput TicketGroupInput {\n  capacity: Int!\n  id: ID\n  name: String!\n}\n\n\"\"\"A field whose value matches /^[\\w-]{2,255}$/.\"\"\"\nscalar UID\n\n\"\"\"\nUne adresse internet (URL). Les protocoles autorisés sont: http:, https:, mailto:, tel:\n\"\"\"\nscalar URL\n\ninput UpsertGroupInput {\n  address: String!\n  color: String\n  description: String!\n  email: String\n  longDescription: String!\n  mailingList: String\n  name: String!\n  parent: UID\n  related: [String!]!\n  school: UID @deprecated(reason: \"N'a aucun effet, les groupes ne peuvent plus être reliés à des écoles directement\")\n  selfJoinable: Boolean!\n  studentAssociation: UID\n  type: GroupType!\n\n  \"\"\"\n  Ne sert qu'à la création du groupe. Il est impossible de modifier un uid existant\n  \"\"\"\n  uid: UID\n  website: String!\n}\n\n\"\"\"Users are the people who use the app\"\"\"\ntype User implements Node & Pictured {\n  address: String\n  admin: Boolean!\n\n  \"\"\"\n  Les associations étudiantes dont cet utilisateur·ice est administrateur·ice\n  \"\"\"\n  adminOf: [StudentAssociation!]!\n\n  \"\"\"\n  Vrai si cette personne est administratrice de l'association étudiante donnée\n  \"\"\"\n  adminOfStudentAssociation(\n    \"\"\"UID de l'association étudiante\"\"\"\n    studentAssociation: String!\n  ): Boolean!\n\n  \"\"\"Formulaires complètement répondus par l'utilisateur\"\"\"\n  answeredForms(after: String, before: String, first: Int, last: Int): UserAnsweredFormsConnection!\n  apprentice: Boolean!\n  articles(after: String, before: String, first: Int, last: Int): UserArticlesConnection!\n  birthday: DateTime\n\n  \"\"\"Les affiliations de l'utilisateur à des groupes dont iel est au bureau\"\"\"\n  boardMemberships: [GroupMember!]!\n  booking(\n    \"\"\"\n    Identifiant complet (avec le préfixe) pour un bénéficiaire avec compte Churros, ou texte libre pour un bénéficiaire externe\n    \"\"\"\n    beneficiary: String\n    event: ID!\n  ): Registration!\n  bookings(after: String, before: String, first: Int, forUserOnly: Boolean, last: Int): UserBookingsConnection!\n\n  \"\"\"Les accès rapides de l'utilisateur·rice\"\"\"\n  bookmarks: [Bookmark!]!\n\n  \"\"\"\n  Vrai si cet utilisateur est un bot (i.e. ne représente pas une personne physique)\n  \"\"\"\n  bot: Boolean!\n  canAccessDocuments: Boolean!\n  canBeEdited: Boolean!\n\n  \"\"\"Les AEs pour lesquelles la personne peut cotiser\"\"\"\n  canContributeTo: [StudentAssociation!]!\n\n  \"\"\"Groupes sur lesquels l'utilisateur·ice peut créer des évènements\"\"\"\n  canCreateEventsOn: [Group!]!\n\n  \"\"\"AEs sur lesquelles l'utilisateur·ice peut créer des groupes\"\"\"\n  canCreateGroupsOn: [StudentAssociation!]!\n\n  \"\"\"Groupes sur lesquels l'utilisateur·ice peut créer des posts\"\"\"\n  canCreatePostsOn: [Group!]!\n\n  \"\"\"Vrai si cette personne peut éditer le groupe donné\"\"\"\n  canEditGroup(\n    \"\"\"UID du groupe\"\"\"\n    uid: String!\n  ): Boolean!\n\n  \"\"\"Vrai si cette personne peut éditer les groupes d'au moins une AE\"\"\"\n  canEditGroups: Boolean!\n\n  \"\"\"On peut modifier les permissions de cet·te utilisateur·ice\"\"\"\n  canEditPermissions: Boolean!\n\n  \"\"\"Peut-on modifier le profil de cet utilisateur·ice ?\"\"\"\n  canEditProfile(\n    \"\"\"\n    Lève une erreur avec ce message si l’utilisateur·ice ne peut pas éditer ce profil\n    \"\"\"\n    assert: String\n  ): Boolean!\n\n  \"\"\"\n  Si cet·te utilisateur·rice peut créer, modifier ou supprimer des annonces\n  \"\"\"\n  canManageAnnouncements: Boolean!\n  cededImageRightsToTVn7: Boolean!\n  contributesTo: [StudentAssociation!]\n  contributesWith: [ContributionOption!]!\n\n  \"\"\"Options de cotisations que l'utilisateur·ice connecté·e peut utiliser.\"\"\"\n  contributionOptions: [ContributionOption!]!\n  createdAt: DateTime!\n  credentials: [Credential!]!\n  description: String!\n  descriptionHtml: HTML!\n  email: Email\n  emailChangeRequests(\n    \"\"\"\n    Ne renvoyer que les demandes en attente (mail envoyé mais non confirmé)\n    \"\"\"\n    pending: Boolean\n  ): [EmailChange!]!\n  enabledNotificationChannels: [NotificationChannel!]!\n  external: Boolean!\n  familyTree: FamilyTree!\n  firstName: String!\n  fullName: String!\n  godchildren: [User!]!\n  godparent: User\n  graduationYear: Int!\n  groups: [GroupMember!]!\n\n  \"\"\"Les groupes dont cet·te utilisateur·ice peut éditer les permissions\"\"\"\n  groupsEditorOf: [StudentAssociation!]!\n\n  \"\"\"\n  Si la ressource supported d'avoir une image en thème sombre différente de celle en thème clair\n  \"\"\"\n  hasSeparateDarkPicture: Boolean!\n  id: ID!\n\n  \"\"\"\n  Demandes de parrainage reçues par cet utilisateur·ice (donc pour devenir parrain·e)\n  \"\"\"\n  incomingGodparentRequests: [GodparentRequest!]!\n\n  \"\"\"Vrai si cet utilisateur est l’utilisateur connecté\"\"\"\n  isMe: Boolean\n  lastName: String!\n  latestVersionSeenInChangelog: String!\n  links: [Link!]!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  lydiaPhone: String\n  major: Major\n  majorId: ID\n  managedEvents: [EventManager!]!\n  minor: Minor\n  nickname: String!\n  otherEmails: [Email!]\n\n  \"\"\"\n  Demandes de parrainage faites par cet utilisateur·ice (donc pour devenir fillot·e)\n  \"\"\"\n  outgoingGodparentRequests: [GodparentRequest!]!\n\n  \"\"\"Formulaires partiellement répondus par l'utilisateur\"\"\"\n  partiallyAnsweredForms(after: String, before: String, first: Int, last: Int): UserPartiallyAnsweredFormsConnection!\n  pendingContributions: [ContributionOption!]!\n  phone: String\n\n  \"\"\"Texte alternatif de l'image\"\"\"\n  pictureAltText: String!\n  pictureFile: String!\n\n  \"\"\"Le nom du fichier de l'image, en thème sombre\"\"\"\n  pictureFileDark: String!\n\n  \"\"\"L'URL publique de l'image\"\"\"\n  pictureURL(\n    \"\"\"Utiliser l'image en thème sombre\"\"\"\n    dark: Boolean! = false\n\n    \"\"\"\n    Ajouter un timestamp à la fin de l'URL pour forcer le navigateur à recharger l'image. Le timestamp correspond à la date de dernière mise à jour de la ressource (si disponible), ou à l'heure actuelle.\n    \"\"\"\n    timestamp: Boolean! = true\n  ): String!\n  schoolEmail: Email\n  schoolUid: String\n\n  \"\"\"\n  Vrai si cette personne est administratrice d'au moins une association étudiante\n  \"\"\"\n  studentAssociationAdmin: Boolean!\n  uid: String!\n  yearTier: Int!\n}\n\ntype UserAnsweredFormsConnection {\n  edges: [UserAnsweredFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype UserAnsweredFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\ntype UserArticlesConnection {\n  edges: [UserArticlesConnectionEdge!]!\n  nodes: [Article!]!\n  pageInfo: PageInfo!\n}\n\ntype UserArticlesConnectionEdge {\n  cursor: String!\n  node: Article!\n}\n\ntype UserBookingsConnection {\n  edges: [UserBookingsConnectionEdge!]!\n  nodes: [Registration!]!\n  pageInfo: PageInfo!\n}\n\ntype UserBookingsConnectionEdge {\n  cursor: String!\n  node: Registration!\n}\n\n\"\"\"UserCandidates are users in the registration process\"\"\"\ntype UserCandidate implements Node {\n  apprentice: Boolean!\n  birthday: DateTime\n  cededImageRightsToTVn7: Boolean!\n  createdAt: DateTime\n  email: String!\n\n  \"\"\"Vrai si l'email est une adresse email d'étudiant.\"\"\"\n  emailIsSchoolEmail: Boolean!\n  emailValidated: Boolean!\n  firstName: String!\n  fullName: String!\n  graduationYear: Int!\n  id: ID!\n  lastName: String!\n\n  \"\"\"L'identifiant local de la ressource (sans préfixe)\"\"\"\n  localID: LocalID!\n  major: Major\n  majorId: ID\n\n  \"\"\"\n  Vrai si l'utilisateur aura besoin d'une validation manuelle à la fin de l'inscription. Null si la notion n'a pas encore de sens. Si la filière n'a pas encore été renseignée, retourne vrai seulement si l'inscription devra être validée manuellement si une filière (peut importe laquelle) est choisie. Voir `needsManualValidationForMajor` pour être plus précis\n  \"\"\"\n  needsManualValidation: Boolean\n\n  \"\"\"\n  Vrai si l'utilisateur aura besoin d'une validation manuelle à la fin de l'inscription si iel choisi cette filière. Null si la notion n'a pas encore de sens.\n  \"\"\"\n  needsManualValidationForMajor(\n    \"\"\"L'UID de la filière\"\"\"\n    major: String!\n  ): Boolean\n  suggestedUid: String!\n  uid: String!\n\n  \"\"\"Vrai si l'utilisateur a été créé via un lien d'inscription rapide.\"\"\"\n  usingQuickSignup: Boolean!\n}\n\ntype UserPartiallyAnsweredFormsConnection {\n  edges: [UserPartiallyAnsweredFormsConnectionEdge!]!\n  nodes: [Form!]!\n  pageInfo: PageInfo!\n}\n\ntype UserPartiallyAnsweredFormsConnectionEdge {\n  cursor: String!\n  node: Form!\n}\n\n\"\"\"Champs constituant le profil d'un·e utilisateur·ice\"\"\"\ninput UserProfileInput {\n  \"\"\"Pour effacer: `\"\"`\"\"\"\n  address: String\n\n  \"\"\"\n  Date d'anniversaire. Pour supprimer une date existante, utiliser unsetBirthday\n  \"\"\"\n  birthday: DateTime\n  description: Markdown\n  firstName: String\n  lastName: String\n\n  \"\"\"Pour effacer: `\"\"`\"\"\"\n  nickname: String\n  otherEmails: [Email!]\n\n  \"\"\"Pour effacer, mettre unsetPhone à `true`\"\"\"\n  phone: PhoneNumber\n\n  \"\"\"Supprimer une date d'anniversaire existante\"\"\"\n  unsetBirthday: Boolean\n\n  \"\"\"Supprimer le numéro de téléphone\"\"\"\n  unsetPhone: Boolean\n}\n\ntype UserSearchResult {\n  highlightedDescription: String!\n  id: ID!\n  rank: Float\n  similarity: Float!\n  user: User!\n}\n\nenum Visibility {\n  GroupRestricted\n  Private\n  Public\n  SchoolRestricted\n  Unlisted\n}\n\n\"\"\"A validation error, as a list of field errors.\"\"\"\ntype ZodError implements ErrorInterface {\n  fieldErrors: [ZodFieldError!]!\n  message: String!\n}\n\n\"\"\"A validation issue for a field.\"\"\"\ntype ZodFieldError {\n  message: String!\n  path: [String!]!\n}",
  "config": {
    "template": "graphinx/templates/default",
    "schema": {
      "static": "./schema.graphql"
    },
    "branding": {
      "name": "Churros API",
      "logo": {
        "dark": "https://churros.inpt.fr/logo-masked.png",
        "light": "/logo-masked-dark.png"
      }
    },
    "types": {
      "relay": {
        "connection": "^[A-Z]\\w+Connection$",
        "nodes": "edges.node",
        "edges": "edges"
      },
      "errors": {
        "result": "^[A-Z]\\w+Result$",
        "success": "^[A-Z]\\w+Success$",
        "datafield": "data"
      },
      "input": {
        "type": "Mutation[FieldName]Input"
      }
    },
    "pages": "docs/",
    "static": "docs/static",
    "description": "## Prise en main\n\nL'API de Churros est un API [GraphQL](https://graphql.org/). Pour en savoir plus sur GraphQL, vous\npouvez consulter [la documentation officielle](https://graphql.org/learn/). Mais pour faire simple,\nGraphQL est un langage de requête qui permet de récupérer des données depuis un serveur. Il permet\nde récupérer uniquement les données dont on a besoin, et de les récupérer en une seule requête.\n\n### L'explorateur interactif\n\nAvant de se lancer dans l'utilisation programmatique de l'API, il peut être pratique d'en faire un tour d'horizon avec un _playground_ interactif, disponible en accédant à [churros.app/graphql](https://churros.app/graphql) depuis son navigateur. \n\n### Une première requête\n\nOn peut faire des requêtes GraphQL avec n'importe quel client HTTP. Prenons par exemple la requête suivante:\n\n<pre>\nHTTP/1.1 POST https://churros.app/graphql\n\nContent-Type: application/json\n\n{`{\n  \"query\": \"query { group(uid: \\\"devs\\\") { parent { name } } }\"\n}`}\n</pre>\n\nCette requête récupère le nom du parent du groupe `devs`. On peut voir que la requête est composée\nde deux parties:\n\n- `query`: C'est le type de requête. Ici, c'est une requête de type `query`, qui permet de récupérer\n  des données. Il existe aussi `mutation`, pour modifier, créer ou supprimer des données; et `subscription`, pour s'abonner à des données qui peuvent changer en temps réel (via des [_WebSockets_](/websockets))\n\n- `{ group(uid: \"devs\") { parent { name } } }`: C'est la requête en elle-même. Ici, on demande le\n  nom du parent du groupe `devs`. On peut voir que la requête est composée de plusieurs parties:\n\n  - `group(uid: \"devs\")`: C'est la racine de la requête. Ici, on demande le groupe `devs`. On peut\n  voir que l'on peut passer des arguments à la racine de la requête. Ici, on passe l'argument\n  `uid` avec la valeur `\"devs\"`. On peut voir que l'on peut récupérer plusieurs champs à la racine\n  de la requête. Ici, on récupère le champ `parent`.\n\n  - `parent { name }`: C'est le champ que l'on veut récupérer. Ici, on veut récupérer le champ `name`\n  du parent du groupe `devs`.\n\nOn aura donc la réponse suivante:\n\n```json\n{\n  \"data\": {\n    \"group\": {\n      \"parent\": {\n        \"name\": \"net7\"\n      }\n    }\n  }\n}\n```\n\nOn remarque que la réponse est structurée de la même manière que la requête.\n\n\n### S'authentifier\n\nLa plupart des _queries_ et _mutations_ nécessitent d'être authentifié.\n\nIl y a deux moyens d'authentification:\n\n1. En se connectant avec un compte utilisateur par son mot de passe directement (déconseillé): Voir la [mutation `login`](/users#mutation/login)\n2. Avec une application créée sur Churros (recommandé): Voir la documentation sur l'[OAuth](/oauth)\n\nDans les deux cas, on obtient un token d'authentification. Ce token est à fournir à chaque requête dans le header `Authorization` de la requête HTTP:\n\n```\nAuthorization: Bearer <token>\n```\n\noù `<token>` est le token d'authentification.\n\n## Types spéciaux\n\n### `Result<T>`\n\nCe type représente une réponse de l'API qui pourrait être une erreur. C'est un union constitué de:\n\n- `QueryNomDeLaQuerySuccess`: si la requête réussie. Contient un champ `data` de type `T` qui contient les données de la requête\n- `Error`: si la requête échoue. Contient un champ `message` de type `String` qui contient le message d'erreur.\n- Potentiellement d'autres types d'erreur (par exemple pour la mutation [`authorize`](/oauth#mutation/authorize))\n\n### `Connection<T>`\n\nCes types représentent des réponses paginées de l'API: en effet, il est irréaliste de vouloir renvoyer d'un coup un très grand nombre d'objets, donc l'API n'envoie que les _n_ premiers objets, et fourni un moyen d'avoir accès aux objets suivants si l'on souhaite avoir la liste complète. \n\nDans l'API GraphQL, ces type/Resuls portent comme nom `QueryNomDeLaQueryConnection`, et sont composés de:\n\n- `pageInfo`: informations sur la page courante:\n  - `hasNextPage`: `true` si il y a une page suivante, `false` sinon\n  - `hasPreviousPage`: `true` si il y a une page précédente, `false` sinon\n  - `startCursor`: le curseur du premier élément de la page courante\n  - `endCursor`: le curseur du dernier élément de la page courante\n- `nodes`: la liste des éléments demandés, de type `T`\n- `edges`: une liste d'objets contenant:\n  - `node`: élément de type `T`\n  - `cursor`: le curseur de l'élément\n\nPour récupérer la page suivante, il suffit de ré-appeler la _query_ renvoyant la Connection en question, en fournissant comme argument `after` le champ `endCursor` de la page courante. Par exemple, pour récupérer la page suivante de la liste des groupes:\n\n#### En savoir plus\n\nCe type permet enfait l'implémentation du standard [GraphQL Cursor Connections](https://relay.dev/graphql/connections.htm).\n",
    "footer": "<p>\n  Churros API, version 0.1.0 (at\n  <a href=\"https://git.inpt.fr/inp-net/churros/-/commit/dev\">\n    <code class=\"no-color\">dev</code></a\n  >)\n</p>\n<a class=\"net7\" href=\"https://net7.dev\">\n  Made with <span style:color=\"red\"><strong>&lt;3</strong></span> by\n  <img data-dark src=\"https://churros.inpt.fr/storage/groups/dark/net7-n7.png\" alt=\"net7\" />\n  <img data-light src=\"https://churros.inpt.fr/storage/groups/net7-n7.png\" alt=\"net7\" />\n</a>\n\n<style>\n  .net7 {\n    display: flex;\n    flex-wrap: wrap;\n    column-gap: 1ch;\n    align-items: center;\n    justify-content: center;\n    margin-top: 5rem;\n    font-family: 'Space Mono', monospace;\n    color: var(--fg);\n    text-decoration: none;\n    border-radius: 2rem;\n    transition: box-shadow 0.2s ease;\n  }\n\n  .net7:hover,\n  .net7:focus-visible {\n    box-shadow: 0 0 50px 3px color-mix(in oklab, var(--fg) 15%, var(--shadow));\n  }\n\n  .net7 img {\n    width: 100px;\n    margin-left: 1em;\n  }\n\n  [data-theme=light] .net7 img[data-dark] {\n    display: none;\n  }\n\n  [data-theme=dark] .net7 img[data-light] {\n    display: none;\n  }\n</style>\n",
    "modules": {
      "docs": "src/modules/[module]/README.md",
      "icons": "src/modules/[module]/icon.svg",
      "order": [
        "global",
        "users",
        "groups",
        "posts",
        "events",
        "ticketing",
        "shop",
        "forms",
        "documents",
        "themes",
        "pictures",
        "profiles",
        "notifications",
        "services",
        "bar-weeks",
        "student-associations",
        "pages",
        "schools",
        "curriculum",
        "comments",
        "reactions",
        "links",
        "announcements",
        "payments",
        "gitlab",
        "changelogs",
        "logs",
        "health-checks"
      ],
      "fallback": "global",
      "filesystem": [
        "src/modules/[module]/resolvers/[parent].[fieldname].ts",
        "src/modules/[module]/types/[typename].ts"
      ],
      "mapping": {
        "ID": "global",
        "Node": "global",
        "PageInfo": "global",
        "Error": "global",
        "ErrorInterface": "global",
        "ZodFieldError": "global",
        "NotFoundError": "global",
        "EventBookingsCsv{Result,Success}": "ticketing"
      }
    },
    "environment": {
      "PUBLIC_API_URL": "https://churros.app/graphql",
      "PUBLIC_API_URL_DISPLAY": "churros.app/graphql",
      "PUBLIC_API_WEBSOCKET_URL": "https://churros.app/graphql",
      "CURRENT_COMMIT": "dev",
      "CURRENT_VERSION": "0.1.0",
      "CURRENT_COMMIT_SHORT": "dev",
      "PUBLIC_AUTH_TYPE": "OAuth",
      "PUBLIC_AUTH_HEADER": "Bearer",
      "PUBLIC_OAUTH_AUTHORIZE_URL": "https://authorization-server.com/authorize",
      "PUBLIC_OAUTH_TOKEN_URL": "https://authorization-server.com/token",
      "PUBLIC_OAUTH_CLIENT_ID": "4xDFlLfJifhWDutqEcZiEbHY"
    },
    "_dir": "."
  },
  "items": [
    {
      "name": "buildInfo",
      "id": "Query.buildInfo",
      "type": "query",
      "returnType": "BuildInfo",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/global/resolvers/query.build-info.ts",
          "path": "src/modules/global/resolvers/query.build-info.ts"
        }
      }
    },
    {
      "name": "loggedIn",
      "id": "Query.loggedIn",
      "type": "query",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/global/resolvers/query.logged-in.ts",
          "path": "src/modules/global/resolvers/query.logged-in.ts"
        }
      }
    },
    {
      "name": "renderMarkdown",
      "id": "Query.renderMarkdown",
      "type": "query",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/global/resolvers/query.render-markdown.ts",
          "path": "src/modules/global/resolvers/query.render-markdown.ts"
        }
      }
    },
    {
      "name": "uidIsAvailable",
      "id": "Query.uidIsAvailable",
      "type": "query",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/global/resolvers/query.uid-is-available.ts",
          "path": "src/modules/global/resolvers/query.uid-is-available.ts"
        }
      }
    },
    {
      "name": "trackShare",
      "id": "Mutation.trackShare",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/global/resolvers/mutation.track-share.ts",
          "path": "src/modules/global/resolvers/mutation.track-share.ts"
        }
      }
    },
    {
      "name": "ID",
      "id": "ID",
      "type": "type",
      "referencedBy": [
        "Announcement",
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerInput",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSearchResult",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "Article",
        "ArticleSearchResultType",
        "BarWeek",
        "Bookmark",
        "Comment",
        "Commentable",
        "ContributionOption",
        "Credential",
        "Document",
        "DocumentSearchResult",
        "EmailChange",
        "EvenSearchResult",
        "Event",
        "EventManager",
        "Form",
        "FormSearchResult",
        "FormSection",
        "GodparentRequest",
        "Group",
        "GroupMember",
        "GroupSearchResult",
        "Link",
        "LogEntry",
        "LydiaAccount",
        "Major",
        "Minor",
        "MutationUpsertFormInput",
        "MutationUpsertFormSectionInput",
        "MutationUpsertQuestionInput",
        "Node",
        "Notification",
        "NotificationSubscription",
        "Page",
        "Picture",
        "Pictured",
        "ProfitsBreakdownByTicket",
        "Question",
        "QuestionFileUpload",
        "QuestionOptionInput",
        "QuestionScalar",
        "QuestionScale",
        "QuestionSelectMultiple",
        "QuestionSelectOne",
        "QuickSignup",
        "Reactable",
        "Reaction",
        "Registration",
        "RegistrationSearchResult",
        "School",
        "SchoolInput",
        "Service",
        "Shareable",
        "ShopItem",
        "ShopItemAnswer",
        "ShopItemOption",
        "ShopPayment",
        "StudentAssociation",
        "Subject",
        "TeachingUnit",
        "Theme",
        "ThemeValue",
        "Ticket",
        "TicketGroup",
        "TicketGroupInput",
        "User",
        "UserCandidate",
        "UserSearchResult"
      ],
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "ID"
        }
      }
    },
    {
      "name": "BuildInfo",
      "id": "BuildInfo",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "Color",
      "id": "Color",
      "type": "type",
      "referencedBy": [
        "Group",
        "GroupProfileInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/color.ts",
          "path": "src/modules/global/types/color.ts"
        }
      }
    },
    {
      "name": "DateRangeInput",
      "id": "DateRangeInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/date-range-input.ts",
          "path": "src/modules/global/types/date-range-input.ts"
        }
      }
    },
    {
      "name": "DateTime",
      "id": "DateTime",
      "type": "type",
      "referencedBy": [
        "Announcement",
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "AnswersOfUser",
        "Article",
        "BarWeek",
        "ChangelogRelease",
        "Comment",
        "Credential",
        "DateRangeInput",
        "Document",
        "EmailChange",
        "Event",
        "EventsByDay",
        "Form",
        "GodparentRequest",
        "Group",
        "GroupMember",
        "Issue",
        "IssueComment",
        "Link",
        "LogEntry",
        "MutationUpsertFormInput",
        "Notification",
        "NotificationSubscription",
        "Page",
        "QuickSignup",
        "Reaction",
        "Registration",
        "ShopItem",
        "ShopPayment",
        "StudentAssociation",
        "Subject",
        "Theme",
        "Ticket",
        "User",
        "UserCandidate",
        "UserProfileInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/date-time.ts",
          "path": "src/modules/global/types/date-time.ts"
        }
      }
    },
    {
      "name": "Email",
      "id": "Email",
      "type": "type",
      "referencedBy": [
        "Group",
        "GroupProfileInput",
        "StudentAssociation",
        "User",
        "UserProfileInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/email.ts",
          "path": "src/modules/global/types/email.ts"
        }
      }
    },
    {
      "name": "Error",
      "id": "Error",
      "type": "type",
      "referencedBy": [
        "EventBookingsCsvResult",
        "MutationAcceptRegistrationResult",
        "MutationAddFileToPageResult",
        "MutationAddGroupMemberResult",
        "MutationAddLinksResult",
        "MutationAnswerFormSectionResult",
        "MutationAnswerGodparentRequestResult",
        "MutationBanFromEventResult",
        "MutationBookEventResult",
        "MutationCancelBookingResult",
        "MutationCancelPendingContributionResult",
        "MutationChangeEventOrganizerResult",
        "MutationContributeResult",
        "MutationCreateAppleWalletPassResult",
        "MutationCreateEventResult",
        "MutationCreateGoogleWalletPassResult",
        "MutationCreateGroupAccessTokenResult",
        "MutationCreateGroupResult",
        "MutationCreatePasswordResetResult",
        "MutationCreatePostResult",
        "MutationCreateTicketResult",
        "MutationDeleteContributionResult",
        "MutationDeleteEventResult",
        "MutationDeleteGodchildResult",
        "MutationDeleteGodparentResult",
        "MutationDeleteLinkResult",
        "MutationDeletePageResult",
        "MutationDeleteShopItemResult",
        "MutationDeleteTicketGroupResult",
        "MutationDeleteTicketResult",
        "MutationFinishPaypalRegistrationPaymentResult",
        "MutationLoginResult",
        "MutationMailFormAnswersResult",
        "MutationMarkBookingAsPaidResult",
        "MutationMarkContributionAsPaidResult",
        "MutationOpposeRegistrationResult",
        "MutationPaidShopPaymentResult",
        "MutationPayBookingResult",
        "MutationRegisterGoogleCredentialResult",
        "MutationRemoveEventManagerResult",
        "MutationRemoveFileFromPageResult",
        "MutationRequestEmailChangeResult",
        "MutationResetPasswordResult",
        "MutationSaveLydiaPhoneNumberResult",
        "MutationSelfJoinGroupResult",
        "MutationSetEventApplicableOffersResult",
        "MutationSetEventBeneficiaryResult",
        "MutationSetEventCoOrganizersResult",
        "MutationSetEventDatesResult",
        "MutationSetEventVisibilityResult",
        "MutationSetGroupJoinPolicyResult",
        "MutationSetGroupStudentAssociationResult",
        "MutationSetGroupTypeResult",
        "MutationSetParentGroupResult",
        "MutationSetPictureResult",
        "MutationSetTicketGroupResult",
        "MutationStartSignupResult",
        "MutationSubscribeToNotificationsResult",
        "MutationUnbanFromEventResult",
        "MutationUnsubscribeFromNotificationsResult",
        "MutationUpdateEventRecurrenceResult",
        "MutationUpdateEventResult",
        "MutationUpdateGroupProfileResult",
        "MutationUpdateLinkResult",
        "MutationUpdateTicketConstraintsResult",
        "MutationUpdateTicketResult",
        "MutationUpdateUserCandidateResult",
        "MutationUpdateUserCurriculumResult",
        "MutationUpdateUserPermissionsResult",
        "MutationUpdateUserProfileResult",
        "MutationUpdateUserResult",
        "MutationUpsertAnnouncementResult",
        "MutationUpsertArticleResult",
        "MutationUpsertBarWeekResult",
        "MutationUpsertDocumentResult",
        "MutationUpsertEventManagerResult",
        "MutationUpsertGodparentRequestResult",
        "MutationUpsertGroupResult",
        "MutationUpsertPageResult",
        "MutationUpsertRegistrationResult",
        "MutationUpsertServiceResult",
        "MutationUpsertShopItemResult",
        "MutationUpsertShopPaymentResult",
        "MutationUpsertThemeResult",
        "MutationUpsertTicketGroupResult",
        "MutationUsePasswordResetResult",
        "MutationValidateEmailResult",
        "MutationVerifyBookingResult",
        "QueryCodeContributorsResult",
        "QueryCombinedChangelogResult",
        "QueryGroupMembersCsvResult",
        "QueryRegistrationResult",
        "QueryUpcomingChangelogResult",
        "SubscriptionRegistrationResult"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "Error"
        }
      }
    },
    {
      "name": "ErrorInterface",
      "id": "ErrorInterface",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "ErrorInterface"
        }
      }
    },
    {
      "name": "File",
      "id": "File",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/file.ts",
          "path": "src/modules/global/types/file.ts"
        }
      }
    },
    {
      "name": "HTML",
      "id": "HTML",
      "type": "type",
      "referencedBy": [
        "Event",
        "Group",
        "StudentAssociation",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/html.ts",
          "path": "src/modules/global/types/html.ts"
        }
      }
    },
    {
      "name": "LocalID",
      "id": "LocalID",
      "type": "type",
      "referencedBy": [
        "Announcement",
        "Article",
        "BarWeek",
        "Bookmark",
        "Comment",
        "ContributionOption",
        "Document",
        "EmailChange",
        "Event",
        "EventManager",
        "Form",
        "Group",
        "Link",
        "LogEntry",
        "LydiaAccount",
        "Minor",
        "Node",
        "Notification",
        "QuickSignup",
        "Reaction",
        "Registration",
        "Service",
        "ShopItem",
        "Theme",
        "ThemeValue",
        "Ticket",
        "TicketGroup",
        "User",
        "UserCandidate"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/local-id.ts",
          "path": "src/modules/global/types/local-id.ts"
        }
      }
    },
    {
      "name": "LooseURL",
      "id": "LooseURL",
      "type": "type",
      "referencedBy": [
        "LinkInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/loose-url.ts",
          "path": "src/modules/global/types/loose-url.ts"
        }
      }
    },
    {
      "name": "Markdown",
      "id": "Markdown",
      "type": "type",
      "referencedBy": [
        "GroupProfileInput",
        "UserProfileInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/markdown.ts",
          "path": "src/modules/global/types/markdown.ts"
        }
      }
    },
    {
      "name": "MutationSetPictureResult",
      "id": "MutationSetPictureResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetPictureResult",
        "successDataType": "Pictured",
        "successType": "MutationSetPictureSuccess"
      },
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/pictured.ts",
          "path": "src/modules/global/types/pictured.ts"
        }
      }
    },
    {
      "name": "Node",
      "id": "Node",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "Node"
        }
      }
    },
    {
      "name": "NotFoundError",
      "id": "NotFoundError",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "NotFoundError"
        }
      }
    },
    {
      "name": "PageInfo",
      "id": "PageInfo",
      "type": "type",
      "referencedBy": [
        "CommentsConnection",
        "EventBookingsConnection",
        "EventLogsConnection",
        "FormAnswersByUserConnection",
        "FormAnswersConnection",
        "FormQuestionsConnection",
        "FormSectionAnswersConnection",
        "GroupEventsConnection",
        "GroupShopItemsConnection",
        "PagesConnection",
        "QueryAllFormsConnection",
        "QueryAllUsersConnection",
        "QueryAnnouncementsConnection",
        "QueryDocumentsConnection",
        "QueryEventsByDayConnection",
        "QueryEventsConnection",
        "QueryFormsConnection",
        "QueryHomepageConnection",
        "QueryLogsConnection",
        "QueryMinorsConnection",
        "QueryNotificationsConnection",
        "QueryPagesConnection",
        "QueryQuickSignupsConnection",
        "QueryReactionsConnection",
        "QueryUserCandidatesConnection",
        "QuestionAnswersConnection",
        "StudentAssociationGroupsConnection",
        "StudentAssociationServicesConnection",
        "SubjectDocumentsConnection",
        "UserAnsweredFormsConnection",
        "UserArticlesConnection",
        "UserBookingsConnection",
        "UserPartiallyAnsweredFormsConnection"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "PageInfo"
        }
      }
    },
    {
      "name": "PhoneNumber",
      "id": "PhoneNumber",
      "type": "type",
      "referencedBy": [
        "UserProfileInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/phone-number.ts",
          "path": "src/modules/global/types/phone-number.ts"
        }
      }
    },
    {
      "name": "Pictured",
      "id": "Pictured",
      "type": "type",
      "referencedBy": [
        "MutationSetPictureSuccess"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/pictured.ts",
          "path": "src/modules/global/types/pictured.ts"
        }
      }
    },
    {
      "name": "PositiveInt",
      "id": "PositiveInt",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/positive-int.ts",
          "path": "src/modules/global/types/positive-int.ts"
        }
      }
    },
    {
      "name": "QRCode",
      "id": "QRCode",
      "type": "type",
      "referencedBy": [
        "Registration"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/qr-code.ts",
          "path": "src/modules/global/types/qr-code.ts"
        }
      }
    },
    {
      "name": "Shareable",
      "id": "Shareable",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/shareable.ts",
          "path": "src/modules/global/types/shareable.ts"
        }
      }
    },
    {
      "name": "ShortString",
      "id": "ShortString",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/short-string.ts",
          "path": "src/modules/global/types/short-string.ts"
        }
      }
    },
    {
      "name": "SortDirection",
      "id": "SortDirection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/sort-direction.ts",
          "path": "src/modules/global/types/sort-direction.ts"
        }
      }
    },
    {
      "name": "StringToIntMapping",
      "id": "StringToIntMapping",
      "type": "type",
      "referencedBy": [
        "QuestionScale",
        "QuestionSelectMultiple",
        "QuestionSelectOne"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/string-to-int-mapping.ts",
          "path": "src/modules/global/types/string-to-int-mapping.ts"
        }
      }
    },
    {
      "name": "UID",
      "id": "UID",
      "type": "type",
      "referencedBy": [
        "GroupProfileInput",
        "TicketConstraintsInput",
        "UpsertGroupInput"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/uid.ts",
          "path": "src/modules/global/types/uid.ts"
        }
      }
    },
    {
      "name": "URL",
      "id": "URL",
      "type": "type",
      "referencedBy": [
        "Event",
        "Link"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/url.ts",
          "path": "src/modules/global/types/url.ts"
        }
      }
    },
    {
      "name": "Visibility",
      "id": "Visibility",
      "type": "type",
      "referencedBy": [
        "Article",
        "Event",
        "Form",
        "MutationUpsertFormInput",
        "ShopItem",
        "Theme"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/visibility.ts",
          "path": "src/modules/global/types/visibility.ts"
        }
      }
    },
    {
      "name": "ZodError",
      "id": "ZodError",
      "type": "type",
      "referencedBy": [
        "EventBookingsCsvResult",
        "MutationAcceptRegistrationResult",
        "MutationAddFileToPageResult",
        "MutationAddGroupMemberResult",
        "MutationAddLinksResult",
        "MutationAnswerFormSectionResult",
        "MutationAnswerGodparentRequestResult",
        "MutationBanFromEventResult",
        "MutationBookEventResult",
        "MutationCancelBookingResult",
        "MutationCancelPendingContributionResult",
        "MutationChangeEventOrganizerResult",
        "MutationContributeResult",
        "MutationCreateAppleWalletPassResult",
        "MutationCreateEventResult",
        "MutationCreateGoogleWalletPassResult",
        "MutationCreateGroupAccessTokenResult",
        "MutationCreateGroupResult",
        "MutationCreatePasswordResetResult",
        "MutationCreatePostResult",
        "MutationCreateTicketResult",
        "MutationDeleteContributionResult",
        "MutationDeleteEventResult",
        "MutationDeleteGodchildResult",
        "MutationDeleteGodparentResult",
        "MutationDeleteLinkResult",
        "MutationDeletePageResult",
        "MutationDeleteShopItemResult",
        "MutationDeleteTicketGroupResult",
        "MutationDeleteTicketResult",
        "MutationFinishPaypalRegistrationPaymentResult",
        "MutationLoginResult",
        "MutationMailFormAnswersResult",
        "MutationMarkBookingAsPaidResult",
        "MutationMarkContributionAsPaidResult",
        "MutationOpposeRegistrationResult",
        "MutationPaidShopPaymentResult",
        "MutationPayBookingResult",
        "MutationRegisterGoogleCredentialResult",
        "MutationRemoveEventManagerResult",
        "MutationRemoveFileFromPageResult",
        "MutationRequestEmailChangeResult",
        "MutationResetPasswordResult",
        "MutationSaveLydiaPhoneNumberResult",
        "MutationSelfJoinGroupResult",
        "MutationSetEventApplicableOffersResult",
        "MutationSetEventBeneficiaryResult",
        "MutationSetEventCoOrganizersResult",
        "MutationSetEventDatesResult",
        "MutationSetEventVisibilityResult",
        "MutationSetGroupJoinPolicyResult",
        "MutationSetGroupStudentAssociationResult",
        "MutationSetGroupTypeResult",
        "MutationSetParentGroupResult",
        "MutationSetPictureResult",
        "MutationSetTicketGroupResult",
        "MutationStartSignupResult",
        "MutationSubscribeToNotificationsResult",
        "MutationUnbanFromEventResult",
        "MutationUnsubscribeFromNotificationsResult",
        "MutationUpdateEventRecurrenceResult",
        "MutationUpdateEventResult",
        "MutationUpdateGroupProfileResult",
        "MutationUpdateLinkResult",
        "MutationUpdateTicketConstraintsResult",
        "MutationUpdateTicketResult",
        "MutationUpdateUserCandidateResult",
        "MutationUpdateUserCurriculumResult",
        "MutationUpdateUserPermissionsResult",
        "MutationUpdateUserProfileResult",
        "MutationUpdateUserResult",
        "MutationUpsertAnnouncementResult",
        "MutationUpsertArticleResult",
        "MutationUpsertBarWeekResult",
        "MutationUpsertDocumentResult",
        "MutationUpsertEventManagerResult",
        "MutationUpsertGodparentRequestResult",
        "MutationUpsertGroupResult",
        "MutationUpsertPageResult",
        "MutationUpsertRegistrationResult",
        "MutationUpsertServiceResult",
        "MutationUpsertShopItemResult",
        "MutationUpsertShopPaymentResult",
        "MutationUpsertThemeResult",
        "MutationUpsertTicketGroupResult",
        "MutationUsePasswordResetResult",
        "MutationValidateEmailResult",
        "MutationVerifyBookingResult",
        "QueryCodeContributorsResult",
        "QueryCombinedChangelogResult",
        "QueryGroupMembersCsvResult",
        "QueryRegistrationResult",
        "QueryUpcomingChangelogResult",
        "SubscriptionRegistrationResult"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/global/types/zod-error.ts",
          "path": "src/modules/global/types/zod-error.ts"
        }
      }
    },
    {
      "name": "ZodFieldError",
      "id": "ZodFieldError",
      "type": "type",
      "referencedBy": [
        "ZodError"
      ],
      "deprecationReason": null,
      "moduleName": "global",
      "match": {
        "static": {
          "matcher": "ZodFieldError"
        }
      }
    },
    {
      "name": "allUsers",
      "id": "Query.allUsers",
      "type": "query",
      "returnType": "QueryAllUsersConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "User",
        "edgeType": "QueryAllUsersConnectionEdge",
        "connectionType": "QueryAllUsersConnection"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.all-users.ts",
          "path": "src/modules/users/resolvers/query.all-users.ts"
        }
      }
    },
    {
      "name": "assertMe",
      "id": "Query.assertMe",
      "type": "query",
      "returnType": "User",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.assert-me.ts",
          "path": "src/modules/users/resolvers/query.assert-me.ts"
        }
      }
    },
    {
      "name": "birthdays",
      "id": "Query.birthdays",
      "type": "query",
      "returnType": "User",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.birthdays.ts",
          "path": "src/modules/users/resolvers/query.birthdays.ts"
        }
      }
    },
    {
      "name": "bookmarked",
      "id": "Query.bookmarked",
      "type": "query",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.bookmarked.ts",
          "path": "src/modules/users/resolvers/query.bookmarked.ts"
        }
      }
    },
    {
      "name": "existsInSchoolLdap",
      "id": "Query.existsInSchoolLdap",
      "type": "query",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.exists-in-school-ldap.ts",
          "path": "src/modules/users/resolvers/query.exists-in-school-ldap.ts"
        }
      }
    },
    {
      "name": "godparentRequest",
      "id": "Query.godparentRequest",
      "type": "query",
      "returnType": "GodparentRequest",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.godparent-request.ts",
          "path": "src/modules/users/resolvers/query.godparent-request.ts"
        }
      }
    },
    {
      "name": "godparentRequests",
      "id": "Query.godparentRequests",
      "type": "query",
      "returnType": "GodparentRequest",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.godparent-requests.ts",
          "path": "src/modules/users/resolvers/query.godparent-requests.ts"
        }
      }
    },
    {
      "name": "me",
      "id": "Query.me",
      "type": "query",
      "returnType": "User",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.me.ts",
          "path": "src/modules/users/resolvers/query.me.ts"
        }
      }
    },
    {
      "name": "quickSignup",
      "id": "Query.quickSignup",
      "type": "query",
      "returnType": "QuickSignup",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.quick-signup.ts",
          "path": "src/modules/users/resolvers/query.quick-signup.ts"
        }
      }
    },
    {
      "name": "quickSignups",
      "id": "Query.quickSignups",
      "type": "query",
      "returnType": "QueryQuickSignupsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "QuickSignup",
        "edgeType": "QueryQuickSignupsConnectionEdge",
        "connectionType": "QueryQuickSignupsConnection"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.quick-signups.ts",
          "path": "src/modules/users/resolvers/query.quick-signups.ts"
        }
      }
    },
    {
      "name": "searchUsers",
      "id": "Query.searchUsers",
      "type": "query",
      "returnType": "UserSearchResult",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.search-users.ts",
          "path": "src/modules/users/resolvers/query.search-users.ts"
        }
      }
    },
    {
      "name": "suggestedUid",
      "id": "Query.suggestedUid",
      "type": "query",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.suggested-uid.ts",
          "path": "src/modules/users/resolvers/query.suggested-uid.ts"
        }
      }
    },
    {
      "name": "user",
      "id": "Query.user",
      "type": "query",
      "returnType": "User",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.user.ts",
          "path": "src/modules/users/resolvers/query.user.ts"
        }
      }
    },
    {
      "name": "userByEmail",
      "id": "Query.userByEmail",
      "type": "query",
      "returnType": "User",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.user-by-email.ts",
          "path": "src/modules/users/resolvers/query.user-by-email.ts"
        }
      }
    },
    {
      "name": "userCandidate",
      "id": "Query.userCandidate",
      "type": "query",
      "returnType": "UserCandidate",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.user-candidate.ts",
          "path": "src/modules/users/resolvers/query.user-candidate.ts"
        }
      }
    },
    {
      "name": "userCandidateByEmail",
      "id": "Query.userCandidateByEmail",
      "type": "query",
      "returnType": "UserCandidate",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.user-candidate-by-email.ts",
          "path": "src/modules/users/resolvers/query.user-candidate-by-email.ts"
        }
      }
    },
    {
      "name": "userCandidates",
      "id": "Query.userCandidates",
      "type": "query",
      "returnType": "QueryUserCandidatesConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "UserCandidate",
        "edgeType": "QueryUserCandidatesConnectionEdge",
        "connectionType": "QueryUserCandidatesConnection"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/query.user-candidates.ts",
          "path": "src/modules/users/resolvers/query.user-candidates.ts"
        }
      }
    },
    {
      "name": "acceptRegistration",
      "id": "Mutation.acceptRegistration",
      "type": "mutation",
      "returnType": "MutationAcceptRegistrationResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAcceptRegistrationResult",
        "successDataType": "User",
        "successType": "MutationAcceptRegistrationSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.accept-registration.ts",
          "path": "src/modules/users/resolvers/mutation.accept-registration.ts"
        }
      }
    },
    {
      "name": "answerGodparentRequest",
      "id": "Mutation.answerGodparentRequest",
      "type": "mutation",
      "returnType": "MutationAnswerGodparentRequestResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAnswerGodparentRequestResult",
        "successDataType": "GodparentRequest",
        "successType": "MutationAnswerGodparentRequestSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.answer-godparent-request.ts",
          "path": "src/modules/users/resolvers/mutation.answer-godparent-request.ts"
        }
      }
    },
    {
      "name": "bookmark",
      "id": "Mutation.bookmark",
      "type": "mutation",
      "returnType": "Bookmark",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.bookmark.ts",
          "path": "src/modules/users/resolvers/mutation.bookmark.ts"
        }
      }
    },
    {
      "name": "completeSignup",
      "id": "Mutation.completeSignup",
      "type": "mutation",
      "returnType": "SignupCompletionResult",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.complete-signup.ts",
          "path": "src/modules/users/resolvers/mutation.complete-signup.ts"
        }
      }
    },
    {
      "name": "createBot",
      "id": "Mutation.createBot",
      "type": "mutation",
      "returnType": "User",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.create-bot.ts",
          "path": "src/modules/users/resolvers/mutation.create-bot.ts"
        }
      }
    },
    {
      "name": "createPasswordReset",
      "id": "Mutation.createPasswordReset",
      "type": "mutation",
      "returnType": "MutationCreatePasswordResetResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreatePasswordResetResult",
        "successDataType": "Boolean",
        "successType": "MutationCreatePasswordResetSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.create-password-reset.ts",
          "path": "src/modules/users/resolvers/mutation.create-password-reset.ts"
        }
      }
    },
    {
      "name": "createQuickSignup",
      "id": "Mutation.createQuickSignup",
      "type": "mutation",
      "returnType": "QuickSignup",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.create-quick-signup.ts",
          "path": "src/modules/users/resolvers/mutation.create-quick-signup.ts"
        }
      }
    },
    {
      "name": "deleteGodchild",
      "id": "Mutation.deleteGodchild",
      "type": "mutation",
      "returnType": "MutationDeleteGodchildResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteGodchildResult",
        "successDataType": "User",
        "successType": "MutationDeleteGodchildSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.delete-godchild.ts",
          "path": "src/modules/users/resolvers/mutation.delete-godchild.ts"
        }
      }
    },
    {
      "name": "deleteGodparent",
      "id": "Mutation.deleteGodparent",
      "type": "mutation",
      "returnType": "MutationDeleteGodparentResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteGodparentResult",
        "successDataType": "User",
        "successType": "MutationDeleteGodparentSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.delete-godparent.ts",
          "path": "src/modules/users/resolvers/mutation.delete-godparent.ts"
        }
      }
    },
    {
      "name": "deleteQuickSignup",
      "id": "Mutation.deleteQuickSignup",
      "type": "mutation",
      "returnType": "QuickSignup",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.delete-quick-signup.ts",
          "path": "src/modules/users/resolvers/mutation.delete-quick-signup.ts"
        }
      }
    },
    {
      "name": "deleteToken",
      "id": "Mutation.deleteToken",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.delete-token.ts",
          "path": "src/modules/users/resolvers/mutation.delete-token.ts"
        }
      }
    },
    {
      "name": "deleteUserPicture",
      "id": "Mutation.deleteUserPicture",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.delete-user-picture.ts",
          "path": "src/modules/users/resolvers/mutation.delete-user-picture.ts"
        }
      }
    },
    {
      "name": "login",
      "id": "Mutation.login",
      "type": "mutation",
      "returnType": "MutationLoginResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "AwaitingValidationError",
          "Error",
          "ZodError"
        ],
        "resultType": "MutationLoginResult",
        "successDataType": "Credential",
        "successType": "MutationLoginSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.login.ts",
          "path": "src/modules/users/resolvers/mutation.login.ts"
        }
      }
    },
    {
      "name": "logout",
      "id": "Mutation.logout",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.logout.ts",
          "path": "src/modules/users/resolvers/mutation.logout.ts"
        }
      }
    },
    {
      "name": "refuseRegistration",
      "id": "Mutation.refuseRegistration",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.refuse-registration.ts",
          "path": "src/modules/users/resolvers/mutation.refuse-registration.ts"
        }
      }
    },
    {
      "name": "registerGoogleCredential",
      "id": "Mutation.registerGoogleCredential",
      "type": "mutation",
      "returnType": "MutationRegisterGoogleCredentialResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRegisterGoogleCredentialResult",
        "successDataType": "Boolean",
        "successType": "MutationRegisterGoogleCredentialSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.register-google-credential.ts",
          "path": "src/modules/users/resolvers/mutation.register-google-credential.ts"
        }
      }
    },
    {
      "name": "renameSession",
      "id": "Mutation.renameSession",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.rename-session.ts",
          "path": "src/modules/users/resolvers/mutation.rename-session.ts"
        }
      }
    },
    {
      "name": "requestEmailChange",
      "id": "Mutation.requestEmailChange",
      "type": "mutation",
      "returnType": "MutationRequestEmailChangeResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRequestEmailChangeResult",
        "successDataType": "EmailChange",
        "successType": "MutationRequestEmailChangeSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.request-email-change.ts",
          "path": "src/modules/users/resolvers/mutation.request-email-change.ts"
        }
      }
    },
    {
      "name": "resetPassword",
      "id": "Mutation.resetPassword",
      "type": "mutation",
      "returnType": "MutationResetPasswordResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationResetPasswordResult",
        "successDataType": "Boolean",
        "successType": "MutationResetPasswordSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.reset-password.ts",
          "path": "src/modules/users/resolvers/mutation.reset-password.ts"
        }
      }
    },
    {
      "name": "saveLydiaPhoneNumber",
      "id": "Mutation.saveLydiaPhoneNumber",
      "type": "mutation",
      "returnType": "MutationSaveLydiaPhoneNumberResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSaveLydiaPhoneNumberResult",
        "successDataType": "User",
        "successType": "MutationSaveLydiaPhoneNumberSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.save-lydia-phone-number.ts",
          "path": "src/modules/users/resolvers/mutation.save-lydia-phone-number.ts"
        }
      }
    },
    {
      "name": "startSignup",
      "id": "Mutation.startSignup",
      "type": "mutation",
      "returnType": "MutationStartSignupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationStartSignupResult",
        "successDataType": "UserCandidate",
        "successType": "MutationStartSignupSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.start-signup.ts",
          "path": "src/modules/users/resolvers/mutation.start-signup.ts"
        }
      }
    },
    {
      "name": "syncUserLdap",
      "id": "Mutation.syncUserLdap",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.sync-user-ldap.ts",
          "path": "src/modules/users/resolvers/mutation.sync-user-ldap.ts"
        }
      }
    },
    {
      "name": "unbookmark",
      "id": "Mutation.unbookmark",
      "type": "mutation",
      "returnType": "Bookmark",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.unbookmark.ts",
          "path": "src/modules/users/resolvers/mutation.unbookmark.ts"
        }
      }
    },
    {
      "name": "updateNotificationSettings",
      "id": "Mutation.updateNotificationSettings",
      "type": "mutation",
      "returnType": "NotificationChannel",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-notification-settings.ts",
          "path": "src/modules/users/resolvers/mutation.update-notification-settings.ts"
        }
      }
    },
    {
      "name": "updateUser",
      "id": "Mutation.updateUser",
      "type": "mutation",
      "returnType": "MutationUpdateUserResult",
      "referencedBy": [],
      "deprecationReason": "Use `updateUserProfile`, `requestEmailChange` and other `updateUser*` mutations instead",
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-user.ts",
          "path": "src/modules/users/resolvers/mutation.update-user.ts"
        }
      }
    },
    {
      "name": "updateUserCandidate",
      "id": "Mutation.updateUserCandidate",
      "type": "mutation",
      "returnType": "MutationUpdateUserCandidateResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserCandidateResult",
        "successDataType": "Boolean",
        "successType": "MutationUpdateUserCandidateSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-user-candidate.ts",
          "path": "src/modules/users/resolvers/mutation.update-user-candidate.ts"
        }
      }
    },
    {
      "name": "updateUserCurriculum",
      "id": "Mutation.updateUserCurriculum",
      "type": "mutation",
      "returnType": "MutationUpdateUserCurriculumResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserCurriculumResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserCurriculumSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-user-curriculum.ts",
          "path": "src/modules/users/resolvers/mutation.update-user-curriculum.ts"
        }
      }
    },
    {
      "name": "updateUserPermissions",
      "id": "Mutation.updateUserPermissions",
      "type": "mutation",
      "returnType": "MutationUpdateUserPermissionsResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserPermissionsResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserPermissionsSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-user-permissions.ts",
          "path": "src/modules/users/resolvers/mutation.update-user-permissions.ts"
        }
      }
    },
    {
      "name": "updateUserPicture",
      "id": "Mutation.updateUserPicture",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-user-picture.ts",
          "path": "src/modules/users/resolvers/mutation.update-user-picture.ts"
        }
      }
    },
    {
      "name": "updateUserProfile",
      "id": "Mutation.updateUserProfile",
      "type": "mutation",
      "returnType": "MutationUpdateUserProfileResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserProfileResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserProfileSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.update-user-profile.ts",
          "path": "src/modules/users/resolvers/mutation.update-user-profile.ts"
        }
      }
    },
    {
      "name": "upsertGodparentRequest",
      "id": "Mutation.upsertGodparentRequest",
      "type": "mutation",
      "returnType": "MutationUpsertGodparentRequestResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertGodparentRequestResult",
        "successDataType": "GodparentRequest",
        "successType": "MutationUpsertGodparentRequestSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.upsert-godparent-request.ts",
          "path": "src/modules/users/resolvers/mutation.upsert-godparent-request.ts"
        }
      }
    },
    {
      "name": "usePasswordReset",
      "id": "Mutation.usePasswordReset",
      "type": "mutation",
      "returnType": "MutationUsePasswordResetResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUsePasswordResetResult",
        "successDataType": "Boolean",
        "successType": "MutationUsePasswordResetSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.use-password-reset.ts",
          "path": "src/modules/users/resolvers/mutation.use-password-reset.ts"
        }
      }
    },
    {
      "name": "validateEmail",
      "id": "Mutation.validateEmail",
      "type": "mutation",
      "returnType": "MutationValidateEmailResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationValidateEmailResult",
        "successDataType": "EmailChange",
        "successType": "MutationValidateEmailSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/users/resolvers/mutation.validate-email.ts",
          "path": "src/modules/users/resolvers/mutation.validate-email.ts"
        }
      }
    },
    {
      "name": "AwaitingValidationError",
      "id": "AwaitingValidationError",
      "type": "type",
      "referencedBy": [
        "MutationLoginResult"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/awaiting-validation-error.ts",
          "path": "src/modules/users/types/awaiting-validation-error.ts"
        }
      }
    },
    {
      "name": "Bookmark",
      "id": "Bookmark",
      "type": "type",
      "referencedBy": [
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/bookmark.ts",
          "path": "src/modules/users/types/bookmark.ts"
        }
      }
    },
    {
      "name": "Credential",
      "id": "Credential",
      "type": "type",
      "referencedBy": [
        "MutationCreateGroupAccessTokenSuccess",
        "MutationLoginSuccess",
        "SignupCompletionResult",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/credential.ts",
          "path": "src/modules/users/types/credential.ts"
        }
      }
    },
    {
      "name": "CredentialType",
      "id": "CredentialType",
      "type": "type",
      "referencedBy": [
        "Credential"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/credential-type.ts",
          "path": "src/modules/users/types/credential-type.ts"
        }
      }
    },
    {
      "name": "EmailChange",
      "id": "EmailChange",
      "type": "type",
      "referencedBy": [
        "MutationRequestEmailChangeSuccess",
        "MutationValidateEmailSuccess",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/email-change.ts",
          "path": "src/modules/users/types/email-change.ts"
        }
      }
    },
    {
      "name": "FamilyTree",
      "id": "FamilyTree",
      "type": "type",
      "referencedBy": [
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/family-tree.ts",
          "path": "src/modules/users/types/family-tree.ts"
        }
      }
    },
    {
      "name": "GodparentRequest",
      "id": "GodparentRequest",
      "type": "type",
      "referencedBy": [
        "MutationAnswerGodparentRequestSuccess",
        "MutationUpsertGodparentRequestSuccess",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/godparent-request.ts",
          "path": "src/modules/users/types/godparent-request.ts"
        }
      }
    },
    {
      "name": "MutationAcceptRegistrationResult",
      "id": "MutationAcceptRegistrationResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAcceptRegistrationResult",
        "successDataType": "User",
        "successType": "MutationAcceptRegistrationSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationAnswerGodparentRequestResult",
      "id": "MutationAnswerGodparentRequestResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAnswerGodparentRequestResult",
        "successDataType": "GodparentRequest",
        "successType": "MutationAnswerGodparentRequestSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/godparent-request.ts",
          "path": "src/modules/users/types/godparent-request.ts"
        }
      }
    },
    {
      "name": "MutationCreateGroupAccessTokenResult",
      "id": "MutationCreateGroupAccessTokenResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateGroupAccessTokenResult",
        "successDataType": "Credential",
        "successType": "MutationCreateGroupAccessTokenSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/credential.ts",
          "path": "src/modules/users/types/credential.ts"
        }
      }
    },
    {
      "name": "MutationDeleteGodchildResult",
      "id": "MutationDeleteGodchildResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteGodchildResult",
        "successDataType": "User",
        "successType": "MutationDeleteGodchildSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationDeleteGodparentResult",
      "id": "MutationDeleteGodparentResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteGodparentResult",
        "successDataType": "User",
        "successType": "MutationDeleteGodparentSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationLoginResult",
      "id": "MutationLoginResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "AwaitingValidationError",
          "Error",
          "ZodError"
        ],
        "resultType": "MutationLoginResult",
        "successDataType": "Credential",
        "successType": "MutationLoginSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/credential.ts",
          "path": "src/modules/users/types/credential.ts"
        }
      }
    },
    {
      "name": "MutationRequestEmailChangeResult",
      "id": "MutationRequestEmailChangeResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRequestEmailChangeResult",
        "successDataType": "EmailChange",
        "successType": "MutationRequestEmailChangeSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/email-change.ts",
          "path": "src/modules/users/types/email-change.ts"
        }
      }
    },
    {
      "name": "MutationSaveLydiaPhoneNumberResult",
      "id": "MutationSaveLydiaPhoneNumberResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSaveLydiaPhoneNumberResult",
        "successDataType": "User",
        "successType": "MutationSaveLydiaPhoneNumberSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationStartSignupResult",
      "id": "MutationStartSignupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationStartSignupResult",
        "successDataType": "UserCandidate",
        "successType": "MutationStartSignupSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user-candidate.ts",
          "path": "src/modules/users/types/user-candidate.ts"
        }
      }
    },
    {
      "name": "MutationUpdateUserCurriculumResult",
      "id": "MutationUpdateUserCurriculumResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserCurriculumResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserCurriculumSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationUpdateUserPermissionsResult",
      "id": "MutationUpdateUserPermissionsResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserPermissionsResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserPermissionsSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationUpdateUserProfileResult",
      "id": "MutationUpdateUserProfileResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserProfileResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserProfileSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationUpdateUserResult",
      "id": "MutationUpdateUserResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateUserResult",
        "successDataType": "User",
        "successType": "MutationUpdateUserSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "MutationUpsertGodparentRequestResult",
      "id": "MutationUpsertGodparentRequestResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertGodparentRequestResult",
        "successDataType": "GodparentRequest",
        "successType": "MutationUpsertGodparentRequestSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/godparent-request.ts",
          "path": "src/modules/users/types/godparent-request.ts"
        }
      }
    },
    {
      "name": "MutationValidateEmailResult",
      "id": "MutationValidateEmailResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationValidateEmailResult",
        "successDataType": "EmailChange",
        "successType": "MutationValidateEmailSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/email-change.ts",
          "path": "src/modules/users/types/email-change.ts"
        }
      }
    },
    {
      "name": "QueryAllUsersConnection",
      "id": "QueryAllUsersConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "User",
        "edgeType": "QueryAllUsersConnectionEdge",
        "connectionType": "QueryAllUsersConnection"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "QueryCodeContributorsResult",
      "id": "QueryCodeContributorsResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryCodeContributorsResult",
        "successDataType": "User",
        "successType": "QueryCodeContributorsSuccess"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "QueryQuickSignupsConnection",
      "id": "QueryQuickSignupsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "QuickSignup",
        "edgeType": "QueryQuickSignupsConnectionEdge",
        "connectionType": "QueryQuickSignupsConnection"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/quick-signup.ts",
          "path": "src/modules/users/types/quick-signup.ts"
        }
      }
    },
    {
      "name": "QueryUserCandidatesConnection",
      "id": "QueryUserCandidatesConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "UserCandidate",
        "edgeType": "QueryUserCandidatesConnectionEdge",
        "connectionType": "QueryUserCandidatesConnection"
      },
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user-candidate.ts",
          "path": "src/modules/users/types/user-candidate.ts"
        }
      }
    },
    {
      "name": "QuickSignup",
      "id": "QuickSignup",
      "type": "type",
      "referencedBy": [
        "QueryQuickSignupsConnection",
        "QueryQuickSignupsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/quick-signup.ts",
          "path": "src/modules/users/types/quick-signup.ts"
        }
      }
    },
    {
      "name": "SignupCompletionResult",
      "id": "SignupCompletionResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/signup-completion-result.ts",
          "path": "src/modules/users/types/signup-completion-result.ts"
        }
      }
    },
    {
      "name": "User",
      "id": "User",
      "type": "type",
      "referencedBy": [
        "Announcement",
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "AnswersOfUser",
        "Article",
        "Bookmark",
        "Comment",
        "Credential",
        "Document",
        "EmailChange",
        "Event",
        "EventManager",
        "FamilyTree",
        "Form",
        "GodparentRequest",
        "GroupMember",
        "HasLinks",
        "LogEntry",
        "Minor",
        "MutationAcceptRegistrationSuccess",
        "MutationDeleteGodchildSuccess",
        "MutationDeleteGodparentSuccess",
        "MutationSaveLydiaPhoneNumberSuccess",
        "MutationUpdateUserCurriculumSuccess",
        "MutationUpdateUserPermissionsSuccess",
        "MutationUpdateUserProfileSuccess",
        "MutationUpdateUserSuccess",
        "NotificationSubscription",
        "Page",
        "Profile",
        "QueryAllUsersConnection",
        "QueryAllUsersConnectionEdge",
        "QueryCodeContributorsSuccess",
        "Reaction",
        "Registration",
        "ShopPayment",
        "User",
        "UserSearchResult"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user.ts",
          "path": "src/modules/users/types/user.ts"
        }
      }
    },
    {
      "name": "UserCandidate",
      "id": "UserCandidate",
      "type": "type",
      "referencedBy": [
        "MutationStartSignupSuccess",
        "QueryUserCandidatesConnection",
        "QueryUserCandidatesConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user-candidate.ts",
          "path": "src/modules/users/types/user-candidate.ts"
        }
      }
    },
    {
      "name": "UserProfileInput",
      "id": "UserProfileInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user-profile-input.ts",
          "path": "src/modules/users/types/user-profile-input.ts"
        }
      }
    },
    {
      "name": "UserSearchResult",
      "id": "UserSearchResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "users",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/users/types/user-search-result.ts",
          "path": "src/modules/users/types/user-search-result.ts"
        }
      }
    },
    {
      "name": "group",
      "id": "Query.group",
      "type": "query",
      "returnType": "Group",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/query.group.ts",
          "path": "src/modules/groups/resolvers/query.group.ts"
        }
      }
    },
    {
      "name": "groupMembersCsv",
      "id": "Query.groupMembersCsv",
      "type": "query",
      "returnType": "QueryGroupMembersCsvResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryGroupMembersCsvResult",
        "successDataType": "String",
        "successType": "QueryGroupMembersCsvSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/query.group-members-csv.ts",
          "path": "src/modules/groups/resolvers/query.group-members-csv.ts"
        }
      }
    },
    {
      "name": "groups",
      "id": "Query.groups",
      "type": "query",
      "returnType": "Group",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/query.groups.ts",
          "path": "src/modules/groups/resolvers/query.groups.ts"
        }
      }
    },
    {
      "name": "searchGroups",
      "id": "Query.searchGroups",
      "type": "query",
      "returnType": "GroupSearchResult",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/query.search-groups.ts",
          "path": "src/modules/groups/resolvers/query.search-groups.ts"
        }
      }
    },
    {
      "name": "addGroupMember",
      "id": "Mutation.addGroupMember",
      "type": "mutation",
      "returnType": "MutationAddGroupMemberResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAddGroupMemberResult",
        "successDataType": "GroupMember",
        "successType": "MutationAddGroupMemberSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.add-group-member.ts",
          "path": "src/modules/groups/resolvers/mutation.add-group-member.ts"
        }
      }
    },
    {
      "name": "createGroup",
      "id": "Mutation.createGroup",
      "type": "mutation",
      "returnType": "MutationCreateGroupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateGroupResult",
        "successDataType": "Group",
        "successType": "MutationCreateGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.create-group.ts",
          "path": "src/modules/groups/resolvers/mutation.create-group.ts"
        }
      }
    },
    {
      "name": "createGroupAccessToken",
      "id": "Mutation.createGroupAccessToken",
      "type": "mutation",
      "returnType": "MutationCreateGroupAccessTokenResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateGroupAccessTokenResult",
        "successDataType": "Credential",
        "successType": "MutationCreateGroupAccessTokenSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.create-group-access-token.ts",
          "path": "src/modules/groups/resolvers/mutation.create-group-access-token.ts"
        }
      }
    },
    {
      "name": "deleteGroup",
      "id": "Mutation.deleteGroup",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.delete-group.ts",
          "path": "src/modules/groups/resolvers/mutation.delete-group.ts"
        }
      }
    },
    {
      "name": "deleteGroupMember",
      "id": "Mutation.deleteGroupMember",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.delete-group-member.ts",
          "path": "src/modules/groups/resolvers/mutation.delete-group-member.ts"
        }
      }
    },
    {
      "name": "deleteGroupPicture",
      "id": "Mutation.deleteGroupPicture",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": "Use setPicture instead",
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.delete-group-picture.ts",
          "path": "src/modules/groups/resolvers/mutation.delete-group-picture.ts"
        }
      }
    },
    {
      "name": "selfJoinGroup",
      "id": "Mutation.selfJoinGroup",
      "type": "mutation",
      "returnType": "MutationSelfJoinGroupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSelfJoinGroupResult",
        "successDataType": "GroupMember",
        "successType": "MutationSelfJoinGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.self-join-group.ts",
          "path": "src/modules/groups/resolvers/mutation.self-join-group.ts"
        }
      }
    },
    {
      "name": "setGoupRoomOpenState",
      "id": "Mutation.setGoupRoomOpenState",
      "type": "mutation",
      "returnType": "Group",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.set-goup-room-open-state.ts",
          "path": "src/modules/groups/resolvers/mutation.set-goup-room-open-state.ts"
        }
      }
    },
    {
      "name": "setGroupJoinPolicy",
      "id": "Mutation.setGroupJoinPolicy",
      "type": "mutation",
      "returnType": "MutationSetGroupJoinPolicyResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetGroupJoinPolicyResult",
        "successDataType": "Group",
        "successType": "MutationSetGroupJoinPolicySuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.set-group-join-policy.ts",
          "path": "src/modules/groups/resolvers/mutation.set-group-join-policy.ts"
        }
      }
    },
    {
      "name": "setGroupStudentAssociation",
      "id": "Mutation.setGroupStudentAssociation",
      "type": "mutation",
      "returnType": "MutationSetGroupStudentAssociationResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetGroupStudentAssociationResult",
        "successDataType": "Group",
        "successType": "MutationSetGroupStudentAssociationSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.set-group-student-association.ts",
          "path": "src/modules/groups/resolvers/mutation.set-group-student-association.ts"
        }
      }
    },
    {
      "name": "setGroupType",
      "id": "Mutation.setGroupType",
      "type": "mutation",
      "returnType": "MutationSetGroupTypeResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetGroupTypeResult",
        "successDataType": "Group",
        "successType": "MutationSetGroupTypeSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.set-group-type.ts",
          "path": "src/modules/groups/resolvers/mutation.set-group-type.ts"
        }
      }
    },
    {
      "name": "setParentGroup",
      "id": "Mutation.setParentGroup",
      "type": "mutation",
      "returnType": "MutationSetParentGroupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetParentGroupResult",
        "successDataType": "Group",
        "successType": "MutationSetParentGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.set-parent-group.ts",
          "path": "src/modules/groups/resolvers/mutation.set-parent-group.ts"
        }
      }
    },
    {
      "name": "updateGroupPicture",
      "id": "Mutation.updateGroupPicture",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": "Use setPicture instead",
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.update-group-picture.ts",
          "path": "src/modules/groups/resolvers/mutation.update-group-picture.ts"
        }
      }
    },
    {
      "name": "updateGroupProfile",
      "id": "Mutation.updateGroupProfile",
      "type": "mutation",
      "returnType": "MutationUpdateGroupProfileResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateGroupProfileResult",
        "successDataType": "Group",
        "successType": "MutationUpdateGroupProfileSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.update-group-profile.ts",
          "path": "src/modules/groups/resolvers/mutation.update-group-profile.ts"
        }
      }
    },
    {
      "name": "upsertGroup",
      "id": "Mutation.upsertGroup",
      "type": "mutation",
      "returnType": "MutationUpsertGroupResult",
      "referencedBy": [],
      "deprecationReason": "Mutation séparée en plusieurs mutations plus spécifiques. Voir la documentation du module groups",
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertGroupResult",
        "successDataType": "Group",
        "successType": "MutationUpsertGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.upsert-group.ts",
          "path": "src/modules/groups/resolvers/mutation.upsert-group.ts"
        }
      }
    },
    {
      "name": "upsertGroupMember",
      "id": "Mutation.upsertGroupMember",
      "type": "mutation",
      "returnType": "GroupMember",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/groups/resolvers/mutation.upsert-group-member.ts",
          "path": "src/modules/groups/resolvers/mutation.upsert-group-member.ts"
        }
      }
    },
    {
      "name": "Group",
      "id": "Group",
      "type": "type",
      "referencedBy": [
        "Article",
        "BarWeek",
        "Event",
        "Form",
        "FormSection",
        "Group",
        "GroupMember",
        "GroupSearchResult",
        "HasLinks",
        "LydiaAccount",
        "MutationCreateGroupSuccess",
        "MutationSetGroupJoinPolicySuccess",
        "MutationSetGroupStudentAssociationSuccess",
        "MutationSetGroupTypeSuccess",
        "MutationSetParentGroupSuccess",
        "MutationUpdateGroupProfileSuccess",
        "MutationUpsertGroupSuccess",
        "Notification",
        "Page",
        "Profile",
        "QuestionSelectOne",
        "Service",
        "ServiceOwner",
        "ShopItem",
        "StudentAssociationGroupsConnection",
        "StudentAssociationGroupsConnectionEdge",
        "Theme",
        "Ticket",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "GroupJoinPolicy",
      "id": "GroupJoinPolicy",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "GroupMember",
      "id": "GroupMember",
      "type": "type",
      "referencedBy": [
        "Group",
        "MutationAddGroupMemberSuccess",
        "MutationSelfJoinGroupSuccess",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group-member.ts",
          "path": "src/modules/groups/types/group-member.ts"
        }
      }
    },
    {
      "name": "GroupProfileInput",
      "id": "GroupProfileInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group-profile-input.ts",
          "path": "src/modules/groups/types/group-profile-input.ts"
        }
      }
    },
    {
      "name": "GroupSearchResult",
      "id": "GroupSearchResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group-search-result.ts",
          "path": "src/modules/groups/types/group-search-result.ts"
        }
      }
    },
    {
      "name": "GroupType",
      "id": "GroupType",
      "type": "type",
      "referencedBy": [
        "Group",
        "UpsertGroupInput"
      ],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group-type.ts",
          "path": "src/modules/groups/types/group-type.ts"
        }
      }
    },
    {
      "name": "MutationAddGroupMemberResult",
      "id": "MutationAddGroupMemberResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAddGroupMemberResult",
        "successDataType": "GroupMember",
        "successType": "MutationAddGroupMemberSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group-member.ts",
          "path": "src/modules/groups/types/group-member.ts"
        }
      }
    },
    {
      "name": "MutationCreateGroupResult",
      "id": "MutationCreateGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateGroupResult",
        "successDataType": "Group",
        "successType": "MutationCreateGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "MutationSelfJoinGroupResult",
      "id": "MutationSelfJoinGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSelfJoinGroupResult",
        "successDataType": "GroupMember",
        "successType": "MutationSelfJoinGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group-member.ts",
          "path": "src/modules/groups/types/group-member.ts"
        }
      }
    },
    {
      "name": "MutationSetGroupJoinPolicyResult",
      "id": "MutationSetGroupJoinPolicyResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetGroupJoinPolicyResult",
        "successDataType": "Group",
        "successType": "MutationSetGroupJoinPolicySuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "MutationSetGroupStudentAssociationResult",
      "id": "MutationSetGroupStudentAssociationResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetGroupStudentAssociationResult",
        "successDataType": "Group",
        "successType": "MutationSetGroupStudentAssociationSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "MutationSetGroupTypeResult",
      "id": "MutationSetGroupTypeResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetGroupTypeResult",
        "successDataType": "Group",
        "successType": "MutationSetGroupTypeSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "MutationSetParentGroupResult",
      "id": "MutationSetParentGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetParentGroupResult",
        "successDataType": "Group",
        "successType": "MutationSetParentGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "MutationUpdateGroupProfileResult",
      "id": "MutationUpdateGroupProfileResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateGroupProfileResult",
        "successDataType": "Group",
        "successType": "MutationUpdateGroupProfileSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "MutationUpsertGroupResult",
      "id": "MutationUpsertGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertGroupResult",
        "successDataType": "Group",
        "successType": "MutationUpsertGroupSuccess"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "StudentAssociationGroupsConnection",
      "id": "StudentAssociationGroupsConnection",
      "type": "type",
      "referencedBy": [
        "StudentAssociation"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Group",
        "edgeType": "StudentAssociationGroupsConnectionEdge",
        "connectionType": "StudentAssociationGroupsConnection"
      },
      "moduleName": "groups",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/groups/types/group.ts",
          "path": "src/modules/groups/types/group.ts"
        }
      }
    },
    {
      "name": "UpsertGroupInput",
      "id": "UpsertGroupInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "groups",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "article",
      "id": "Query.article",
      "type": "query",
      "returnType": "Article",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/query.article.ts",
          "path": "src/modules/posts/resolvers/query.article.ts"
        }
      }
    },
    {
      "name": "articleID",
      "id": "Query.articleID",
      "type": "query",
      "returnType": "LocalID",
      "referencedBy": [],
      "deprecationReason": "Utilisez `article` à la place",
      "moduleName": "posts",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "homepage",
      "id": "Query.homepage",
      "type": "query",
      "returnType": "QueryHomepageConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Article",
        "edgeType": "QueryHomepageConnectionEdge",
        "connectionType": "QueryHomepageConnection"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/query.homepage.ts",
          "path": "src/modules/posts/resolvers/query.homepage.ts"
        }
      }
    },
    {
      "name": "searchArticles",
      "id": "Query.searchArticles",
      "type": "query",
      "returnType": "ArticleSearchResultType",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/query.search-articles.ts",
          "path": "src/modules/posts/resolvers/query.search-articles.ts"
        }
      }
    },
    {
      "name": "createPost",
      "id": "Mutation.createPost",
      "type": "mutation",
      "returnType": "MutationCreatePostResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreatePostResult",
        "successDataType": "Article",
        "successType": "MutationCreatePostSuccess"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/mutation.create-post.ts",
          "path": "src/modules/posts/resolvers/mutation.create-post.ts"
        }
      }
    },
    {
      "name": "deleteArticle",
      "id": "Mutation.deleteArticle",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/mutation.delete-article.ts",
          "path": "src/modules/posts/resolvers/mutation.delete-article.ts"
        }
      }
    },
    {
      "name": "deleteArticlePicture",
      "id": "Mutation.deleteArticlePicture",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/mutation.delete-article-picture.ts",
          "path": "src/modules/posts/resolvers/mutation.delete-article-picture.ts"
        }
      }
    },
    {
      "name": "updateArticlePicture",
      "id": "Mutation.updateArticlePicture",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/mutation.update-article-picture.ts",
          "path": "src/modules/posts/resolvers/mutation.update-article-picture.ts"
        }
      }
    },
    {
      "name": "upsertArticle",
      "id": "Mutation.upsertArticle",
      "type": "mutation",
      "returnType": "MutationUpsertArticleResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertArticleResult",
        "successDataType": "Article",
        "successType": "MutationUpsertArticleSuccess"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/posts/resolvers/mutation.upsert-article.ts",
          "path": "src/modules/posts/resolvers/mutation.upsert-article.ts"
        }
      }
    },
    {
      "name": "Article",
      "id": "Article",
      "type": "type",
      "referencedBy": [
        "ArticleSearchResultType",
        "Event",
        "Group",
        "HasLinks",
        "MutationCreatePostSuccess",
        "MutationUpsertArticleSuccess",
        "QueryHomepageConnection",
        "QueryHomepageConnectionEdge",
        "UserArticlesConnection",
        "UserArticlesConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/posts/types/article.ts",
          "path": "src/modules/posts/types/article.ts"
        }
      }
    },
    {
      "name": "ArticleSearchResultType",
      "id": "ArticleSearchResultType",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/posts/types/article-search-result-type.ts",
          "path": "src/modules/posts/types/article-search-result-type.ts"
        }
      }
    },
    {
      "name": "MutationCreatePostResult",
      "id": "MutationCreatePostResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreatePostResult",
        "successDataType": "Article",
        "successType": "MutationCreatePostSuccess"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/posts/types/article.ts",
          "path": "src/modules/posts/types/article.ts"
        }
      }
    },
    {
      "name": "MutationUpsertArticleResult",
      "id": "MutationUpsertArticleResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertArticleResult",
        "successDataType": "Article",
        "successType": "MutationUpsertArticleSuccess"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/posts/types/article.ts",
          "path": "src/modules/posts/types/article.ts"
        }
      }
    },
    {
      "name": "QueryHomepageConnection",
      "id": "QueryHomepageConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Article",
        "edgeType": "QueryHomepageConnectionEdge",
        "connectionType": "QueryHomepageConnection"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/posts/types/article.ts",
          "path": "src/modules/posts/types/article.ts"
        }
      }
    },
    {
      "name": "UserArticlesConnection",
      "id": "UserArticlesConnection",
      "type": "type",
      "referencedBy": [
        "User"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Article",
        "edgeType": "UserArticlesConnectionEdge",
        "connectionType": "UserArticlesConnection"
      },
      "moduleName": "posts",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/posts/types/article.ts",
          "path": "src/modules/posts/types/article.ts"
        }
      }
    },
    {
      "name": "event",
      "id": "Query.event",
      "type": "query",
      "returnType": "Event",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/query.event.ts",
          "path": "src/modules/events/resolvers/query.event.ts"
        }
      }
    },
    {
      "name": "eventManager",
      "id": "Query.eventManager",
      "type": "query",
      "returnType": "EventManager",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/query.event-manager.ts",
          "path": "src/modules/events/resolvers/query.event-manager.ts"
        }
      }
    },
    {
      "name": "events",
      "id": "Query.events",
      "type": "query",
      "returnType": "QueryEventsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Event",
        "edgeType": "QueryEventsConnectionEdge",
        "connectionType": "QueryEventsConnection"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/query.events.ts",
          "path": "src/modules/events/resolvers/query.events.ts"
        }
      }
    },
    {
      "name": "eventsByDay",
      "id": "Query.eventsByDay",
      "type": "query",
      "returnType": "QueryEventsByDayConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "EventsByDay",
        "edgeType": "QueryEventsByDayConnectionEdge",
        "connectionType": "QueryEventsByDayConnection"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/query.events-by-day.ts",
          "path": "src/modules/events/resolvers/query.events-by-day.ts"
        }
      }
    },
    {
      "name": "eventsInWeek",
      "id": "Query.eventsInWeek",
      "type": "query",
      "returnType": "Event",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/query.events-in-week.ts",
          "path": "src/modules/events/resolvers/query.events-in-week.ts"
        }
      }
    },
    {
      "name": "searchEvents",
      "id": "Query.searchEvents",
      "type": "query",
      "returnType": "EvenSearchResult",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/query.search-events.ts",
          "path": "src/modules/events/resolvers/query.search-events.ts"
        }
      }
    },
    {
      "name": "banFromEvent",
      "id": "Mutation.banFromEvent",
      "type": "mutation",
      "returnType": "MutationBanFromEventResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationBanFromEventResult",
        "successDataType": "Event",
        "successType": "MutationBanFromEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.ban-from-event.ts",
          "path": "src/modules/events/resolvers/mutation.ban-from-event.ts"
        }
      }
    },
    {
      "name": "changeEventOrganizer",
      "id": "Mutation.changeEventOrganizer",
      "type": "mutation",
      "returnType": "MutationChangeEventOrganizerResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationChangeEventOrganizerResult",
        "successDataType": "Event",
        "successType": "MutationChangeEventOrganizerSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.change-event-organizer.ts",
          "path": "src/modules/events/resolvers/mutation.change-event-organizer.ts"
        }
      }
    },
    {
      "name": "createEvent",
      "id": "Mutation.createEvent",
      "type": "mutation",
      "returnType": "MutationCreateEventResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateEventResult",
        "successDataType": "Event",
        "successType": "MutationCreateEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.create-event.ts",
          "path": "src/modules/events/resolvers/mutation.create-event.ts"
        }
      }
    },
    {
      "name": "deleteEvent",
      "id": "Mutation.deleteEvent",
      "type": "mutation",
      "returnType": "MutationDeleteEventResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteEventResult",
        "successDataType": "Event",
        "successType": "MutationDeleteEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.delete-event.ts",
          "path": "src/modules/events/resolvers/mutation.delete-event.ts"
        }
      }
    },
    {
      "name": "deleteEventManager",
      "id": "Mutation.deleteEventManager",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": "Use 'removeEventManager' instead",
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.delete-event-manager.ts",
          "path": "src/modules/events/resolvers/mutation.delete-event-manager.ts"
        }
      }
    },
    {
      "name": "deleteEventPicture",
      "id": "Mutation.deleteEventPicture",
      "type": "mutation",
      "returnType": "Event",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.delete-event-picture.ts",
          "path": "src/modules/events/resolvers/mutation.delete-event-picture.ts"
        }
      }
    },
    {
      "name": "kioskReload",
      "id": "Mutation.kioskReload",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.kiosk-reload.ts",
          "path": "src/modules/events/resolvers/mutation.kiosk-reload.ts"
        }
      }
    },
    {
      "name": "removeEventManager",
      "id": "Mutation.removeEventManager",
      "type": "mutation",
      "returnType": "MutationRemoveEventManagerResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRemoveEventManagerResult",
        "successDataType": "EventManager",
        "successType": "MutationRemoveEventManagerSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.remove-event-manager.ts",
          "path": "src/modules/events/resolvers/mutation.remove-event-manager.ts"
        }
      }
    },
    {
      "name": "setEventApplicableOffers",
      "id": "Mutation.setEventApplicableOffers",
      "type": "mutation",
      "returnType": "MutationSetEventApplicableOffersResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventApplicableOffersResult",
        "successDataType": "Event",
        "successType": "MutationSetEventApplicableOffersSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.set-event-applicable-offers.ts",
          "path": "src/modules/events/resolvers/mutation.set-event-applicable-offers.ts"
        }
      }
    },
    {
      "name": "setEventBeneficiary",
      "id": "Mutation.setEventBeneficiary",
      "type": "mutation",
      "returnType": "MutationSetEventBeneficiaryResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventBeneficiaryResult",
        "successDataType": "Event",
        "successType": "MutationSetEventBeneficiarySuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.set-event-beneficiary.ts",
          "path": "src/modules/events/resolvers/mutation.set-event-beneficiary.ts"
        }
      }
    },
    {
      "name": "setEventCoOrganizers",
      "id": "Mutation.setEventCoOrganizers",
      "type": "mutation",
      "returnType": "MutationSetEventCoOrganizersResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventCoOrganizersResult",
        "successDataType": "Event",
        "successType": "MutationSetEventCoOrganizersSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.set-event-co-organizers.ts",
          "path": "src/modules/events/resolvers/mutation.set-event-co-organizers.ts"
        }
      }
    },
    {
      "name": "setEventDates",
      "id": "Mutation.setEventDates",
      "type": "mutation",
      "returnType": "MutationSetEventDatesResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventDatesResult",
        "successDataType": "Event",
        "successType": "MutationSetEventDatesSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.set-event-dates.ts",
          "path": "src/modules/events/resolvers/mutation.set-event-dates.ts"
        }
      }
    },
    {
      "name": "setEventVisibility",
      "id": "Mutation.setEventVisibility",
      "type": "mutation",
      "returnType": "MutationSetEventVisibilityResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventVisibilityResult",
        "successDataType": "Event",
        "successType": "MutationSetEventVisibilitySuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.set-event-visibility.ts",
          "path": "src/modules/events/resolvers/mutation.set-event-visibility.ts"
        }
      }
    },
    {
      "name": "unbanFromEvent",
      "id": "Mutation.unbanFromEvent",
      "type": "mutation",
      "returnType": "MutationUnbanFromEventResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUnbanFromEventResult",
        "successDataType": "Event",
        "successType": "MutationUnbanFromEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.unban-from-event.ts",
          "path": "src/modules/events/resolvers/mutation.unban-from-event.ts"
        }
      }
    },
    {
      "name": "updateEvent",
      "id": "Mutation.updateEvent",
      "type": "mutation",
      "returnType": "MutationUpdateEventResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateEventResult",
        "successDataType": "Event",
        "successType": "MutationUpdateEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.update-event.ts",
          "path": "src/modules/events/resolvers/mutation.update-event.ts"
        }
      }
    },
    {
      "name": "updateEventPicture",
      "id": "Mutation.updateEventPicture",
      "type": "mutation",
      "returnType": "Event",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.update-event-picture.ts",
          "path": "src/modules/events/resolvers/mutation.update-event-picture.ts"
        }
      }
    },
    {
      "name": "updateEventRecurrence",
      "id": "Mutation.updateEventRecurrence",
      "type": "mutation",
      "returnType": "MutationUpdateEventRecurrenceResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateEventRecurrenceResult",
        "successDataType": "Event",
        "successType": "MutationUpdateEventRecurrenceSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.update-event-recurrence.ts",
          "path": "src/modules/events/resolvers/mutation.update-event-recurrence.ts"
        }
      }
    },
    {
      "name": "upsertEventManager",
      "id": "Mutation.upsertEventManager",
      "type": "mutation",
      "returnType": "MutationUpsertEventManagerResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertEventManagerResult",
        "successDataType": "EventManager",
        "successType": "MutationUpsertEventManagerSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.upsert-event-manager.ts",
          "path": "src/modules/events/resolvers/mutation.upsert-event-manager.ts"
        }
      }
    },
    {
      "name": "upsertManagersOfEvent",
      "id": "Mutation.upsertManagersOfEvent",
      "type": "mutation",
      "returnType": "EventManager",
      "referencedBy": [],
      "deprecationReason": "Use 'upsertEventManager' and 'removeEventManager' instead",
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/mutation.upsert-managers-of-event.ts",
          "path": "src/modules/events/resolvers/mutation.upsert-managers-of-event.ts"
        }
      }
    },
    {
      "name": "kioskReload",
      "id": "Subscription.kioskReload",
      "type": "subscription",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/events/resolvers/subscription.kiosk-reload.ts",
          "path": "src/modules/events/resolvers/subscription.kiosk-reload.ts"
        }
      }
    },
    {
      "name": "Capacity",
      "id": "Capacity",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/capacity.ts",
          "path": "src/modules/events/types/capacity.ts"
        }
      }
    },
    {
      "name": "EvenSearchResult",
      "id": "EvenSearchResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/even-search-result.ts",
          "path": "src/modules/events/types/even-search-result.ts"
        }
      }
    },
    {
      "name": "Event",
      "id": "Event",
      "type": "type",
      "referencedBy": [
        "Article",
        "EvenSearchResult",
        "EventManager",
        "EventsByDay",
        "Form",
        "Group",
        "GroupEventsConnection",
        "GroupEventsConnectionEdge",
        "HasLinks",
        "LydiaAccount",
        "MutationBanFromEventSuccess",
        "MutationChangeEventOrganizerSuccess",
        "MutationCreateEventSuccess",
        "MutationDeleteEventSuccess",
        "MutationSetEventApplicableOffersSuccess",
        "MutationSetEventBeneficiarySuccess",
        "MutationSetEventCoOrganizersSuccess",
        "MutationSetEventDatesSuccess",
        "MutationSetEventVisibilitySuccess",
        "MutationUnbanFromEventSuccess",
        "MutationUpdateEventRecurrenceSuccess",
        "MutationUpdateEventSuccess",
        "QueryEventsConnection",
        "QueryEventsConnectionEdge",
        "Ticket",
        "TicketGroup"
      ],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "EventFrequency",
      "id": "EventFrequency",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event-frequency.ts",
          "path": "src/modules/events/types/event-frequency.ts"
        }
      }
    },
    {
      "name": "EventManager",
      "id": "EventManager",
      "type": "type",
      "referencedBy": [
        "Event",
        "MutationRemoveEventManagerSuccess",
        "MutationUpsertEventManagerSuccess",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event-manager.ts",
          "path": "src/modules/events/types/event-manager.ts"
        }
      }
    },
    {
      "name": "EventManagerPowerLevel",
      "id": "EventManagerPowerLevel",
      "type": "type",
      "referencedBy": [
        "EventManager"
      ],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event-manager-power-level.ts",
          "path": "src/modules/events/types/event-manager-power-level.ts"
        }
      }
    },
    {
      "name": "EventsByDay",
      "id": "EventsByDay",
      "type": "type",
      "referencedBy": [
        "QueryEventsByDayConnection",
        "QueryEventsByDayConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/events-by-day.ts",
          "path": "src/modules/events/types/events-by-day.ts"
        }
      }
    },
    {
      "name": "GroupEventsConnection",
      "id": "GroupEventsConnection",
      "type": "type",
      "referencedBy": [
        "Group"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Event",
        "edgeType": "GroupEventsConnectionEdge",
        "connectionType": "GroupEventsConnection"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "ManagerOfEventInput",
      "id": "ManagerOfEventInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/manager-of-event-input.ts",
          "path": "src/modules/events/types/manager-of-event-input.ts"
        }
      }
    },
    {
      "name": "MutationBanFromEventResult",
      "id": "MutationBanFromEventResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationBanFromEventResult",
        "successDataType": "Event",
        "successType": "MutationBanFromEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationChangeEventOrganizerResult",
      "id": "MutationChangeEventOrganizerResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationChangeEventOrganizerResult",
        "successDataType": "Event",
        "successType": "MutationChangeEventOrganizerSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationCreateEventResult",
      "id": "MutationCreateEventResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateEventResult",
        "successDataType": "Event",
        "successType": "MutationCreateEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationDeleteEventResult",
      "id": "MutationDeleteEventResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteEventResult",
        "successDataType": "Event",
        "successType": "MutationDeleteEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationRemoveEventManagerResult",
      "id": "MutationRemoveEventManagerResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRemoveEventManagerResult",
        "successDataType": "EventManager",
        "successType": "MutationRemoveEventManagerSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event-manager.ts",
          "path": "src/modules/events/types/event-manager.ts"
        }
      }
    },
    {
      "name": "MutationSetEventApplicableOffersResult",
      "id": "MutationSetEventApplicableOffersResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventApplicableOffersResult",
        "successDataType": "Event",
        "successType": "MutationSetEventApplicableOffersSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationSetEventBeneficiaryResult",
      "id": "MutationSetEventBeneficiaryResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventBeneficiaryResult",
        "successDataType": "Event",
        "successType": "MutationSetEventBeneficiarySuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationSetEventCoOrganizersResult",
      "id": "MutationSetEventCoOrganizersResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventCoOrganizersResult",
        "successDataType": "Event",
        "successType": "MutationSetEventCoOrganizersSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationSetEventDatesResult",
      "id": "MutationSetEventDatesResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventDatesResult",
        "successDataType": "Event",
        "successType": "MutationSetEventDatesSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationSetEventVisibilityResult",
      "id": "MutationSetEventVisibilityResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetEventVisibilityResult",
        "successDataType": "Event",
        "successType": "MutationSetEventVisibilitySuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationUnbanFromEventResult",
      "id": "MutationUnbanFromEventResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUnbanFromEventResult",
        "successDataType": "Event",
        "successType": "MutationUnbanFromEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationUpdateEventRecurrenceResult",
      "id": "MutationUpdateEventRecurrenceResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateEventRecurrenceResult",
        "successDataType": "Event",
        "successType": "MutationUpdateEventRecurrenceSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationUpdateEventResult",
      "id": "MutationUpdateEventResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateEventResult",
        "successDataType": "Event",
        "successType": "MutationUpdateEventSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "MutationUpsertEventManagerResult",
      "id": "MutationUpsertEventManagerResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertEventManagerResult",
        "successDataType": "EventManager",
        "successType": "MutationUpsertEventManagerSuccess"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event-manager.ts",
          "path": "src/modules/events/types/event-manager.ts"
        }
      }
    },
    {
      "name": "QueryEventsByDayConnection",
      "id": "QueryEventsByDayConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "EventsByDay",
        "edgeType": "QueryEventsByDayConnectionEdge",
        "connectionType": "QueryEventsByDayConnection"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/events-by-day.ts",
          "path": "src/modules/events/types/events-by-day.ts"
        }
      }
    },
    {
      "name": "QueryEventsConnection",
      "id": "QueryEventsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Event",
        "edgeType": "QueryEventsConnectionEdge",
        "connectionType": "QueryEventsConnection"
      },
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/event.ts",
          "path": "src/modules/events/types/event.ts"
        }
      }
    },
    {
      "name": "TicketGroupInput",
      "id": "TicketGroupInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "events",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/events/types/ticket-group-input.ts",
          "path": "src/modules/events/types/ticket-group-input.ts"
        }
      }
    },
    {
      "name": "booking",
      "id": "Query.booking",
      "type": "query",
      "returnType": "Registration",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/query.booking.ts",
          "path": "src/modules/ticketing/resolvers/query.booking.ts"
        }
      }
    },
    {
      "name": "registration",
      "id": "Query.registration",
      "type": "query",
      "returnType": "QueryRegistrationResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryRegistrationResult",
        "successDataType": "Registration",
        "successType": "QueryRegistrationSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/query.registration.ts",
          "path": "src/modules/ticketing/resolvers/query.registration.ts"
        }
      }
    },
    {
      "name": "ticket",
      "id": "Query.ticket",
      "type": "query",
      "returnType": "Ticket",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/query.ticket.ts",
          "path": "src/modules/ticketing/resolvers/query.ticket.ts"
        }
      }
    },
    {
      "name": "ticketGroup",
      "id": "Query.ticketGroup",
      "type": "query",
      "returnType": "TicketGroup",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/query.ticket-group.ts",
          "path": "src/modules/ticketing/resolvers/query.ticket-group.ts"
        }
      }
    },
    {
      "name": "bookEvent",
      "id": "Mutation.bookEvent",
      "type": "mutation",
      "returnType": "MutationBookEventResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationBookEventResult",
        "successDataType": "Registration",
        "successType": "MutationBookEventSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.book-event.ts",
          "path": "src/modules/ticketing/resolvers/mutation.book-event.ts"
        }
      }
    },
    {
      "name": "cancelBooking",
      "id": "Mutation.cancelBooking",
      "type": "mutation",
      "returnType": "MutationCancelBookingResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCancelBookingResult",
        "successDataType": "Registration",
        "successType": "MutationCancelBookingSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.cancel-booking.ts",
          "path": "src/modules/ticketing/resolvers/mutation.cancel-booking.ts"
        }
      }
    },
    {
      "name": "checkIfBookingIsPaid",
      "id": "Mutation.checkIfBookingIsPaid",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.check-if-booking-is-paid.ts",
          "path": "src/modules/ticketing/resolvers/mutation.check-if-booking-is-paid.ts"
        }
      }
    },
    {
      "name": "createAppleWalletPass",
      "id": "Mutation.createAppleWalletPass",
      "type": "mutation",
      "returnType": "MutationCreateAppleWalletPassResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateAppleWalletPassResult",
        "successDataType": "String",
        "successType": "MutationCreateAppleWalletPassSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.create-apple-wallet-pass.ts",
          "path": "src/modules/ticketing/resolvers/mutation.create-apple-wallet-pass.ts"
        }
      }
    },
    {
      "name": "createGoogleWalletPass",
      "id": "Mutation.createGoogleWalletPass",
      "type": "mutation",
      "returnType": "MutationCreateGoogleWalletPassResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateGoogleWalletPassResult",
        "successDataType": "String",
        "successType": "MutationCreateGoogleWalletPassSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.create-google-wallet-pass.ts",
          "path": "src/modules/ticketing/resolvers/mutation.create-google-wallet-pass.ts"
        }
      }
    },
    {
      "name": "createTicket",
      "id": "Mutation.createTicket",
      "type": "mutation",
      "returnType": "MutationCreateTicketResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateTicketResult",
        "successDataType": "Ticket",
        "successType": "MutationCreateTicketSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.create-ticket.ts",
          "path": "src/modules/ticketing/resolvers/mutation.create-ticket.ts"
        }
      }
    },
    {
      "name": "deleteTicket",
      "id": "Mutation.deleteTicket",
      "type": "mutation",
      "returnType": "MutationDeleteTicketResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteTicketResult",
        "successDataType": "Ticket",
        "successType": "MutationDeleteTicketSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.delete-ticket.ts",
          "path": "src/modules/ticketing/resolvers/mutation.delete-ticket.ts"
        }
      }
    },
    {
      "name": "deleteTicketGroup",
      "id": "Mutation.deleteTicketGroup",
      "type": "mutation",
      "returnType": "MutationDeleteTicketGroupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteTicketGroupResult",
        "successDataType": "TicketGroup",
        "successType": "MutationDeleteTicketGroupSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.delete-ticket-group.ts",
          "path": "src/modules/ticketing/resolvers/mutation.delete-ticket-group.ts"
        }
      }
    },
    {
      "name": "markBookingAsPaid",
      "id": "Mutation.markBookingAsPaid",
      "type": "mutation",
      "returnType": "MutationMarkBookingAsPaidResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationMarkBookingAsPaidResult",
        "successDataType": "Registration",
        "successType": "MutationMarkBookingAsPaidSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.mark-booking-as-paid.ts",
          "path": "src/modules/ticketing/resolvers/mutation.mark-booking-as-paid.ts"
        }
      }
    },
    {
      "name": "opposeRegistration",
      "id": "Mutation.opposeRegistration",
      "type": "mutation",
      "returnType": "MutationOpposeRegistrationResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationOpposeRegistrationResult",
        "successDataType": "Boolean",
        "successType": "MutationOpposeRegistrationSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.oppose-registration.ts",
          "path": "src/modules/ticketing/resolvers/mutation.oppose-registration.ts"
        }
      }
    },
    {
      "name": "payBooking",
      "id": "Mutation.payBooking",
      "type": "mutation",
      "returnType": "MutationPayBookingResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationPayBookingResult",
        "successDataType": "Registration",
        "successType": "MutationPayBookingSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.pay-booking.ts",
          "path": "src/modules/ticketing/resolvers/mutation.pay-booking.ts"
        }
      }
    },
    {
      "name": "setTicketGroup",
      "id": "Mutation.setTicketGroup",
      "type": "mutation",
      "returnType": "MutationSetTicketGroupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetTicketGroupResult",
        "successDataType": "Ticket",
        "successType": "MutationSetTicketGroupSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.set-ticket-group.ts",
          "path": "src/modules/ticketing/resolvers/mutation.set-ticket-group.ts"
        }
      }
    },
    {
      "name": "updateTicket",
      "id": "Mutation.updateTicket",
      "type": "mutation",
      "returnType": "MutationUpdateTicketResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateTicketResult",
        "successDataType": "Ticket",
        "successType": "MutationUpdateTicketSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.update-ticket.ts",
          "path": "src/modules/ticketing/resolvers/mutation.update-ticket.ts"
        }
      }
    },
    {
      "name": "updateTicketConstraints",
      "id": "Mutation.updateTicketConstraints",
      "type": "mutation",
      "returnType": "MutationUpdateTicketConstraintsResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateTicketConstraintsResult",
        "successDataType": "Ticket",
        "successType": "MutationUpdateTicketConstraintsSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.update-ticket-constraints.ts",
          "path": "src/modules/ticketing/resolvers/mutation.update-ticket-constraints.ts"
        }
      }
    },
    {
      "name": "upsertRegistration",
      "id": "Mutation.upsertRegistration",
      "type": "mutation",
      "returnType": "MutationUpsertRegistrationResult",
      "referencedBy": [],
      "deprecationReason": "Use bookEvent instead",
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertRegistrationResult",
        "successDataType": "Registration",
        "successType": "MutationUpsertRegistrationSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.upsert-registration.ts",
          "path": "src/modules/ticketing/resolvers/mutation.upsert-registration.ts"
        }
      }
    },
    {
      "name": "upsertTicketGroup",
      "id": "Mutation.upsertTicketGroup",
      "type": "mutation",
      "returnType": "MutationUpsertTicketGroupResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertTicketGroupResult",
        "successDataType": "TicketGroup",
        "successType": "MutationUpsertTicketGroupSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.upsert-ticket-group.ts",
          "path": "src/modules/ticketing/resolvers/mutation.upsert-ticket-group.ts"
        }
      }
    },
    {
      "name": "verifyBooking",
      "id": "Mutation.verifyBooking",
      "type": "mutation",
      "returnType": "MutationVerifyBookingResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationVerifyBookingResult",
        "successDataType": "RegistrationVerificationResult",
        "successType": "MutationVerifyBookingSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/ticketing/resolvers/mutation.verify-booking.ts",
          "path": "src/modules/ticketing/resolvers/mutation.verify-booking.ts"
        }
      }
    },
    {
      "name": "BookingState",
      "id": "BookingState",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "BooleanConstraint",
      "id": "BooleanConstraint",
      "type": "type",
      "referencedBy": [
        "TicketConstraintsInput"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/boolean-constraint.ts",
          "path": "src/modules/ticketing/types/boolean-constraint.ts"
        }
      }
    },
    {
      "name": "CsvDialect",
      "id": "CsvDialect",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "EventBookingsConnection",
      "id": "EventBookingsConnection",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Registration",
        "edgeType": "EventBookingsConnectionEdge",
        "connectionType": "EventBookingsConnection"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "EventBookingsCsvResult",
      "id": "EventBookingsCsvResult",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "EventBookingsCsvResult",
        "successDataType": "String",
        "successType": "EventBookingsCsvSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "static": {
          "matcher": "EventBookingsCsv{Result,Success}"
        }
      }
    },
    {
      "name": "EventBookingsCsvSuccess",
      "id": "EventBookingsCsvSuccess",
      "type": "type",
      "referencedBy": [
        "EventBookingsCsvResult"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "static": {
          "matcher": "EventBookingsCsv{Result,Success}"
        }
      }
    },
    {
      "name": "MutationBookEventResult",
      "id": "MutationBookEventResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationBookEventResult",
        "successDataType": "Registration",
        "successType": "MutationBookEventSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "MutationCancelBookingResult",
      "id": "MutationCancelBookingResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCancelBookingResult",
        "successDataType": "Registration",
        "successType": "MutationCancelBookingSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "MutationCreateTicketResult",
      "id": "MutationCreateTicketResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCreateTicketResult",
        "successDataType": "Ticket",
        "successType": "MutationCreateTicketSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket.ts",
          "path": "src/modules/ticketing/types/ticket.ts"
        }
      }
    },
    {
      "name": "MutationDeleteTicketGroupResult",
      "id": "MutationDeleteTicketGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteTicketGroupResult",
        "successDataType": "TicketGroup",
        "successType": "MutationDeleteTicketGroupSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket-group.ts",
          "path": "src/modules/ticketing/types/ticket-group.ts"
        }
      }
    },
    {
      "name": "MutationDeleteTicketResult",
      "id": "MutationDeleteTicketResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteTicketResult",
        "successDataType": "Ticket",
        "successType": "MutationDeleteTicketSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket.ts",
          "path": "src/modules/ticketing/types/ticket.ts"
        }
      }
    },
    {
      "name": "MutationMarkBookingAsPaidResult",
      "id": "MutationMarkBookingAsPaidResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationMarkBookingAsPaidResult",
        "successDataType": "Registration",
        "successType": "MutationMarkBookingAsPaidSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "MutationPayBookingResult",
      "id": "MutationPayBookingResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationPayBookingResult",
        "successDataType": "Registration",
        "successType": "MutationPayBookingSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "MutationSetTicketGroupResult",
      "id": "MutationSetTicketGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetTicketGroupResult",
        "successDataType": "Ticket",
        "successType": "MutationSetTicketGroupSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket.ts",
          "path": "src/modules/ticketing/types/ticket.ts"
        }
      }
    },
    {
      "name": "MutationUpdateTicketConstraintsResult",
      "id": "MutationUpdateTicketConstraintsResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateTicketConstraintsResult",
        "successDataType": "Ticket",
        "successType": "MutationUpdateTicketConstraintsSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket.ts",
          "path": "src/modules/ticketing/types/ticket.ts"
        }
      }
    },
    {
      "name": "MutationUpdateTicketResult",
      "id": "MutationUpdateTicketResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateTicketResult",
        "successDataType": "Ticket",
        "successType": "MutationUpdateTicketSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket.ts",
          "path": "src/modules/ticketing/types/ticket.ts"
        }
      }
    },
    {
      "name": "MutationUpsertRegistrationResult",
      "id": "MutationUpsertRegistrationResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertRegistrationResult",
        "successDataType": "Registration",
        "successType": "MutationUpsertRegistrationSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "MutationUpsertTicketGroupResult",
      "id": "MutationUpsertTicketGroupResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertTicketGroupResult",
        "successDataType": "TicketGroup",
        "successType": "MutationUpsertTicketGroupSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket-group.ts",
          "path": "src/modules/ticketing/types/ticket-group.ts"
        }
      }
    },
    {
      "name": "MutationVerifyBookingResult",
      "id": "MutationVerifyBookingResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationVerifyBookingResult",
        "successDataType": "RegistrationVerificationResult",
        "successType": "MutationVerifyBookingSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration-verification-result.ts",
          "path": "src/modules/ticketing/types/registration-verification-result.ts"
        }
      }
    },
    {
      "name": "QueryRegistrationResult",
      "id": "QueryRegistrationResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryRegistrationResult",
        "successDataType": "Registration",
        "successType": "QueryRegistrationSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "Registration",
      "id": "Registration",
      "type": "type",
      "referencedBy": [
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "Event",
        "EventBookingsConnection",
        "EventBookingsConnectionEdge",
        "MutationBookEventSuccess",
        "MutationCancelBookingSuccess",
        "MutationMarkBookingAsPaidSuccess",
        "MutationPayBookingSuccess",
        "MutationUpsertRegistrationSuccess",
        "QueryRegistrationSuccess",
        "RegistrationSearchResult",
        "RegistrationVerificationResult",
        "SubscriptionRegistrationSuccess",
        "Ticket",
        "User",
        "UserBookingsConnection",
        "UserBookingsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "RegistrationSearchResult",
      "id": "RegistrationSearchResult",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration-search-result.ts",
          "path": "src/modules/ticketing/types/registration-search-result.ts"
        }
      }
    },
    {
      "name": "RegistrationVerificationResult",
      "id": "RegistrationVerificationResult",
      "type": "type",
      "referencedBy": [
        "MutationVerifyBookingSuccess"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration-verification-result.ts",
          "path": "src/modules/ticketing/types/registration-verification-result.ts"
        }
      }
    },
    {
      "name": "RegistrationVerificationState",
      "id": "RegistrationVerificationState",
      "type": "type",
      "referencedBy": [
        "RegistrationVerificationResult"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration-verification-state.ts",
          "path": "src/modules/ticketing/types/registration-verification-state.ts"
        }
      }
    },
    {
      "name": "RegistrationsCounts",
      "id": "RegistrationsCounts",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registrations-counts.ts",
          "path": "src/modules/ticketing/types/registrations-counts.ts"
        }
      }
    },
    {
      "name": "SubscriptionRegistrationResult",
      "id": "SubscriptionRegistrationResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "SubscriptionRegistrationResult",
        "successDataType": "Registration",
        "successType": "SubscriptionRegistrationSuccess"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "Ticket",
      "id": "Ticket",
      "type": "type",
      "referencedBy": [
        "Event",
        "HasLinks",
        "MutationCreateTicketSuccess",
        "MutationDeleteTicketSuccess",
        "MutationSetTicketGroupSuccess",
        "MutationUpdateTicketConstraintsSuccess",
        "MutationUpdateTicketSuccess",
        "Registration",
        "TicketGroup"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket.ts",
          "path": "src/modules/ticketing/types/ticket.ts"
        }
      }
    },
    {
      "name": "TicketConstraintsInput",
      "id": "TicketConstraintsInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket-constraints-input.ts",
          "path": "src/modules/ticketing/types/ticket-constraints-input.ts"
        }
      }
    },
    {
      "name": "TicketCountingPolicy",
      "id": "TicketCountingPolicy",
      "type": "type",
      "referencedBy": [
        "Ticket"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket-counting-policy.ts",
          "path": "src/modules/ticketing/types/ticket-counting-policy.ts"
        }
      }
    },
    {
      "name": "TicketGroup",
      "id": "TicketGroup",
      "type": "type",
      "referencedBy": [
        "Event",
        "MutationDeleteTicketGroupSuccess",
        "MutationUpsertTicketGroupSuccess",
        "Ticket"
      ],
      "deprecationReason": null,
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/ticket-group.ts",
          "path": "src/modules/ticketing/types/ticket-group.ts"
        }
      }
    },
    {
      "name": "UserBookingsConnection",
      "id": "UserBookingsConnection",
      "type": "type",
      "referencedBy": [
        "User"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Registration",
        "edgeType": "UserBookingsConnectionEdge",
        "connectionType": "UserBookingsConnection"
      },
      "moduleName": "ticketing",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/ticketing/types/registration.ts",
          "path": "src/modules/ticketing/types/registration.ts"
        }
      }
    },
    {
      "name": "shopItem",
      "id": "Query.shopItem",
      "type": "query",
      "returnType": "ShopItem",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/query.shop-item.ts",
          "path": "src/modules/shop/resolvers/query.shop-item.ts"
        }
      }
    },
    {
      "name": "shopPayments",
      "id": "Query.shopPayments",
      "type": "query",
      "returnType": "ShopPayment",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/query.shop-payments.ts",
          "path": "src/modules/shop/resolvers/query.shop-payments.ts"
        }
      }
    },
    {
      "name": "deleteItemPicture",
      "id": "Mutation.deleteItemPicture",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.delete-item-picture.ts",
          "path": "src/modules/shop/resolvers/mutation.delete-item-picture.ts"
        }
      }
    },
    {
      "name": "deleteShopItem",
      "id": "Mutation.deleteShopItem",
      "type": "mutation",
      "returnType": "MutationDeleteShopItemResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteShopItemResult",
        "successDataType": "Boolean",
        "successType": "MutationDeleteShopItemSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.delete-shop-item.ts",
          "path": "src/modules/shop/resolvers/mutation.delete-shop-item.ts"
        }
      }
    },
    {
      "name": "deleteShopOption",
      "id": "Mutation.deleteShopOption",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.delete-shop-option.ts",
          "path": "src/modules/shop/resolvers/mutation.delete-shop-option.ts"
        }
      }
    },
    {
      "name": "paidShopPayment",
      "id": "Mutation.paidShopPayment",
      "type": "mutation",
      "returnType": "MutationPaidShopPaymentResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationPaidShopPaymentResult",
        "successDataType": "ShopPayment",
        "successType": "MutationPaidShopPaymentSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.paid-shop-payment.ts",
          "path": "src/modules/shop/resolvers/mutation.paid-shop-payment.ts"
        }
      }
    },
    {
      "name": "updateItemPicture",
      "id": "Mutation.updateItemPicture",
      "type": "mutation",
      "returnType": "Picture",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.update-item-picture.ts",
          "path": "src/modules/shop/resolvers/mutation.update-item-picture.ts"
        }
      }
    },
    {
      "name": "upsertShopItem",
      "id": "Mutation.upsertShopItem",
      "type": "mutation",
      "returnType": "MutationUpsertShopItemResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertShopItemResult",
        "successDataType": "ShopItem",
        "successType": "MutationUpsertShopItemSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.upsert-shop-item.ts",
          "path": "src/modules/shop/resolvers/mutation.upsert-shop-item.ts"
        }
      }
    },
    {
      "name": "upsertShopOptions",
      "id": "Mutation.upsertShopOptions",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.upsert-shop-options.ts",
          "path": "src/modules/shop/resolvers/mutation.upsert-shop-options.ts"
        }
      }
    },
    {
      "name": "upsertShopPayment",
      "id": "Mutation.upsertShopPayment",
      "type": "mutation",
      "returnType": "MutationUpsertShopPaymentResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertShopPaymentResult",
        "successDataType": "ShopPayment",
        "successType": "MutationUpsertShopPaymentSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/shop/resolvers/mutation.upsert-shop-payment.ts",
          "path": "src/modules/shop/resolvers/mutation.upsert-shop-payment.ts"
        }
      }
    },
    {
      "name": "GroupShopItemsConnection",
      "id": "GroupShopItemsConnection",
      "type": "type",
      "referencedBy": [
        "Group"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "ShopItem",
        "edgeType": "GroupShopItemsConnectionEdge",
        "connectionType": "GroupShopItemsConnection"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-item.ts",
          "path": "src/modules/shop/types/shop-item.ts"
        }
      }
    },
    {
      "name": "MutationPaidShopPaymentResult",
      "id": "MutationPaidShopPaymentResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationPaidShopPaymentResult",
        "successDataType": "ShopPayment",
        "successType": "MutationPaidShopPaymentSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-payment.ts",
          "path": "src/modules/shop/types/shop-payment.ts"
        }
      }
    },
    {
      "name": "MutationUpsertShopItemResult",
      "id": "MutationUpsertShopItemResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertShopItemResult",
        "successDataType": "ShopItem",
        "successType": "MutationUpsertShopItemSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-item.ts",
          "path": "src/modules/shop/types/shop-item.ts"
        }
      }
    },
    {
      "name": "MutationUpsertShopPaymentResult",
      "id": "MutationUpsertShopPaymentResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertShopPaymentResult",
        "successDataType": "ShopPayment",
        "successType": "MutationUpsertShopPaymentSuccess"
      },
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-payment.ts",
          "path": "src/modules/shop/types/shop-payment.ts"
        }
      }
    },
    {
      "name": "Picture",
      "id": "Picture",
      "type": "type",
      "referencedBy": [
        "ShopItem"
      ],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/picture.ts",
          "path": "src/modules/shop/types/picture.ts"
        }
      }
    },
    {
      "name": "ShopItem",
      "id": "ShopItem",
      "type": "type",
      "referencedBy": [
        "Group",
        "GroupShopItemsConnection",
        "GroupShopItemsConnectionEdge",
        "MutationUpsertShopItemSuccess",
        "ShopItemOption",
        "ShopPayment"
      ],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-item.ts",
          "path": "src/modules/shop/types/shop-item.ts"
        }
      }
    },
    {
      "name": "ShopItemAnswer",
      "id": "ShopItemAnswer",
      "type": "type",
      "referencedBy": [
        "ShopPayment"
      ],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-item-answer.ts",
          "path": "src/modules/shop/types/shop-item-answer.ts"
        }
      }
    },
    {
      "name": "ShopItemOption",
      "id": "ShopItemOption",
      "type": "type",
      "referencedBy": [
        "ShopItem"
      ],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-item-option.ts",
          "path": "src/modules/shop/types/shop-item-option.ts"
        }
      }
    },
    {
      "name": "ShopItemOptionInput",
      "id": "ShopItemOptionInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-item-option-input.ts",
          "path": "src/modules/shop/types/shop-item-option-input.ts"
        }
      }
    },
    {
      "name": "ShopPayment",
      "id": "ShopPayment",
      "type": "type",
      "referencedBy": [
        "Group",
        "MutationPaidShopPaymentSuccess",
        "MutationUpsertShopPaymentSuccess",
        "ShopItem",
        "ShopItemAnswer"
      ],
      "deprecationReason": null,
      "moduleName": "shop",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/shop/types/shop-payment.ts",
          "path": "src/modules/shop/types/shop-payment.ts"
        }
      }
    },
    {
      "name": "allForms",
      "id": "Query.allForms",
      "type": "query",
      "returnType": "QueryAllFormsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Form",
        "edgeType": "QueryAllFormsConnectionEdge",
        "connectionType": "QueryAllFormsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/query.all-forms.ts",
          "path": "src/modules/forms/resolvers/query.all-forms.ts"
        }
      }
    },
    {
      "name": "form",
      "id": "Query.form",
      "type": "query",
      "returnType": "Form",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/query.form.ts",
          "path": "src/modules/forms/resolvers/query.form.ts"
        }
      }
    },
    {
      "name": "forms",
      "id": "Query.forms",
      "type": "query",
      "returnType": "QueryFormsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Form",
        "edgeType": "QueryFormsConnectionEdge",
        "connectionType": "QueryFormsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/query.forms.ts",
          "path": "src/modules/forms/resolvers/query.forms.ts"
        }
      }
    },
    {
      "name": "searchForms",
      "id": "Query.searchForms",
      "type": "query",
      "returnType": "FormSearchResult",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/query.search-forms.ts",
          "path": "src/modules/forms/resolvers/query.search-forms.ts"
        }
      }
    },
    {
      "name": "answerFileQuestion",
      "id": "Mutation.answerFileQuestion",
      "type": "mutation",
      "returnType": "AnswerFileUpload",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.answer-file-question.ts",
          "path": "src/modules/forms/resolvers/mutation.answer-file-question.ts"
        }
      }
    },
    {
      "name": "answerFormSection",
      "id": "Mutation.answerFormSection",
      "type": "mutation",
      "returnType": "MutationAnswerFormSectionResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAnswerFormSectionResult",
        "successDataType": "Answer",
        "successType": "MutationAnswerFormSectionSuccess"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.answer-form-section.ts",
          "path": "src/modules/forms/resolvers/mutation.answer-form-section.ts"
        }
      }
    },
    {
      "name": "createLinkedGoogleSheet",
      "id": "Mutation.createLinkedGoogleSheet",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.create-linked-google-sheet.ts",
          "path": "src/modules/forms/resolvers/mutation.create-linked-google-sheet.ts"
        }
      }
    },
    {
      "name": "mailFormAnswers",
      "id": "Mutation.mailFormAnswers",
      "type": "mutation",
      "returnType": "MutationMailFormAnswersResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationMailFormAnswersResult",
        "successDataType": "String",
        "successType": "MutationMailFormAnswersSuccess"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.mail-form-answers.ts",
          "path": "src/modules/forms/resolvers/mutation.mail-form-answers.ts"
        }
      }
    },
    {
      "name": "setFormAnswersCheckbox",
      "id": "Mutation.setFormAnswersCheckbox",
      "type": "mutation",
      "returnType": "Form",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.set-form-answers-checkbox.ts",
          "path": "src/modules/forms/resolvers/mutation.set-form-answers-checkbox.ts"
        }
      }
    },
    {
      "name": "upsertForm",
      "id": "Mutation.upsertForm",
      "type": "mutation",
      "returnType": "Form",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.upsert-form.ts",
          "path": "src/modules/forms/resolvers/mutation.upsert-form.ts"
        }
      }
    },
    {
      "name": "upsertFormSection",
      "id": "Mutation.upsertFormSection",
      "type": "mutation",
      "returnType": "FormSection",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.upsert-form-section.ts",
          "path": "src/modules/forms/resolvers/mutation.upsert-form-section.ts"
        }
      }
    },
    {
      "name": "upsertQuestion",
      "id": "Mutation.upsertQuestion",
      "type": "mutation",
      "returnType": "Question",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.upsert-question.ts",
          "path": "src/modules/forms/resolvers/mutation.upsert-question.ts"
        }
      }
    },
    {
      "name": "Answer",
      "id": "Answer",
      "type": "type",
      "referencedBy": [
        "AnswerSearchResult",
        "AnswerTime",
        "AnswersOfUser",
        "Form",
        "FormAnswersConnection",
        "FormAnswersConnectionEdge",
        "FormSectionAnswersConnection",
        "FormSectionAnswersConnectionEdge",
        "MutationAnswerFormSectionSuccess",
        "Question",
        "QuestionAnswersConnection",
        "QuestionAnswersConnectionEdge",
        "QuestionFileUpload",
        "QuestionScalar",
        "QuestionScale",
        "QuestionSelectMultiple",
        "QuestionSelectOne"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer.ts",
          "path": "src/modules/forms/types/answer.ts"
        }
      }
    },
    {
      "name": "AnswerDate",
      "id": "AnswerDate",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-date.ts",
          "path": "src/modules/forms/types/answer-date.ts"
        }
      }
    },
    {
      "name": "AnswerFileUpload",
      "id": "AnswerFileUpload",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-file-upload.ts",
          "path": "src/modules/forms/types/answer-file-upload.ts"
        }
      }
    },
    {
      "name": "AnswerInput",
      "id": "AnswerInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-input.ts",
          "path": "src/modules/forms/types/answer-input.ts"
        }
      }
    },
    {
      "name": "AnswerLongText",
      "id": "AnswerLongText",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-long-text.ts",
          "path": "src/modules/forms/types/answer-long-text.ts"
        }
      }
    },
    {
      "name": "AnswerNumber",
      "id": "AnswerNumber",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-number.ts",
          "path": "src/modules/forms/types/answer-number.ts"
        }
      }
    },
    {
      "name": "AnswerScale",
      "id": "AnswerScale",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-scale.ts",
          "path": "src/modules/forms/types/answer-scale.ts"
        }
      }
    },
    {
      "name": "AnswerSearchResult",
      "id": "AnswerSearchResult",
      "type": "type",
      "referencedBy": [
        "Form"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-search-result.ts",
          "path": "src/modules/forms/types/answer-search-result.ts"
        }
      }
    },
    {
      "name": "AnswerSelectMultiple",
      "id": "AnswerSelectMultiple",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-select-multiple.ts",
          "path": "src/modules/forms/types/answer-select-multiple.ts"
        }
      }
    },
    {
      "name": "AnswerSelectOne",
      "id": "AnswerSelectOne",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-select-one.ts",
          "path": "src/modules/forms/types/answer-select-one.ts"
        }
      }
    },
    {
      "name": "AnswerText",
      "id": "AnswerText",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-text.ts",
          "path": "src/modules/forms/types/answer-text.ts"
        }
      }
    },
    {
      "name": "AnswerTime",
      "id": "AnswerTime",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer-time.ts",
          "path": "src/modules/forms/types/answer-time.ts"
        }
      }
    },
    {
      "name": "AnswersExportFormats",
      "id": "AnswersExportFormats",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answers-export-formats.ts",
          "path": "src/modules/forms/types/answers-export-formats.ts"
        }
      }
    },
    {
      "name": "AnswersOfUser",
      "id": "AnswersOfUser",
      "type": "type",
      "referencedBy": [
        "FormAnswersByUserConnection",
        "FormAnswersByUserConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answers-of-user.ts",
          "path": "src/modules/forms/types/answers-of-user.ts"
        }
      }
    },
    {
      "name": "Form",
      "id": "Form",
      "type": "type",
      "referencedBy": [
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "Event",
        "FormSearchResult",
        "FormSection",
        "Group",
        "QueryAllFormsConnection",
        "QueryAllFormsConnectionEdge",
        "QueryFormsConnection",
        "QueryFormsConnectionEdge",
        "UserAnsweredFormsConnection",
        "UserAnsweredFormsConnectionEdge",
        "UserPartiallyAnsweredFormsConnection",
        "UserPartiallyAnsweredFormsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form.ts",
          "path": "src/modules/forms/types/form.ts"
        }
      }
    },
    {
      "name": "FormAnswersByUserConnection",
      "id": "FormAnswersByUserConnection",
      "type": "type",
      "referencedBy": [
        "Form"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "AnswersOfUser",
        "edgeType": "FormAnswersByUserConnectionEdge",
        "connectionType": "FormAnswersByUserConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answers-of-user.ts",
          "path": "src/modules/forms/types/answers-of-user.ts"
        }
      }
    },
    {
      "name": "FormAnswersConnection",
      "id": "FormAnswersConnection",
      "type": "type",
      "referencedBy": [
        "Form"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Answer",
        "edgeType": "FormAnswersConnectionEdge",
        "connectionType": "FormAnswersConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer.ts",
          "path": "src/modules/forms/types/answer.ts"
        }
      }
    },
    {
      "name": "FormQuestionsConnection",
      "id": "FormQuestionsConnection",
      "type": "type",
      "referencedBy": [
        "Form"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Question",
        "edgeType": "FormQuestionsConnectionEdge",
        "connectionType": "FormQuestionsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question.ts",
          "path": "src/modules/forms/types/question.ts"
        }
      }
    },
    {
      "name": "FormSearchResult",
      "id": "FormSearchResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form-search-result.ts",
          "path": "src/modules/forms/types/form-search-result.ts"
        }
      }
    },
    {
      "name": "FormSection",
      "id": "FormSection",
      "type": "type",
      "referencedBy": [
        "Answer",
        "AnswerDate",
        "AnswerFileUpload",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerScale",
        "AnswerSelectMultiple",
        "AnswerSelectOne",
        "AnswerText",
        "AnswerTime",
        "Form",
        "FormSection",
        "Question",
        "QuestionFileUpload",
        "QuestionScalar",
        "QuestionScale",
        "QuestionSelectMultiple",
        "QuestionSelectOne"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form-section.ts",
          "path": "src/modules/forms/types/form-section.ts"
        }
      }
    },
    {
      "name": "FormSectionAnswersConnection",
      "id": "FormSectionAnswersConnection",
      "type": "type",
      "referencedBy": [
        "FormSection"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Answer",
        "edgeType": "FormSectionAnswersConnectionEdge",
        "connectionType": "FormSectionAnswersConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer.ts",
          "path": "src/modules/forms/types/answer.ts"
        }
      }
    },
    {
      "name": "MutationAnswerFormSectionResult",
      "id": "MutationAnswerFormSectionResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAnswerFormSectionResult",
        "successDataType": "Answer",
        "successType": "MutationAnswerFormSectionSuccess"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer.ts",
          "path": "src/modules/forms/types/answer.ts"
        }
      }
    },
    {
      "name": "MutationUpsertFormInput",
      "id": "MutationUpsertFormInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "inputTypeOf": {
        "field": "upsertForm"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.upsert-form.ts",
          "path": "src/modules/forms/resolvers/mutation.upsert-form.ts"
        }
      }
    },
    {
      "name": "MutationUpsertFormSectionInput",
      "id": "MutationUpsertFormSectionInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "inputTypeOf": {
        "field": "upsertFormSection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.upsert-form-section.ts",
          "path": "src/modules/forms/resolvers/mutation.upsert-form-section.ts"
        }
      }
    },
    {
      "name": "MutationUpsertQuestionInput",
      "id": "MutationUpsertQuestionInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "inputTypeOf": {
        "field": "upsertQuestion"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/forms/resolvers/mutation.upsert-question.ts",
          "path": "src/modules/forms/resolvers/mutation.upsert-question.ts"
        }
      }
    },
    {
      "name": "QueryAllFormsConnection",
      "id": "QueryAllFormsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Form",
        "edgeType": "QueryAllFormsConnectionEdge",
        "connectionType": "QueryAllFormsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form.ts",
          "path": "src/modules/forms/types/form.ts"
        }
      }
    },
    {
      "name": "QueryFormsConnection",
      "id": "QueryFormsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Form",
        "edgeType": "QueryFormsConnectionEdge",
        "connectionType": "QueryFormsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form.ts",
          "path": "src/modules/forms/types/form.ts"
        }
      }
    },
    {
      "name": "Question",
      "id": "Question",
      "type": "type",
      "referencedBy": [
        "Answer",
        "FormQuestionsConnection",
        "FormQuestionsConnectionEdge",
        "FormSection"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question.ts",
          "path": "src/modules/forms/types/question.ts"
        }
      }
    },
    {
      "name": "QuestionAnswersConnection",
      "id": "QuestionAnswersConnection",
      "type": "type",
      "referencedBy": [
        "Question",
        "QuestionFileUpload",
        "QuestionScalar",
        "QuestionScale",
        "QuestionSelectMultiple",
        "QuestionSelectOne"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Answer",
        "edgeType": "QuestionAnswersConnectionEdge",
        "connectionType": "QuestionAnswersConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/answer.ts",
          "path": "src/modules/forms/types/answer.ts"
        }
      }
    },
    {
      "name": "QuestionFileUpload",
      "id": "QuestionFileUpload",
      "type": "type",
      "referencedBy": [
        "AnswerFileUpload"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-file-upload.ts",
          "path": "src/modules/forms/types/question-file-upload.ts"
        }
      }
    },
    {
      "name": "QuestionKind",
      "id": "QuestionKind",
      "type": "type",
      "referencedBy": [
        "MutationUpsertQuestionInput",
        "Question",
        "QuestionFileUpload",
        "QuestionScalar",
        "QuestionScale",
        "QuestionSelectMultiple",
        "QuestionSelectOne"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-kind.ts",
          "path": "src/modules/forms/types/question-kind.ts"
        }
      }
    },
    {
      "name": "QuestionOptionInput",
      "id": "QuestionOptionInput",
      "type": "type",
      "referencedBy": [
        "MutationUpsertQuestionInput"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-option-input.ts",
          "path": "src/modules/forms/types/question-option-input.ts"
        }
      }
    },
    {
      "name": "QuestionScalar",
      "id": "QuestionScalar",
      "type": "type",
      "referencedBy": [
        "AnswerDate",
        "AnswerLongText",
        "AnswerNumber",
        "AnswerText",
        "AnswerTime"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-scalar.ts",
          "path": "src/modules/forms/types/question-scalar.ts"
        }
      }
    },
    {
      "name": "QuestionScale",
      "id": "QuestionScale",
      "type": "type",
      "referencedBy": [
        "AnswerScale"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-scale.ts",
          "path": "src/modules/forms/types/question-scale.ts"
        }
      }
    },
    {
      "name": "QuestionScaleInput",
      "id": "QuestionScaleInput",
      "type": "type",
      "referencedBy": [
        "MutationUpsertQuestionInput"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-scale-input.ts",
          "path": "src/modules/forms/types/question-scale-input.ts"
        }
      }
    },
    {
      "name": "QuestionSelectMultiple",
      "id": "QuestionSelectMultiple",
      "type": "type",
      "referencedBy": [
        "AnswerSelectMultiple"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-select-multiple.ts",
          "path": "src/modules/forms/types/question-select-multiple.ts"
        }
      }
    },
    {
      "name": "QuestionSelectOne",
      "id": "QuestionSelectOne",
      "type": "type",
      "referencedBy": [
        "AnswerSelectOne"
      ],
      "deprecationReason": null,
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/question-select-one.ts",
          "path": "src/modules/forms/types/question-select-one.ts"
        }
      }
    },
    {
      "name": "UserAnsweredFormsConnection",
      "id": "UserAnsweredFormsConnection",
      "type": "type",
      "referencedBy": [
        "User"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Form",
        "edgeType": "UserAnsweredFormsConnectionEdge",
        "connectionType": "UserAnsweredFormsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form.ts",
          "path": "src/modules/forms/types/form.ts"
        }
      }
    },
    {
      "name": "UserPartiallyAnsweredFormsConnection",
      "id": "UserPartiallyAnsweredFormsConnection",
      "type": "type",
      "referencedBy": [
        "User"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Form",
        "edgeType": "UserPartiallyAnsweredFormsConnectionEdge",
        "connectionType": "UserPartiallyAnsweredFormsConnection"
      },
      "moduleName": "forms",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/forms/types/form.ts",
          "path": "src/modules/forms/types/form.ts"
        }
      }
    },
    {
      "name": "document",
      "id": "Query.document",
      "type": "query",
      "returnType": "Document",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/query.document.ts",
          "path": "src/modules/documents/resolvers/query.document.ts"
        }
      }
    },
    {
      "name": "documents",
      "id": "Query.documents",
      "type": "query",
      "returnType": "QueryDocumentsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Document",
        "edgeType": "QueryDocumentsConnectionEdge",
        "connectionType": "QueryDocumentsConnection"
      },
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/query.documents.ts",
          "path": "src/modules/documents/resolvers/query.documents.ts"
        }
      }
    },
    {
      "name": "searchDocuments",
      "id": "Query.searchDocuments",
      "type": "query",
      "returnType": "DocumentSearchResult",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/query.search-documents.ts",
          "path": "src/modules/documents/resolvers/query.search-documents.ts"
        }
      }
    },
    {
      "name": "deleteDocument",
      "id": "Mutation.deleteDocument",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/mutation.delete-document.ts",
          "path": "src/modules/documents/resolvers/mutation.delete-document.ts"
        }
      }
    },
    {
      "name": "deleteDocumentFile",
      "id": "Mutation.deleteDocumentFile",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/mutation.delete-document-file.ts",
          "path": "src/modules/documents/resolvers/mutation.delete-document-file.ts"
        }
      }
    },
    {
      "name": "mergeDocuments",
      "id": "Mutation.mergeDocuments",
      "type": "mutation",
      "returnType": "Document",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/mutation.merge-documents.ts",
          "path": "src/modules/documents/resolvers/mutation.merge-documents.ts"
        }
      }
    },
    {
      "name": "setDocumentFileIsSolution",
      "id": "Mutation.setDocumentFileIsSolution",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/mutation.set-document-file-is-solution.ts",
          "path": "src/modules/documents/resolvers/mutation.set-document-file-is-solution.ts"
        }
      }
    },
    {
      "name": "uploadDocumentFile",
      "id": "Mutation.uploadDocumentFile",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/mutation.upload-document-file.ts",
          "path": "src/modules/documents/resolvers/mutation.upload-document-file.ts"
        }
      }
    },
    {
      "name": "upsertDocument",
      "id": "Mutation.upsertDocument",
      "type": "mutation",
      "returnType": "MutationUpsertDocumentResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertDocumentResult",
        "successDataType": "Document",
        "successType": "MutationUpsertDocumentSuccess"
      },
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/documents/resolvers/mutation.upsert-document.ts",
          "path": "src/modules/documents/resolvers/mutation.upsert-document.ts"
        }
      }
    },
    {
      "name": "Document",
      "id": "Document",
      "type": "type",
      "referencedBy": [
        "Comment",
        "DocumentSearchResult",
        "MutationUpsertDocumentSuccess",
        "QueryDocumentsConnection",
        "QueryDocumentsConnectionEdge",
        "Reaction",
        "SubjectDocumentsConnection",
        "SubjectDocumentsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/documents/types/document.ts",
          "path": "src/modules/documents/types/document.ts"
        }
      }
    },
    {
      "name": "DocumentSearchResult",
      "id": "DocumentSearchResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/documents/types/document-search-result.ts",
          "path": "src/modules/documents/types/document-search-result.ts"
        }
      }
    },
    {
      "name": "DocumentType",
      "id": "DocumentType",
      "type": "type",
      "referencedBy": [
        "Document"
      ],
      "deprecationReason": null,
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/documents/types/document-type.ts",
          "path": "src/modules/documents/types/document-type.ts"
        }
      }
    },
    {
      "name": "MutationUpsertDocumentResult",
      "id": "MutationUpsertDocumentResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertDocumentResult",
        "successDataType": "Document",
        "successType": "MutationUpsertDocumentSuccess"
      },
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/documents/types/document.ts",
          "path": "src/modules/documents/types/document.ts"
        }
      }
    },
    {
      "name": "QueryDocumentsConnection",
      "id": "QueryDocumentsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Document",
        "edgeType": "QueryDocumentsConnectionEdge",
        "connectionType": "QueryDocumentsConnection"
      },
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/documents/types/document.ts",
          "path": "src/modules/documents/types/document.ts"
        }
      }
    },
    {
      "name": "SubjectDocumentsConnection",
      "id": "SubjectDocumentsConnection",
      "type": "type",
      "referencedBy": [
        "Subject"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Document",
        "edgeType": "SubjectDocumentsConnectionEdge",
        "connectionType": "SubjectDocumentsConnection"
      },
      "moduleName": "documents",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/documents/types/document.ts",
          "path": "src/modules/documents/types/document.ts"
        }
      }
    },
    {
      "name": "autodeployedTheme",
      "id": "Query.autodeployedTheme",
      "type": "query",
      "returnType": "Theme",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/themes/resolvers/query.autodeployed-theme.ts",
          "path": "src/modules/themes/resolvers/query.autodeployed-theme.ts"
        }
      }
    },
    {
      "name": "themes",
      "id": "Query.themes",
      "type": "query",
      "returnType": "Theme",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/themes/resolvers/query.themes.ts",
          "path": "src/modules/themes/resolvers/query.themes.ts"
        }
      }
    },
    {
      "name": "blockTheme",
      "id": "Mutation.blockTheme",
      "type": "mutation",
      "returnType": "Theme",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/themes/resolvers/mutation.block-theme.ts",
          "path": "src/modules/themes/resolvers/mutation.block-theme.ts"
        }
      }
    },
    {
      "name": "setThemeValue",
      "id": "Mutation.setThemeValue",
      "type": "mutation",
      "returnType": "Theme",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/themes/resolvers/mutation.set-theme-value.ts",
          "path": "src/modules/themes/resolvers/mutation.set-theme-value.ts"
        }
      }
    },
    {
      "name": "setThemeVisibility",
      "id": "Mutation.setThemeVisibility",
      "type": "mutation",
      "returnType": "Theme",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/themes/resolvers/mutation.set-theme-visibility.ts",
          "path": "src/modules/themes/resolvers/mutation.set-theme-visibility.ts"
        }
      }
    },
    {
      "name": "upsertTheme",
      "id": "Mutation.upsertTheme",
      "type": "mutation",
      "returnType": "MutationUpsertThemeResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertThemeResult",
        "successDataType": "Theme",
        "successType": "MutationUpsertThemeSuccess"
      },
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/themes/resolvers/mutation.upsert-theme.ts",
          "path": "src/modules/themes/resolvers/mutation.upsert-theme.ts"
        }
      }
    },
    {
      "name": "MutationUpsertThemeResult",
      "id": "MutationUpsertThemeResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertThemeResult",
        "successDataType": "Theme",
        "successType": "MutationUpsertThemeSuccess"
      },
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/themes/types/theme.ts",
          "path": "src/modules/themes/types/theme.ts"
        }
      }
    },
    {
      "name": "Theme",
      "id": "Theme",
      "type": "type",
      "referencedBy": [
        "MutationUpsertThemeSuccess",
        "ThemeValue"
      ],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/themes/types/theme.ts",
          "path": "src/modules/themes/types/theme.ts"
        }
      }
    },
    {
      "name": "ThemeValue",
      "id": "ThemeValue",
      "type": "type",
      "referencedBy": [
        "Theme"
      ],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/themes/types/theme-value.ts",
          "path": "src/modules/themes/types/theme-value.ts"
        }
      }
    },
    {
      "name": "ThemeVariable",
      "id": "ThemeVariable",
      "type": "type",
      "referencedBy": [
        "ThemeValue"
      ],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/themes/types/theme-variable.ts",
          "path": "src/modules/themes/types/theme-variable.ts"
        }
      }
    },
    {
      "name": "ThemeVariant",
      "id": "ThemeVariant",
      "type": "type",
      "referencedBy": [
        "ThemeValue"
      ],
      "deprecationReason": null,
      "moduleName": "themes",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/themes/types/theme-variant.ts",
          "path": "src/modules/themes/types/theme-variant.ts"
        }
      }
    },
    {
      "name": "setPicture",
      "id": "Mutation.setPicture",
      "type": "mutation",
      "returnType": "MutationSetPictureResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSetPictureResult",
        "successDataType": "Pictured",
        "successType": "MutationSetPictureSuccess"
      },
      "moduleName": "pictures",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pictures/resolvers/mutation.set-picture.ts",
          "path": "src/modules/pictures/resolvers/mutation.set-picture.ts"
        }
      }
    },
    {
      "name": "profile",
      "id": "Query.profile",
      "type": "query",
      "returnType": "Profile",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "profiles",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/profiles/resolvers/query.profile.ts",
          "path": "src/modules/profiles/resolvers/query.profile.ts"
        }
      }
    },
    {
      "name": "Profile",
      "id": "Profile",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "profiles",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/profiles/types/profile.ts",
          "path": "src/modules/profiles/types/profile.ts"
        }
      }
    },
    {
      "name": "notification",
      "id": "Query.notification",
      "type": "query",
      "returnType": "Notification",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/query.notification.ts",
          "path": "src/modules/notifications/resolvers/query.notification.ts"
        }
      }
    },
    {
      "name": "notificationSubscription",
      "id": "Query.notificationSubscription",
      "type": "query",
      "returnType": "NotificationSubscription",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/query.notification-subscription.ts",
          "path": "src/modules/notifications/resolvers/query.notification-subscription.ts"
        }
      }
    },
    {
      "name": "notificationSubscriptions",
      "id": "Query.notificationSubscriptions",
      "type": "query",
      "returnType": "NotificationSubscription",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/query.notification-subscriptions.ts",
          "path": "src/modules/notifications/resolvers/query.notification-subscriptions.ts"
        }
      }
    },
    {
      "name": "notifications",
      "id": "Query.notifications",
      "type": "query",
      "returnType": "QueryNotificationsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Notification",
        "edgeType": "QueryNotificationsConnectionEdge",
        "connectionType": "QueryNotificationsConnection"
      },
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/query.notifications.ts",
          "path": "src/modules/notifications/resolvers/query.notifications.ts"
        }
      }
    },
    {
      "name": "notificationsSendCountForArticle",
      "id": "Query.notificationsSendCountForArticle",
      "type": "query",
      "returnType": "Int",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/query.notifications-send-count-for-article.ts",
          "path": "src/modules/notifications/resolvers/query.notifications-send-count-for-article.ts"
        }
      }
    },
    {
      "name": "sendNotification",
      "id": "Mutation.sendNotification",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/mutation.send-notification.ts",
          "path": "src/modules/notifications/resolvers/mutation.send-notification.ts"
        }
      }
    },
    {
      "name": "subscribeToNotifications",
      "id": "Mutation.subscribeToNotifications",
      "type": "mutation",
      "returnType": "MutationSubscribeToNotificationsResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSubscribeToNotificationsResult",
        "successDataType": "NotificationSubscription",
        "successType": "MutationSubscribeToNotificationsSuccess"
      },
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/mutation.subscribe-to-notifications.ts",
          "path": "src/modules/notifications/resolvers/mutation.subscribe-to-notifications.ts"
        }
      }
    },
    {
      "name": "testNotification",
      "id": "Mutation.testNotification",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/mutation.test-notification.ts",
          "path": "src/modules/notifications/resolvers/mutation.test-notification.ts"
        }
      }
    },
    {
      "name": "unsubscribeFromNotifications",
      "id": "Mutation.unsubscribeFromNotifications",
      "type": "mutation",
      "returnType": "MutationUnsubscribeFromNotificationsResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUnsubscribeFromNotificationsResult",
        "successDataType": "NotificationSubscription",
        "successType": "MutationUnsubscribeFromNotificationsSuccess"
      },
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/notifications/resolvers/mutation.unsubscribe-from-notifications.ts",
          "path": "src/modules/notifications/resolvers/mutation.unsubscribe-from-notifications.ts"
        }
      }
    },
    {
      "name": "MutationSubscribeToNotificationsResult",
      "id": "MutationSubscribeToNotificationsResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationSubscribeToNotificationsResult",
        "successDataType": "NotificationSubscription",
        "successType": "MutationSubscribeToNotificationsSuccess"
      },
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification-subscription.ts",
          "path": "src/modules/notifications/types/notification-subscription.ts"
        }
      }
    },
    {
      "name": "MutationUnsubscribeFromNotificationsResult",
      "id": "MutationUnsubscribeFromNotificationsResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUnsubscribeFromNotificationsResult",
        "successDataType": "NotificationSubscription",
        "successType": "MutationUnsubscribeFromNotificationsSuccess"
      },
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification-subscription.ts",
          "path": "src/modules/notifications/types/notification-subscription.ts"
        }
      }
    },
    {
      "name": "Notification",
      "id": "Notification",
      "type": "type",
      "referencedBy": [
        "QueryNotificationsConnection",
        "QueryNotificationsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification.ts",
          "path": "src/modules/notifications/types/notification.ts"
        }
      }
    },
    {
      "name": "NotificationChannel",
      "id": "NotificationChannel",
      "type": "type",
      "referencedBy": [
        "Notification",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification-channel.ts",
          "path": "src/modules/notifications/types/notification-channel.ts"
        }
      }
    },
    {
      "name": "NotificationSubscription",
      "id": "NotificationSubscription",
      "type": "type",
      "referencedBy": [
        "MutationSubscribeToNotificationsSuccess",
        "MutationUnsubscribeFromNotificationsSuccess",
        "Notification"
      ],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification-subscription.ts",
          "path": "src/modules/notifications/types/notification-subscription.ts"
        }
      }
    },
    {
      "name": "NotificationSubscriptionKeysInput",
      "id": "NotificationSubscriptionKeysInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification-subscription-keys-input.ts",
          "path": "src/modules/notifications/types/notification-subscription-keys-input.ts"
        }
      }
    },
    {
      "name": "QueryNotificationsConnection",
      "id": "QueryNotificationsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Notification",
        "edgeType": "QueryNotificationsConnectionEdge",
        "connectionType": "QueryNotificationsConnection"
      },
      "moduleName": "notifications",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/notifications/types/notification.ts",
          "path": "src/modules/notifications/types/notification.ts"
        }
      }
    },
    {
      "name": "service",
      "id": "Query.service",
      "type": "query",
      "returnType": "Service",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/services/resolvers/query.service.ts",
          "path": "src/modules/services/resolvers/query.service.ts"
        }
      }
    },
    {
      "name": "services",
      "id": "Query.services",
      "type": "query",
      "returnType": "Service",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/services/resolvers/query.services.ts",
          "path": "src/modules/services/resolvers/query.services.ts"
        }
      }
    },
    {
      "name": "userServices",
      "id": "Query.userServices",
      "type": "query",
      "returnType": "Service",
      "referencedBy": [],
      "deprecationReason": "Use `services(mine: true)` instead",
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/services/resolvers/query.user-services.ts",
          "path": "src/modules/services/resolvers/query.user-services.ts"
        }
      }
    },
    {
      "name": "upsertService",
      "id": "Mutation.upsertService",
      "type": "mutation",
      "returnType": "MutationUpsertServiceResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertServiceResult",
        "successDataType": "Service",
        "successType": "MutationUpsertServiceSuccess"
      },
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/services/resolvers/mutation.upsert-service.ts",
          "path": "src/modules/services/resolvers/mutation.upsert-service.ts"
        }
      }
    },
    {
      "name": "LogoSourceType",
      "id": "LogoSourceType",
      "type": "type",
      "referencedBy": [
        "Service"
      ],
      "deprecationReason": null,
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/services/types/logo-source-type.ts",
          "path": "src/modules/services/types/logo-source-type.ts"
        }
      }
    },
    {
      "name": "MutationUpsertServiceResult",
      "id": "MutationUpsertServiceResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertServiceResult",
        "successDataType": "Service",
        "successType": "MutationUpsertServiceSuccess"
      },
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/services/types/service.ts",
          "path": "src/modules/services/types/service.ts"
        }
      }
    },
    {
      "name": "Service",
      "id": "Service",
      "type": "type",
      "referencedBy": [
        "Group",
        "MutationUpsertServiceSuccess",
        "School",
        "StudentAssociationServicesConnection",
        "StudentAssociationServicesConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/services/types/service.ts",
          "path": "src/modules/services/types/service.ts"
        }
      }
    },
    {
      "name": "ServiceOwner",
      "id": "ServiceOwner",
      "type": "type",
      "referencedBy": [
        "Service"
      ],
      "deprecationReason": null,
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/services/types/service-owner.ts",
          "path": "src/modules/services/types/service-owner.ts"
        }
      }
    },
    {
      "name": "StudentAssociationServicesConnection",
      "id": "StudentAssociationServicesConnection",
      "type": "type",
      "referencedBy": [
        "StudentAssociation"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Service",
        "edgeType": "StudentAssociationServicesConnectionEdge",
        "connectionType": "StudentAssociationServicesConnection"
      },
      "moduleName": "services",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/services/types/service.ts",
          "path": "src/modules/services/types/service.ts"
        }
      }
    },
    {
      "name": "barWeek",
      "id": "Query.barWeek",
      "type": "query",
      "returnType": "BarWeek",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/bar-weeks/resolvers/query.bar-week.ts",
          "path": "src/modules/bar-weeks/resolvers/query.bar-week.ts"
        }
      }
    },
    {
      "name": "barWeekNow",
      "id": "Query.barWeekNow",
      "type": "query",
      "returnType": "BarWeek",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/bar-weeks/resolvers/query.bar-week-now.ts",
          "path": "src/modules/bar-weeks/resolvers/query.bar-week-now.ts"
        }
      }
    },
    {
      "name": "barWeeks",
      "id": "Query.barWeeks",
      "type": "query",
      "returnType": "BarWeek",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/bar-weeks/resolvers/query.bar-weeks.ts",
          "path": "src/modules/bar-weeks/resolvers/query.bar-weeks.ts"
        }
      }
    },
    {
      "name": "deleteBarWeek",
      "id": "Mutation.deleteBarWeek",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/bar-weeks/resolvers/mutation.delete-bar-week.ts",
          "path": "src/modules/bar-weeks/resolvers/mutation.delete-bar-week.ts"
        }
      }
    },
    {
      "name": "upsertBarWeek",
      "id": "Mutation.upsertBarWeek",
      "type": "mutation",
      "returnType": "MutationUpsertBarWeekResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertBarWeekResult",
        "successDataType": "BarWeek",
        "successType": "MutationUpsertBarWeekSuccess"
      },
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/bar-weeks/resolvers/mutation.upsert-bar-week.ts",
          "path": "src/modules/bar-weeks/resolvers/mutation.upsert-bar-week.ts"
        }
      }
    },
    {
      "name": "BarWeek",
      "id": "BarWeek",
      "type": "type",
      "referencedBy": [
        "MutationUpsertBarWeekSuccess"
      ],
      "deprecationReason": null,
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/bar-weeks/types/bar-week.ts",
          "path": "src/modules/bar-weeks/types/bar-week.ts"
        }
      }
    },
    {
      "name": "MutationUpsertBarWeekResult",
      "id": "MutationUpsertBarWeekResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertBarWeekResult",
        "successDataType": "BarWeek",
        "successType": "MutationUpsertBarWeekSuccess"
      },
      "moduleName": "bar-weeks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/bar-weeks/types/bar-week.ts",
          "path": "src/modules/bar-weeks/types/bar-week.ts"
        }
      }
    },
    {
      "name": "contributionOptions",
      "id": "Query.contributionOptions",
      "type": "query",
      "returnType": "ContributionOption",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/query.contribution-options.ts",
          "path": "src/modules/student-associations/resolvers/query.contribution-options.ts"
        }
      }
    },
    {
      "name": "studentAssociation",
      "id": "Query.studentAssociation",
      "type": "query",
      "returnType": "StudentAssociation",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/query.student-association.ts",
          "path": "src/modules/student-associations/resolvers/query.student-association.ts"
        }
      }
    },
    {
      "name": "studentAssociations",
      "id": "Query.studentAssociations",
      "type": "query",
      "returnType": "StudentAssociation",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/query.student-associations.ts",
          "path": "src/modules/student-associations/resolvers/query.student-associations.ts"
        }
      }
    },
    {
      "name": "cancelPendingContribution",
      "id": "Mutation.cancelPendingContribution",
      "type": "mutation",
      "returnType": "MutationCancelPendingContributionResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationCancelPendingContributionResult",
        "successDataType": "Boolean",
        "successType": "MutationCancelPendingContributionSuccess"
      },
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/mutation.cancel-pending-contribution.ts",
          "path": "src/modules/student-associations/resolvers/mutation.cancel-pending-contribution.ts"
        }
      }
    },
    {
      "name": "contribute",
      "id": "Mutation.contribute",
      "type": "mutation",
      "returnType": "MutationContributeResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationContributeResult",
        "successDataType": "Boolean",
        "successType": "MutationContributeSuccess"
      },
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/mutation.contribute.ts",
          "path": "src/modules/student-associations/resolvers/mutation.contribute.ts"
        }
      }
    },
    {
      "name": "deleteContribution",
      "id": "Mutation.deleteContribution",
      "type": "mutation",
      "returnType": "MutationDeleteContributionResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteContributionResult",
        "successDataType": "ContributionOption",
        "successType": "MutationDeleteContributionSuccess"
      },
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/mutation.delete-contribution.ts",
          "path": "src/modules/student-associations/resolvers/mutation.delete-contribution.ts"
        }
      }
    },
    {
      "name": "markContributionAsPaid",
      "id": "Mutation.markContributionAsPaid",
      "type": "mutation",
      "returnType": "MutationMarkContributionAsPaidResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationMarkContributionAsPaidResult",
        "successDataType": "ContributionOption",
        "successType": "MutationMarkContributionAsPaidSuccess"
      },
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/mutation.mark-contribution-as-paid.ts",
          "path": "src/modules/student-associations/resolvers/mutation.mark-contribution-as-paid.ts"
        }
      }
    },
    {
      "name": "updateStudentAssociationPicture",
      "id": "Mutation.updateStudentAssociationPicture",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/student-associations/resolvers/mutation.update-student-association-picture.ts",
          "path": "src/modules/student-associations/resolvers/mutation.update-student-association-picture.ts"
        }
      }
    },
    {
      "name": "ContributionOption",
      "id": "ContributionOption",
      "type": "type",
      "referencedBy": [
        "MutationDeleteContributionSuccess",
        "MutationMarkContributionAsPaidSuccess",
        "StudentAssociation",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/student-associations/types/contribution-option.ts",
          "path": "src/modules/student-associations/types/contribution-option.ts"
        }
      }
    },
    {
      "name": "MutationDeleteContributionResult",
      "id": "MutationDeleteContributionResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteContributionResult",
        "successDataType": "ContributionOption",
        "successType": "MutationDeleteContributionSuccess"
      },
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/student-associations/types/contribution-option.ts",
          "path": "src/modules/student-associations/types/contribution-option.ts"
        }
      }
    },
    {
      "name": "MutationMarkContributionAsPaidResult",
      "id": "MutationMarkContributionAsPaidResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationMarkContributionAsPaidResult",
        "successDataType": "ContributionOption",
        "successType": "MutationMarkContributionAsPaidSuccess"
      },
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/student-associations/types/contribution-option.ts",
          "path": "src/modules/student-associations/types/contribution-option.ts"
        }
      }
    },
    {
      "name": "StudentAssociation",
      "id": "StudentAssociation",
      "type": "type",
      "referencedBy": [
        "ContributionOption",
        "Group",
        "LydiaAccount",
        "Page",
        "Profile",
        "School",
        "Service",
        "ServiceOwner",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "student-associations",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/student-associations/types/student-association.ts",
          "path": "src/modules/student-associations/types/student-association.ts"
        }
      }
    },
    {
      "name": "page",
      "id": "Query.page",
      "type": "query",
      "returnType": "Page",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pages/resolvers/query.page.ts",
          "path": "src/modules/pages/resolvers/query.page.ts"
        }
      }
    },
    {
      "name": "pages",
      "id": "Query.pages",
      "type": "query",
      "returnType": "QueryPagesConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Page",
        "edgeType": "QueryPagesConnectionEdge",
        "connectionType": "QueryPagesConnection"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pages/resolvers/query.pages.ts",
          "path": "src/modules/pages/resolvers/query.pages.ts"
        }
      }
    },
    {
      "name": "addFileToPage",
      "id": "Mutation.addFileToPage",
      "type": "mutation",
      "returnType": "MutationAddFileToPageResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAddFileToPageResult",
        "successDataType": "Page",
        "successType": "MutationAddFileToPageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pages/resolvers/mutation.add-file-to-page.ts",
          "path": "src/modules/pages/resolvers/mutation.add-file-to-page.ts"
        }
      }
    },
    {
      "name": "deletePage",
      "id": "Mutation.deletePage",
      "type": "mutation",
      "returnType": "MutationDeletePageResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeletePageResult",
        "successDataType": "Page",
        "successType": "MutationDeletePageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pages/resolvers/mutation.delete-page.ts",
          "path": "src/modules/pages/resolvers/mutation.delete-page.ts"
        }
      }
    },
    {
      "name": "removeFileFromPage",
      "id": "Mutation.removeFileFromPage",
      "type": "mutation",
      "returnType": "MutationRemoveFileFromPageResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRemoveFileFromPageResult",
        "successDataType": "Page",
        "successType": "MutationRemoveFileFromPageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pages/resolvers/mutation.remove-file-from-page.ts",
          "path": "src/modules/pages/resolvers/mutation.remove-file-from-page.ts"
        }
      }
    },
    {
      "name": "upsertPage",
      "id": "Mutation.upsertPage",
      "type": "mutation",
      "returnType": "MutationUpsertPageResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertPageResult",
        "successDataType": "Page",
        "successType": "MutationUpsertPageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/pages/resolvers/mutation.upsert-page.ts",
          "path": "src/modules/pages/resolvers/mutation.upsert-page.ts"
        }
      }
    },
    {
      "name": "MutationAddFileToPageResult",
      "id": "MutationAddFileToPageResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAddFileToPageResult",
        "successDataType": "Page",
        "successType": "MutationAddFileToPageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/page.ts",
          "path": "src/modules/pages/types/page.ts"
        }
      }
    },
    {
      "name": "MutationDeletePageResult",
      "id": "MutationDeletePageResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeletePageResult",
        "successDataType": "Page",
        "successType": "MutationDeletePageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/page.ts",
          "path": "src/modules/pages/types/page.ts"
        }
      }
    },
    {
      "name": "MutationRemoveFileFromPageResult",
      "id": "MutationRemoveFileFromPageResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationRemoveFileFromPageResult",
        "successDataType": "Page",
        "successType": "MutationRemoveFileFromPageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/page.ts",
          "path": "src/modules/pages/types/page.ts"
        }
      }
    },
    {
      "name": "MutationUpsertPageResult",
      "id": "MutationUpsertPageResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertPageResult",
        "successDataType": "Page",
        "successType": "MutationUpsertPageSuccess"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/page.ts",
          "path": "src/modules/pages/types/page.ts"
        }
      }
    },
    {
      "name": "Page",
      "id": "Page",
      "type": "type",
      "referencedBy": [
        "Group",
        "MutationAddFileToPageSuccess",
        "MutationDeletePageSuccess",
        "MutationRemoveFileFromPageSuccess",
        "MutationUpsertPageSuccess",
        "PagesConnection",
        "PagesEdge",
        "QueryPagesConnection",
        "QueryPagesConnectionEdge",
        "StudentAssociation"
      ],
      "deprecationReason": null,
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/page.ts",
          "path": "src/modules/pages/types/page.ts"
        }
      }
    },
    {
      "name": "PagesConnection",
      "id": "PagesConnection",
      "type": "type",
      "referencedBy": [
        "Group",
        "StudentAssociation"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Page",
        "edgeType": "PagesEdge",
        "connectionType": "PagesConnection"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/pages-connection.ts",
          "path": "src/modules/pages/types/pages-connection.ts"
        }
      }
    },
    {
      "name": "QueryPagesConnection",
      "id": "QueryPagesConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Page",
        "edgeType": "QueryPagesConnectionEdge",
        "connectionType": "QueryPagesConnection"
      },
      "moduleName": "pages",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/pages/types/page.ts",
          "path": "src/modules/pages/types/page.ts"
        }
      }
    },
    {
      "name": "school",
      "id": "Query.school",
      "type": "query",
      "returnType": "School",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/schools/resolvers/query.school.ts",
          "path": "src/modules/schools/resolvers/query.school.ts"
        }
      }
    },
    {
      "name": "schoolGroups",
      "id": "Query.schoolGroups",
      "type": "query",
      "returnType": "SchoolGroup",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/schools/resolvers/query.school-groups.ts",
          "path": "src/modules/schools/resolvers/query.school-groups.ts"
        }
      }
    },
    {
      "name": "schools",
      "id": "Query.schools",
      "type": "query",
      "returnType": "School",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/schools/resolvers/query.schools.ts",
          "path": "src/modules/schools/resolvers/query.schools.ts"
        }
      }
    },
    {
      "name": "deleteSchoolPicture",
      "id": "Mutation.deleteSchoolPicture",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/schools/resolvers/mutation.delete-school-picture.ts",
          "path": "src/modules/schools/resolvers/mutation.delete-school-picture.ts"
        }
      }
    },
    {
      "name": "updateSchool",
      "id": "Mutation.updateSchool",
      "type": "mutation",
      "returnType": "School",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/schools/resolvers/mutation.update-school.ts",
          "path": "src/modules/schools/resolvers/mutation.update-school.ts"
        }
      }
    },
    {
      "name": "updateSchoolPicture",
      "id": "Mutation.updateSchoolPicture",
      "type": "mutation",
      "returnType": "String",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/schools/resolvers/mutation.update-school-picture.ts",
          "path": "src/modules/schools/resolvers/mutation.update-school-picture.ts"
        }
      }
    },
    {
      "name": "School",
      "id": "School",
      "type": "type",
      "referencedBy": [
        "ContributionOption",
        "Major",
        "Profile",
        "QuickSignup",
        "Service",
        "ServiceOwner",
        "StudentAssociation",
        "Ticket"
      ],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/schools/types/school.ts",
          "path": "src/modules/schools/types/school.ts"
        }
      }
    },
    {
      "name": "SchoolGroup",
      "id": "SchoolGroup",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/schools/types/school-group.ts",
          "path": "src/modules/schools/types/school-group.ts"
        }
      }
    },
    {
      "name": "SchoolInput",
      "id": "SchoolInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "schools",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/schools/types/school-input.ts",
          "path": "src/modules/schools/types/school-input.ts"
        }
      }
    },
    {
      "name": "major",
      "id": "Query.major",
      "type": "query",
      "returnType": "Major",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/query.major.ts",
          "path": "src/modules/curriculum/resolvers/query.major.ts"
        }
      }
    },
    {
      "name": "majors",
      "id": "Query.majors",
      "type": "query",
      "returnType": "Major",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/query.majors.ts",
          "path": "src/modules/curriculum/resolvers/query.majors.ts"
        }
      }
    },
    {
      "name": "minor",
      "id": "Query.minor",
      "type": "query",
      "returnType": "Minor",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/query.minor.ts",
          "path": "src/modules/curriculum/resolvers/query.minor.ts"
        }
      }
    },
    {
      "name": "minors",
      "id": "Query.minors",
      "type": "query",
      "returnType": "QueryMinorsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Minor",
        "edgeType": "QueryMinorsConnectionEdge",
        "connectionType": "QueryMinorsConnection"
      },
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/query.minors.ts",
          "path": "src/modules/curriculum/resolvers/query.minors.ts"
        }
      }
    },
    {
      "name": "subject",
      "id": "Query.subject",
      "type": "query",
      "returnType": "Subject",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/query.subject.ts",
          "path": "src/modules/curriculum/resolvers/query.subject.ts"
        }
      }
    },
    {
      "name": "subjects",
      "id": "Query.subjects",
      "type": "query",
      "returnType": "Subject",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/query.subjects.ts",
          "path": "src/modules/curriculum/resolvers/query.subjects.ts"
        }
      }
    },
    {
      "name": "updateSubjectsExamDates",
      "id": "Mutation.updateSubjectsExamDates",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/curriculum/resolvers/mutation.update-subjects-exam-dates.ts",
          "path": "src/modules/curriculum/resolvers/mutation.update-subjects-exam-dates.ts"
        }
      }
    },
    {
      "name": "Major",
      "id": "Major",
      "type": "type",
      "referencedBy": [
        "Minor",
        "Profile",
        "School",
        "SchoolGroup",
        "Subject",
        "Ticket",
        "User",
        "UserCandidate"
      ],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/curriculum/types/major.ts",
          "path": "src/modules/curriculum/types/major.ts"
        }
      }
    },
    {
      "name": "Minor",
      "id": "Minor",
      "type": "type",
      "referencedBy": [
        "Major",
        "QueryMinorsConnection",
        "QueryMinorsConnectionEdge",
        "Subject",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/curriculum/types/minor.ts",
          "path": "src/modules/curriculum/types/minor.ts"
        }
      }
    },
    {
      "name": "QueryMinorsConnection",
      "id": "QueryMinorsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Minor",
        "edgeType": "QueryMinorsConnectionEdge",
        "connectionType": "QueryMinorsConnection"
      },
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/curriculum/types/minor.ts",
          "path": "src/modules/curriculum/types/minor.ts"
        }
      }
    },
    {
      "name": "Subject",
      "id": "Subject",
      "type": "type",
      "referencedBy": [
        "Document",
        "Major",
        "Minor",
        "TeachingUnit"
      ],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/curriculum/types/subject.ts",
          "path": "src/modules/curriculum/types/subject.ts"
        }
      }
    },
    {
      "name": "TeachingUnit",
      "id": "TeachingUnit",
      "type": "type",
      "referencedBy": [
        "Subject"
      ],
      "deprecationReason": null,
      "moduleName": "curriculum",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/curriculum/types/teaching-unit.ts",
          "path": "src/modules/curriculum/types/teaching-unit.ts"
        }
      }
    },
    {
      "name": "deleteComment",
      "id": "Mutation.deleteComment",
      "type": "mutation",
      "returnType": "Comment",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "comments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/comments/resolvers/mutation.delete-comment.ts",
          "path": "src/modules/comments/resolvers/mutation.delete-comment.ts"
        }
      }
    },
    {
      "name": "upsertComment",
      "id": "Mutation.upsertComment",
      "type": "mutation",
      "returnType": "Comment",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "comments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/comments/resolvers/mutation.upsert-comment.ts",
          "path": "src/modules/comments/resolvers/mutation.upsert-comment.ts"
        }
      }
    },
    {
      "name": "Comment",
      "id": "Comment",
      "type": "type",
      "referencedBy": [
        "Comment",
        "CommentsConnection",
        "CommentsEdge",
        "Reaction"
      ],
      "deprecationReason": null,
      "moduleName": "comments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/comments/types/comment.ts",
          "path": "src/modules/comments/types/comment.ts"
        }
      }
    },
    {
      "name": "Commentable",
      "id": "Commentable",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "comments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/comments/types/commentable.ts",
          "path": "src/modules/comments/types/commentable.ts"
        }
      }
    },
    {
      "name": "CommentsConnection",
      "id": "CommentsConnection",
      "type": "type",
      "referencedBy": [
        "Article",
        "Commentable",
        "Document"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Comment",
        "edgeType": "CommentsEdge",
        "connectionType": "CommentsConnection"
      },
      "moduleName": "comments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/comments/types/comments-connection.ts",
          "path": "src/modules/comments/types/comments-connection.ts"
        }
      }
    },
    {
      "name": "reaction",
      "id": "Query.reaction",
      "type": "query",
      "returnType": "Reaction",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/query.reaction.ts",
          "path": "src/modules/reactions/resolvers/query.reaction.ts"
        }
      }
    },
    {
      "name": "reactions",
      "id": "Query.reactions",
      "type": "query",
      "returnType": "QueryReactionsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Reaction",
        "edgeType": "QueryReactionsConnectionEdge",
        "connectionType": "QueryReactionsConnection"
      },
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/query.reactions.ts",
          "path": "src/modules/reactions/resolvers/query.reactions.ts"
        }
      }
    },
    {
      "name": "deleteReaction",
      "id": "Mutation.deleteReaction",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/mutation.delete-reaction.ts",
          "path": "src/modules/reactions/resolvers/mutation.delete-reaction.ts"
        }
      }
    },
    {
      "name": "react",
      "id": "Mutation.react",
      "type": "mutation",
      "returnType": "Reactable",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/mutation.react.ts",
          "path": "src/modules/reactions/resolvers/mutation.react.ts"
        }
      }
    },
    {
      "name": "toggleReaction",
      "id": "Mutation.toggleReaction",
      "type": "mutation",
      "returnType": "Reactable",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/mutation.toggle-reaction.ts",
          "path": "src/modules/reactions/resolvers/mutation.toggle-reaction.ts"
        }
      }
    },
    {
      "name": "unreact",
      "id": "Mutation.unreact",
      "type": "mutation",
      "returnType": "Reactable",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/mutation.unreact.ts",
          "path": "src/modules/reactions/resolvers/mutation.unreact.ts"
        }
      }
    },
    {
      "name": "upsertReaction",
      "id": "Mutation.upsertReaction",
      "type": "mutation",
      "returnType": "Int",
      "referencedBy": [],
      "deprecationReason": "Use 'react' instead",
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/reactions/resolvers/mutation.upsert-reaction.ts",
          "path": "src/modules/reactions/resolvers/mutation.upsert-reaction.ts"
        }
      }
    },
    {
      "name": "BooleanMap",
      "id": "BooleanMap",
      "type": "type",
      "referencedBy": [
        "Article",
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/reactions/types/boolean-map.ts",
          "path": "src/modules/reactions/types/boolean-map.ts"
        }
      }
    },
    {
      "name": "Counts",
      "id": "Counts",
      "type": "type",
      "referencedBy": [
        "Article",
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/reactions/types/counts.ts",
          "path": "src/modules/reactions/types/counts.ts"
        }
      }
    },
    {
      "name": "QueryReactionsConnection",
      "id": "QueryReactionsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Reaction",
        "edgeType": "QueryReactionsConnectionEdge",
        "connectionType": "QueryReactionsConnection"
      },
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/reactions/types/reaction.ts",
          "path": "src/modules/reactions/types/reaction.ts"
        }
      }
    },
    {
      "name": "Reactable",
      "id": "Reactable",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/reactions/types/reactable.ts",
          "path": "src/modules/reactions/types/reactable.ts"
        }
      }
    },
    {
      "name": "Reaction",
      "id": "Reaction",
      "type": "type",
      "referencedBy": [
        "QueryReactionsConnection",
        "QueryReactionsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "reactions",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/reactions/types/reaction.ts",
          "path": "src/modules/reactions/types/reaction.ts"
        }
      }
    },
    {
      "name": "addLinks",
      "id": "Mutation.addLinks",
      "type": "mutation",
      "returnType": "MutationAddLinksResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAddLinksResult",
        "successDataType": "HasLinks",
        "successType": "MutationAddLinksSuccess"
      },
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/links/resolvers/mutation.add-links.ts",
          "path": "src/modules/links/resolvers/mutation.add-links.ts"
        }
      }
    },
    {
      "name": "deleteLink",
      "id": "Mutation.deleteLink",
      "type": "mutation",
      "returnType": "MutationDeleteLinkResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteLinkResult",
        "successDataType": "Link",
        "successType": "MutationDeleteLinkSuccess"
      },
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/links/resolvers/mutation.delete-link.ts",
          "path": "src/modules/links/resolvers/mutation.delete-link.ts"
        }
      }
    },
    {
      "name": "updateLink",
      "id": "Mutation.updateLink",
      "type": "mutation",
      "returnType": "MutationUpdateLinkResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateLinkResult",
        "successDataType": "Link",
        "successType": "MutationUpdateLinkSuccess"
      },
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/links/resolvers/mutation.update-link.ts",
          "path": "src/modules/links/resolvers/mutation.update-link.ts"
        }
      }
    },
    {
      "name": "DuplicateLinksAction",
      "id": "DuplicateLinksAction",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "links",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "HasLinks",
      "id": "HasLinks",
      "type": "type",
      "referencedBy": [
        "MutationAddLinksSuccess"
      ],
      "deprecationReason": null,
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/links/types/has-links.ts",
          "path": "src/modules/links/types/has-links.ts"
        }
      }
    },
    {
      "name": "Link",
      "id": "Link",
      "type": "type",
      "referencedBy": [
        "Article",
        "Event",
        "Group",
        "MutationDeleteLinkSuccess",
        "MutationUpdateLinkSuccess",
        "Notification",
        "StudentAssociation",
        "Subject",
        "Ticket",
        "User"
      ],
      "deprecationReason": null,
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/links/types/link.ts",
          "path": "src/modules/links/types/link.ts"
        }
      }
    },
    {
      "name": "LinkInput",
      "id": "LinkInput",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/links/types/link-input.ts",
          "path": "src/modules/links/types/link-input.ts"
        }
      }
    },
    {
      "name": "MutationAddLinksResult",
      "id": "MutationAddLinksResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationAddLinksResult",
        "successDataType": "HasLinks",
        "successType": "MutationAddLinksSuccess"
      },
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/links/types/has-links.ts",
          "path": "src/modules/links/types/has-links.ts"
        }
      }
    },
    {
      "name": "MutationDeleteLinkResult",
      "id": "MutationDeleteLinkResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationDeleteLinkResult",
        "successDataType": "Link",
        "successType": "MutationDeleteLinkSuccess"
      },
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/links/types/link.ts",
          "path": "src/modules/links/types/link.ts"
        }
      }
    },
    {
      "name": "MutationUpdateLinkResult",
      "id": "MutationUpdateLinkResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpdateLinkResult",
        "successDataType": "Link",
        "successType": "MutationUpdateLinkSuccess"
      },
      "moduleName": "links",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/links/types/link.ts",
          "path": "src/modules/links/types/link.ts"
        }
      }
    },
    {
      "name": "announcement",
      "id": "Query.announcement",
      "type": "query",
      "returnType": "Announcement",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/announcements/resolvers/query.announcement.ts",
          "path": "src/modules/announcements/resolvers/query.announcement.ts"
        }
      }
    },
    {
      "name": "announcements",
      "id": "Query.announcements",
      "type": "query",
      "returnType": "QueryAnnouncementsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Announcement",
        "edgeType": "QueryAnnouncementsConnectionEdge",
        "connectionType": "QueryAnnouncementsConnection"
      },
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/announcements/resolvers/query.announcements.ts",
          "path": "src/modules/announcements/resolvers/query.announcements.ts"
        }
      }
    },
    {
      "name": "announcementsNow",
      "id": "Query.announcementsNow",
      "type": "query",
      "returnType": "Announcement",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/announcements/resolvers/query.announcements-now.ts",
          "path": "src/modules/announcements/resolvers/query.announcements-now.ts"
        }
      }
    },
    {
      "name": "deleteAnnouncement",
      "id": "Mutation.deleteAnnouncement",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/announcements/resolvers/mutation.delete-announcement.ts",
          "path": "src/modules/announcements/resolvers/mutation.delete-announcement.ts"
        }
      }
    },
    {
      "name": "upsertAnnouncement",
      "id": "Mutation.upsertAnnouncement",
      "type": "mutation",
      "returnType": "MutationUpsertAnnouncementResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertAnnouncementResult",
        "successDataType": "Announcement",
        "successType": "MutationUpsertAnnouncementSuccess"
      },
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/announcements/resolvers/mutation.upsert-announcement.ts",
          "path": "src/modules/announcements/resolvers/mutation.upsert-announcement.ts"
        }
      }
    },
    {
      "name": "Announcement",
      "id": "Announcement",
      "type": "type",
      "referencedBy": [
        "MutationUpsertAnnouncementSuccess",
        "QueryAnnouncementsConnection",
        "QueryAnnouncementsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/announcements/types/announcement.ts",
          "path": "src/modules/announcements/types/announcement.ts"
        }
      }
    },
    {
      "name": "MutationUpsertAnnouncementResult",
      "id": "MutationUpsertAnnouncementResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationUpsertAnnouncementResult",
        "successDataType": "Announcement",
        "successType": "MutationUpsertAnnouncementSuccess"
      },
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/announcements/types/announcement.ts",
          "path": "src/modules/announcements/types/announcement.ts"
        }
      }
    },
    {
      "name": "QueryAnnouncementsConnection",
      "id": "QueryAnnouncementsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "Announcement",
        "edgeType": "QueryAnnouncementsConnectionEdge",
        "connectionType": "QueryAnnouncementsConnection"
      },
      "moduleName": "announcements",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/announcements/types/announcement.ts",
          "path": "src/modules/announcements/types/announcement.ts"
        }
      }
    },
    {
      "name": "lydiaAccount",
      "id": "Query.lydiaAccount",
      "type": "query",
      "returnType": "LydiaAccount",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/payments/resolvers/query.lydia-account.ts",
          "path": "src/modules/payments/resolvers/query.lydia-account.ts"
        }
      }
    },
    {
      "name": "lydiaAccounts",
      "id": "Query.lydiaAccounts",
      "type": "query",
      "returnType": "LydiaAccount",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/payments/resolvers/query.lydia-accounts.ts",
          "path": "src/modules/payments/resolvers/query.lydia-accounts.ts"
        }
      }
    },
    {
      "name": "lydiaAccountsOfGroup",
      "id": "Query.lydiaAccountsOfGroup",
      "type": "query",
      "returnType": "LydiaAccount",
      "referencedBy": [],
      "deprecationReason": "Use group.lydiaAccounts instead",
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/payments/resolvers/query.lydia-accounts-of-group.ts",
          "path": "src/modules/payments/resolvers/query.lydia-accounts-of-group.ts"
        }
      }
    },
    {
      "name": "claimPromotionCode",
      "id": "Mutation.claimPromotionCode",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/payments/resolvers/mutation.claim-promotion-code.ts",
          "path": "src/modules/payments/resolvers/mutation.claim-promotion-code.ts"
        }
      }
    },
    {
      "name": "finishPaypalRegistrationPayment",
      "id": "Mutation.finishPaypalRegistrationPayment",
      "type": "mutation",
      "returnType": "MutationFinishPaypalRegistrationPaymentResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "MutationFinishPaypalRegistrationPaymentResult",
        "successDataType": "Boolean",
        "successType": "MutationFinishPaypalRegistrationPaymentSuccess"
      },
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/payments/resolvers/mutation.finish-paypal-registration-payment.ts",
          "path": "src/modules/payments/resolvers/mutation.finish-paypal-registration-payment.ts"
        }
      }
    },
    {
      "name": "upsertLydiaAccount",
      "id": "Mutation.upsertLydiaAccount",
      "type": "mutation",
      "returnType": "LydiaAccount",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/payments/resolvers/mutation.upsert-lydia-account.ts",
          "path": "src/modules/payments/resolvers/mutation.upsert-lydia-account.ts"
        }
      }
    },
    {
      "name": "LydiaAccount",
      "id": "LydiaAccount",
      "type": "type",
      "referencedBy": [
        "Event",
        "Group",
        "ShopItem"
      ],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/payments/types/lydia-account.ts",
          "path": "src/modules/payments/types/lydia-account.ts"
        }
      }
    },
    {
      "name": "PaymentMethod",
      "id": "PaymentMethod",
      "type": "type",
      "referencedBy": [
        "Registration",
        "ShopItem",
        "ShopPayment",
        "Ticket"
      ],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/payments/types/payment-method.ts",
          "path": "src/modules/payments/types/payment-method.ts"
        }
      }
    },
    {
      "name": "ProfitsBreakdown",
      "id": "ProfitsBreakdown",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/payments/types/profits-breakdown.ts",
          "path": "src/modules/payments/types/profits-breakdown.ts"
        }
      }
    },
    {
      "name": "ProfitsBreakdownByPaymentMethod",
      "id": "ProfitsBreakdownByPaymentMethod",
      "type": "type",
      "referencedBy": [
        "ProfitsBreakdown"
      ],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "ProfitsBreakdownByTicket",
      "id": "ProfitsBreakdownByTicket",
      "type": "type",
      "referencedBy": [
        "ProfitsBreakdown"
      ],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "PromotionType",
      "id": "PromotionType",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "moduleName": "payments",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/payments/types/promotion-type.ts",
          "path": "src/modules/payments/types/promotion-type.ts"
        }
      }
    },
    {
      "name": "codeContributors",
      "id": "Query.codeContributors",
      "type": "query",
      "returnType": "QueryCodeContributorsResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryCodeContributorsResult",
        "successDataType": "User",
        "successType": "QueryCodeContributorsSuccess"
      },
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/gitlab/resolvers/query.code-contributors.ts",
          "path": "src/modules/gitlab/resolvers/query.code-contributors.ts"
        }
      }
    },
    {
      "name": "issue",
      "id": "Query.issue",
      "type": "query",
      "returnType": "Issue",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/gitlab/resolvers/query.issue.ts",
          "path": "src/modules/gitlab/resolvers/query.issue.ts"
        }
      }
    },
    {
      "name": "issuesByUser",
      "id": "Query.issuesByUser",
      "type": "query",
      "returnType": "Issue",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/gitlab/resolvers/query.issues-by-user.ts",
          "path": "src/modules/gitlab/resolvers/query.issues-by-user.ts"
        }
      }
    },
    {
      "name": "createGitlabIssue",
      "id": "Mutation.createGitlabIssue",
      "type": "mutation",
      "returnType": "Int",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/gitlab/resolvers/mutation.create-gitlab-issue.ts",
          "path": "src/modules/gitlab/resolvers/mutation.create-gitlab-issue.ts"
        }
      }
    },
    {
      "name": "Issue",
      "id": "Issue",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/gitlab/types/issue.ts",
          "path": "src/modules/gitlab/types/issue.ts"
        }
      }
    },
    {
      "name": "IssueComment",
      "id": "IssueComment",
      "type": "type",
      "referencedBy": [
        "Issue"
      ],
      "deprecationReason": null,
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/gitlab/types/issue-comment.ts",
          "path": "src/modules/gitlab/types/issue-comment.ts"
        }
      }
    },
    {
      "name": "IssueState",
      "id": "IssueState",
      "type": "type",
      "referencedBy": [
        "Issue"
      ],
      "deprecationReason": null,
      "moduleName": "gitlab",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/gitlab/types/issue-state.ts",
          "path": "src/modules/gitlab/types/issue-state.ts"
        }
      }
    },
    {
      "name": "changelog",
      "id": "Query.changelog",
      "type": "query",
      "returnType": "ChangelogRelease",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/changelogs/resolvers/query.changelog.ts",
          "path": "src/modules/changelogs/resolvers/query.changelog.ts"
        }
      }
    },
    {
      "name": "combinedChangelog",
      "id": "Query.combinedChangelog",
      "type": "query",
      "returnType": "QueryCombinedChangelogResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryCombinedChangelogResult",
        "successDataType": "ChangelogRelease",
        "successType": "QueryCombinedChangelogSuccess"
      },
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/changelogs/resolvers/query.combined-changelog.ts",
          "path": "src/modules/changelogs/resolvers/query.combined-changelog.ts"
        }
      }
    },
    {
      "name": "upcomingChangelog",
      "id": "Query.upcomingChangelog",
      "type": "query",
      "returnType": "QueryUpcomingChangelogResult",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryUpcomingChangelogResult",
        "successDataType": "ChangelogRelease",
        "successType": "QueryUpcomingChangelogSuccess"
      },
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/changelogs/resolvers/query.upcoming-changelog.ts",
          "path": "src/modules/changelogs/resolvers/query.upcoming-changelog.ts"
        }
      }
    },
    {
      "name": "acknowledgeChangelog",
      "id": "Mutation.acknowledgeChangelog",
      "type": "mutation",
      "returnType": "Boolean",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/changelogs/resolvers/mutation.acknowledge-changelog.ts",
          "path": "src/modules/changelogs/resolvers/mutation.acknowledge-changelog.ts"
        }
      }
    },
    {
      "name": "ChangelogRelease",
      "id": "ChangelogRelease",
      "type": "type",
      "referencedBy": [
        "QueryCombinedChangelogSuccess",
        "QueryUpcomingChangelogSuccess"
      ],
      "deprecationReason": null,
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/changelogs/types/changelog-release.ts",
          "path": "src/modules/changelogs/types/changelog-release.ts"
        }
      }
    },
    {
      "name": "QueryCombinedChangelogResult",
      "id": "QueryCombinedChangelogResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryCombinedChangelogResult",
        "successDataType": "ChangelogRelease",
        "successType": "QueryCombinedChangelogSuccess"
      },
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/changelogs/types/changelog-release.ts",
          "path": "src/modules/changelogs/types/changelog-release.ts"
        }
      }
    },
    {
      "name": "QueryUpcomingChangelogResult",
      "id": "QueryUpcomingChangelogResult",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "result": {
        "errorTypes": [
          "Error",
          "ZodError"
        ],
        "resultType": "QueryUpcomingChangelogResult",
        "successDataType": "ChangelogRelease",
        "successType": "QueryUpcomingChangelogSuccess"
      },
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/changelogs/types/changelog-release.ts",
          "path": "src/modules/changelogs/types/changelog-release.ts"
        }
      }
    },
    {
      "name": "ReleaseChange",
      "id": "ReleaseChange",
      "type": "type",
      "referencedBy": [
        "ReleaseChangesMaps"
      ],
      "deprecationReason": null,
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/changelogs/types/release-change.ts",
          "path": "src/modules/changelogs/types/release-change.ts"
        }
      }
    },
    {
      "name": "ReleaseChangesMaps",
      "id": "ReleaseChangesMaps",
      "type": "type",
      "referencedBy": [
        "ChangelogRelease"
      ],
      "deprecationReason": null,
      "moduleName": "changelogs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/changelogs/types/release-changes-maps.ts",
          "path": "src/modules/changelogs/types/release-changes-maps.ts"
        }
      }
    },
    {
      "name": "logs",
      "id": "Query.logs",
      "type": "query",
      "returnType": "QueryLogsConnection",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "LogEntry",
        "edgeType": "QueryLogsConnectionEdge",
        "connectionType": "QueryLogsConnection"
      },
      "moduleName": "logs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/logs/resolvers/query.logs.ts",
          "path": "src/modules/logs/resolvers/query.logs.ts"
        }
      }
    },
    {
      "name": "EventLogsConnection",
      "id": "EventLogsConnection",
      "type": "type",
      "referencedBy": [
        "Event"
      ],
      "deprecationReason": null,
      "connection": {
        "nodeType": "LogEntry",
        "edgeType": "EventLogsConnectionEdge",
        "connectionType": "EventLogsConnection"
      },
      "moduleName": "logs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/logs/types/log-entry.ts",
          "path": "src/modules/logs/types/log-entry.ts"
        }
      }
    },
    {
      "name": "LogEntry",
      "id": "LogEntry",
      "type": "type",
      "referencedBy": [
        "EventLogsConnection",
        "EventLogsConnectionEdge",
        "QueryLogsConnection",
        "QueryLogsConnectionEdge"
      ],
      "deprecationReason": null,
      "moduleName": "logs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/logs/types/log-entry.ts",
          "path": "src/modules/logs/types/log-entry.ts"
        }
      }
    },
    {
      "name": "QueryLogsConnection",
      "id": "QueryLogsConnection",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "connection": {
        "nodeType": "LogEntry",
        "edgeType": "QueryLogsConnectionEdge",
        "connectionType": "QueryLogsConnection"
      },
      "moduleName": "logs",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/logs/types/log-entry.ts",
          "path": "src/modules/logs/types/log-entry.ts"
        }
      }
    },
    {
      "name": "healthcheck",
      "id": "Query.healthcheck",
      "type": "query",
      "returnType": "HealthCheck",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "health-checks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/resolvers/[parent].[fieldname].ts",
          "computed": "src/modules/health-checks/resolvers/query.healthcheck.ts",
          "path": "src/modules/health-checks/resolvers/query.healthcheck.ts"
        }
      }
    },
    {
      "name": "DatabaseHealthCheck",
      "id": "DatabaseHealthCheck",
      "type": "type",
      "referencedBy": [
        "HealthCheck"
      ],
      "deprecationReason": null,
      "moduleName": "health-checks",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "HealthCheck",
      "id": "HealthCheck",
      "type": "type",
      "referencedBy": [],
      "deprecationReason": null,
      "moduleName": "health-checks",
      "match": {
        "filesystem": {
          "pattern": "src/modules/[module]/types/[typename].ts",
          "computed": "src/modules/health-checks/types/health-check.ts",
          "path": "src/modules/health-checks/types/health-check.ts"
        }
      }
    },
    {
      "name": "LdapHealthCheck",
      "id": "LdapHealthCheck",
      "type": "type",
      "referencedBy": [
        "HealthCheck"
      ],
      "deprecationReason": null,
      "moduleName": "health-checks",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "MailHealthCheck",
      "id": "MailHealthCheck",
      "type": "type",
      "referencedBy": [
        "HealthCheck"
      ],
      "deprecationReason": null,
      "moduleName": "health-checks",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    },
    {
      "name": "RedisHealthCheck",
      "id": "RedisHealthCheck",
      "type": "type",
      "referencedBy": [
        "HealthCheck"
      ],
      "deprecationReason": null,
      "moduleName": "health-checks",
      "match": {
        "schema": {
          "directive": "graphinx"
        }
      }
    }
  ]
};